{   0} main() <int main (int argc, char **argv) at ./srclib/pcre/pgrep.c:134>:
{   1}     printf()
{   1}     exit()
{   1}     opendir()
{   1}     perror()
{   1}     readdir()
{   1}     sprintf()
{   1}     fopen()
{   1}     fgets()
{   1}     fclose()
{   1}     checkmask() <int checkmask (const char *data, const char *mask) at ./test/cls.c:33>:
{   2}         isupper()
{   2}         islower()
{   2}         isdigit()
{   2}         isxdigit()
{   1}     fprintf()
{   1}     hex2sec() <int hex2sec (const char *x) at ./test/cls.c:69>:
{   2}         isdigit()
{   2}         isupper()
{   1}     strlen()
{   1}     strncmp()
{   1}     gmtime()
{   1}     strftime()
{   1}     strcpy()
{   1}     closedir()
{   1}     apr_pool_alloc_init()
{   1}     gets()
{   1}     ap_find_list_item()
{   1}     getopt()
{   1}     atoi()
{   1}     usage() <void usage (char *progname) at ./test/zb.c:511>:
{   2}         fprintf()
{   2}         exit()
{   2}         printf()
{   1}     gethostbyname()
{   1}     bzero()
{   1}     bcopy()
{   1}     htons()
{   1}     socket()
{   1}     connect()
{   1}     fdopen()
{   1}     ferror()
{   1}     fflush()
{   1}     read()
{   1}     write()
{   1}     ap_get_list_item()
{   1}     select()
{   1}     inet_addr()
{   1}     setsockopt()
{   1}     writev()
{   1}     get_shared_mem() <void *get_shared_mem (apr_size_t size) at ./test/time-sem.c:441>:
{   2}         mmap()
{   2}         perror()
{   2}         exit()
{   2}         shmget()
{   2}         sbrk()
{   2}         shmat()
{   2}         shmctl()
{   1}     accept_mutex_init() <void accept_mutex_init (void) at ./test/time-sem.c:369>:
{   2}         printf()
{   2}         open()
{   2}         perror()
{   2}         fprintf()
{   2}         exit()
{   2}         unlink()
{   2}         semget()
{   2}         semctl()
{   2}         sigfillset()
{   2}         sigdelset()
{   2}         mmap()
{   2}         close()
{   2}         pthread_mutexattr_init()
{   2}         pthread_mutexattr_setpshared()
{   2}         pthread_mutex_init()
{   2}         usconfig()
{   2}         usinit()
{   2}         usnewlock()
{   1}     accept_mutex_on() <void accept_mutex_on () at ./test/time-sem.c:395>:
{   2}         fcntl()
{   2}         perror()
{   2}         exit()
{   2}         flock()
{   2}         sigprocmask()
{   2}         semop()
{   2}         pthread_mutex_lock()
{   2}         ussetlock()
{   2}         fprintf()
{   1}     fork()
{   1}     accept_mutex_child_init() <void accept_mutex_child_init (void) at ./test/time-sem.c:158>:
{   2}         open()
{   2}         perror()
{   2}         exit()
{   1}     accept_mutex_off() <void accept_mutex_off () at ./test/time-sem.c:409>:
{   2}         fcntl()
{   2}         perror()
{   2}         exit()
{   2}         flock()
{   2}         semop()
{   2}         sigprocmask()
{   2}         pthread_mutex_unlock()
{   2}         usunsetlock()
{   1}     puts()
{   1}     gettimeofday()
{   1}     wait()
{   1}     accept_mutex_cleanup() <void accept_mutex_cleanup (void) at ./test/time-sem.c:167>:
{   2}         unlink()
{   1}     test() <int test () at ./test/zb.c:431>:
{   2}         gethostbyname()
{   2}         err() <void err (char *s) at ./test/zb.c:138>:
{   3}             perror()
{   3}             exit()
{   2}         htons()
{   2}         malloc()
{   2}         memset()
{   2}         FD_ZERO()
{   2}         sprintf()
{   2}         strlen()
{   2}         gettimeofday()
{   2}         start_connect() <void start_connect (struct connection *c) at ./test/zb.c:245> (R):
{   3}             socket()
{   3}             err() <void err (char *s) at ./test/zb.c:138>:
{   4}                 perror()
{   4}                 exit()
{   3}             nonblock() <void nonblock (int fd) at ./test/zb.c:162>:
{   4}                 ioctl()
{   3}             gettimeofday()
{   3}             connect()
{   3}             FD_SET()
{   3}             close()
{   3}             printf()
{   3}             exit()
{   3}             start_connect() <void start_connect (struct connection *c) at ./test/zb.c:245> (recursive: see 119)
{   3}             write_request() <void write_request (struct connection *c) at ./test/zb.c:149>:
{   4}                 gettimeofday()
{   4}                 write()
{   4}                 FD_SET()
{   4}                 FD_CLR()
{   2}         memcpy()
{   2}         timedif() <int timedif (struct timeval a, struct timeval b) at ./test/zb.c:172>:
{   2}         output_results() <void output_results () at ./test/zb.c:187>:
{   3}             gettimeofday()
{   3}             timedif() <int timedif (struct timeval a, struct timeval b) at ./test/zb.c:172>:
{   3}             printf()
{   3}             min()
{   3}             max()
{   3}             exit()
{   2}         select()
{   2}         printf()
{   2}         exit()
{   2}         FD_ISSET()
{   2}         read_connection() <void read_connection (struct connection *c) at ./test/zb.c:323>:
{   3}             read()
{   3}             close_connection() <void close_connection (struct connection *c) at ./test/zb.c:284>:
{   4}                 gettimeofday()
{   4}                 timedif() <int timedif (struct timeval a, struct timeval b) at ./test/zb.c:172>:
{   4}                 close()
{   4}                 FD_CLR()
{   4}                 start_connect() <void start_connect (struct connection *c) at ./test/zb.c:245> (R):
{   5}                     socket()
{   5}                     err() <void err (char *s) at ./test/zb.c:138>:
{   6}                         perror()
{   6}                         exit()
{   5}                     nonblock() <void nonblock (int fd) at ./test/zb.c:162>:
{   6}                         ioctl()
{   5}                     gettimeofday()
{   5}                     connect()
{   5}                     FD_SET()
{   5}                     close()
{   5}                     printf()
{   5}                     exit()
{   5}                     start_connect() <void start_connect (struct connection *c) at ./test/zb.c:245> (recursive: see 158)
{   5}                     write_request() <void write_request (struct connection *c) at ./test/zb.c:149>:
{   6}                         gettimeofday()
{   6}                         write()
{   6}                         FD_SET()
{   6}                         FD_CLR()
{   3}             memcpy()
{   3}             strstr()
{   3}             close()
{   3}             printf()
{   3}             exit()
{   3}             FD_CLR()
{   3}             start_connect() <void start_connect (struct connection *c) at ./test/zb.c:245> (R):
{   4}                 socket()
{   4}                 err() <void err (char *s) at ./test/zb.c:138>:
{   5}                     perror()
{   5}                     exit()
{   4}                 nonblock() <void nonblock (int fd) at ./test/zb.c:162>:
{   5}                     ioctl()
{   4}                 gettimeofday()
{   4}                 connect()
{   4}                 FD_SET()
{   4}                 close()
{   4}                 printf()
{   4}                 exit()
{   4}                 start_connect() <void start_connect (struct connection *c) at ./test/zb.c:245> (recursive: see 183)
{   4}                 write_request() <void write_request (struct connection *c) at ./test/zb.c:149>:
{   5}                     gettimeofday()
{   5}                     write()
{   5}                     FD_SET()
{   5}                     FD_CLR()
{   3}             atoi()
{   3}             gettimeofday()
{   3}             timedif() <int timedif (struct timeval a, struct timeval b) at ./test/zb.c:172>:
{   3}             write_request() <void write_request (struct connection *c) at ./test/zb.c:149>:
{   4}                 gettimeofday()
{   4}                 write()
{   4}                 FD_SET()
{   4}                 FD_CLR()
{   2}         write_request() <void write_request (struct connection *c) at ./test/zb.c:149>:
{   3}             gettimeofday()
{   3}             write()
{   3}             FD_SET()
{   3}             FD_CLR()
{   1}     strchr()
{   1}     apr_isalnum()
{   1}     apr_iscntrl()
{   1}     apr_isprint()
{   1}     APR_OPTIONAL_FN_TYPE()
{   1}     ap_signal_server() <int ap_signal_server (int *exit_status, apr_pool_t *pconf) at ./server/mpm_common.c:898>:
{   2}         ap_read_pid()
{   2}         ap_log_error()
{   2}         kill()
{   2}         apr_psprintf()
{   2}         strcmp()
{   2}         printf()
{   2}         send_signal() <int send_signal (pid_t pid, int sig) at ./server/mpm_common.c:888>:
{   3}             kill()
{   3}             ap_log_error()
{   1}     signal_server()
{   1}     AP_MONCONTROL()
{   1}     apr_app_initialize()
{   1}     create_process() <process_rec *create_process (int argc, const char *const *argv) at ./server/main.c:259>:
{   2}         stat()
{   2}         apr_pool_create()
{   2}         ap_log_error()
{   2}         apr_terminate()
{   2}         exit()
{   2}         apr_pool_tag()
{   2}         ap_open_stderr_log()
{   2}         apr_palloc()
{   2}         apr_filepath_name_get()
{   1}     ap_init_ebcdic() <apr_status_t ap_init_ebcdic (apr_pool_t *pool) at ./server/util_ebcdic.c:27>:
{   2}         apr_xlate_open()
{   2}         ap_log_error()
{   2}         apr_MD5InitEBCDIC()
{   2}         apr_base64init_ebcdic()
{   2}         apr_SHA1InitEBCDIC()
{   1}     destroy_and_exit_process() <void destroy_and_exit_process (process_rec *process, int process_exit_value) at ./server/main.c:251>:
{   2}         apr_pool_destroy()
{   2}         apr_terminate()
{   2}         exit()
{   1}     apr_pool_create()
{   1}     apr_pool_tag()
{   1}     apr_array_make()
{   1}     ap_setup_prelinked_modules()
{   1}     ap_log_error()
{   1}     ap_run_rewrite_args()
{   1}     apr_getopt_init()
{   1}     apr_getopt()
{   1}     apr_array_push()
{   1}     apr_pstrdup()
{   1}     strcmp()
{   1}     strcasecmp()
{   1}     strncasecmp()
{   1}     usage() <void usage (process_rec *process) at ./server/main.c:291>:
{   2}         strlen()
{   2}         ap_log_error()
{   2}         destroy_and_exit_process() <void destroy_and_exit_process (process_rec *process, int process_exit_value) at ./server/main.c:251>:
{   3}             apr_pool_destroy()
{   3}             apr_terminate()
{   3}             exit()
{   1}     ap_get_server_version()
{   1}     ap_get_server_built()
{   1}     show_compile_settings() <void show_compile_settings (void) at ./server/main.c:87>:
{   2}         printf()
{   2}         ap_get_server_version()
{   2}         ap_get_server_built()
{   2}         show_mpm_settings() <void show_mpm_settings (void) at ./server/main.c:47>:
{   3}             printf()
{   3}             ap_show_mpm()
{   3}             ap_mpm_query()
{   1}     ap_show_modules()
{   1}     ap_show_directives()
{   1}     ap_replace_stderr_log()
{   1}     ap_read_config()
{   1}     ap_run_pre_config()
{   1}     ap_process_config_tree()
{   1}     ap_fixup_virtual_hosts()
{   1}     ap_fini_vhost_config()
{   1}     apr_hook_sort_all()
{   1}     ap_run_test_config()
{   1}     APR_RETRIEVE_OPTIONAL_FN()
{   1}     apr_pool_clear()
{   1}     ap_run_open_logs()
{   1}     ap_run_post_config()
{   1}     apr_pool_destroy()
{   1}     apr_hook_deregister_all()
{   1}     ap_register_hooks()
{   1}     apr_pool_lock()
{   1}     ap_run_optional_fn_retrieve()
{   1}     ap_mpm_run() <int ap_mpm_run (apr_pool_t *_pconf, apr_pool_t *plog, server_rec *s) at ./server/mpm/experimental/event/event.c:1870>:
{   2}         DosSetMaxFH()
{   2}         apr_psprintf()
{   2}         getppid()
{   2}         DosGetNamedSharedMem()
{   2}         getpid()
{   2}         apr_pcalloc()
{   2}         apr_sockaddr_info_get()
{   2}         apr_socket_create()
{   2}         apr_os_sock_put()
{   2}         apr_socket_addr_get()
{   2}         DosFreeMem()
{   2}         ap_mpm_child_main() <void ap_mpm_child_main (apr_pool_t *pconf) at ./server/mpm/mpmt_os2/mpmt_os2_child.c:92>:
{   3}             getpid()
{   3}             DosSetSignalExceptionFocus()
{   3}             set_signals() <void set_signals () at ./server/mpm/mpmt_os2/mpmt_os2_child.c:465>:
{   4}                 sigemptyset()
{   4}                 sig_term() <void sig_term (int sig) at ./server/mpm/mpmt_os2/mpmt_os2_child.c:448>:
{   5}                     signal()
{   4}                 sigaction()
{   4}                 ap_log_error()
{   4}                 sig_hup() <void sig_hup (int sig) at ./server/mpm/mpmt_os2/mpmt_os2_child.c:457>:
{   3}             apr_pool_create()
{   3}             ap_run_child_init()
{   3}             DosCreateEventSem()
{   3}             ap_log_error()
{   3}             APR_FROM_OS_ERROR()
{   3}             clean_child_exit() <void clean_child_exit (int code) at ./server/mpm/mpmt_os2/mpmt_os2_child.c:81>:
{   4}                 apr_pool_destroy()
{   4}                 exit()
{   3}             DosGetNamedSharedMem()
{   3}             ap_calc_scoreboard_size()
{   3}             ap_init_scoreboard() <void ap_init_scoreboard (void *shared_score) at ./server/scoreboard.c:113>:
{   4}                 ap_calc_scoreboard_size()
{   4}                 calloc()
{   4}                 ap_assert()
{   3}             DosOpenMutexSem()
{   3}             memset()
{   3}             DosCreateQueue()
{   3}             apr_psprintf()
{   3}             server_maintenance() <void server_maintenance (void *vpArg) at ./server/mpm/mpmt_os2/mpmt_os2_child.c:406>:
{   4}                 DosOpenQueue()
{   4}                 apr_psprintf()
{   4}                 getpid()
{   4}                 ap_log_error()
{   4}                 APR_FROM_OS_ERROR()
{   4}                 DosQueryQueue()
{   4}                 add_worker() <void add_worker () at ./server/mpm/mpmt_os2/mpmt_os2_child.c:290>:
{   5}                     worker_main() <void worker_main (void *vpArg) at ./server/mpm/mpmt_os2/mpmt_os2_child.c:341>:
{   6}                         thread_exception_handler() <ULONG APIENTRY thread_exception_handler (EXCEPTIONREPORTRECORD *pReportRec, EXCEPTIONREGISTRATIONRECORD *pRegRec, CONTEXTRECORD *pContext, PVOID p) at ./server/mpm/mpmt_os2/mpmt_os2_child.c:307>:
{   7}                             ap_log_error()
{   7}                             getpid()
{   7}                             kill()
{   7}                             DosUnwindException()
{   6}                         DosSetExceptionHandler()
{   6}                         DosOpenQueue()
{   6}                         apr_psprintf()
{   6}                         getpid()
{   6}                         ap_log_error()
{   6}                         APR_FROM_OS_ERROR()
{   6}                         ID_FROM_CHILD_THREAD()
{   6}                         ap_update_child_status_from_indexes()
{   6}                         apr_allocator_create()
{   6}                         apr_allocator_max_free_set()
{   6}                         apr_bucket_alloc_create_ex()
{   6}                         DosReadQueue()
{   6}                         ap_create_sb_handle()
{   6}                         ap_run_create_connection()
{   6}                         ap_process_connection()
{   6}                         ap_lingering_close()
{   6}                         apr_pool_destroy()
{   6}                         apr_bucket_alloc_destroy()
{   6}                         apr_allocator_destroy()
{   4}                 DosWriteQueue()
{   4}                 DosWaitEventSem()
{   3}             apr_pollset_create()
{   3}             apr_pollset_add()
{   3}             apr_palloc()
{   3}             apr_socket_accept()
{   3}             DosRequestMutexSem()
{   3}             DosReleaseMutexSem()
{   3}             apr_pollset_poll()
{   3}             APR_STATUS_IS_EINTR()
{   3}             DosWriteQueue()
{   3}             DosPostEventSem()
{   3}             DosWaitThread()
{   3}             DosSleep()
{   3}             DosPurgeQueue()
{   3}             DosKillThread()
{   3}             apr_pool_destroy()
{   2}         ap_setup_listeners()
{   2}         ap_log_error()
{   2}         ap_log_pid()
{   2}         master_main() <char master_main () at ./server/mpm/mpmt_os2/mpmt_os2.c:201>:
{   3}             printf()
{   3}             ap_get_server_version()
{   3}             set_signals() <void set_signals () at ./server/mpm/mpmt_os2/mpmt_os2.c:392>:
{   4}                 sigemptyset()
{   4}                 sig_term() <void sig_term (int sig) at ./server/mpm/mpmt_os2/mpmt_os2.c:373>:
{   5}                     signal()
{   4}                 sigaction()
{   4}                 ap_log_error()
{   4}                 sig_restart() <void sig_restart (int sig) at ./server/mpm/mpmt_os2/mpmt_os2.c:381>:
{   3}             ap_setup_listeners()
{   3}             ap_log_error()
{   3}             apr_psprintf()
{   3}             getpid()
{   3}             DosAllocSharedMem()
{   3}             APR_FROM_OS_ERROR()
{   3}             apr_os_sock_get()
{   3}             DosCreateMutexSem()
{   3}             ap_calc_scoreboard_size()
{   3}             ap_init_scoreboard() <void ap_init_scoreboard (void *shared_score) at ./server/scoreboard.c:113>:
{   4}                 ap_calc_scoreboard_size()
{   4}                 calloc()
{   4}                 ap_assert()
{   3}             apr_time_now()
{   3}             ap_get_server_built()
{   3}             apr_proc_mutex_name()
{   3}             apr_proc_mutex_defname()
{   3}             ap_mpm_child_main() <void ap_mpm_child_main (apr_pool_t *pconf) at ./server/mpm/mpmt_os2/mpmt_os2_child.c:92>:
{   4}                 getpid()
{   4}                 DosSetSignalExceptionFocus()
{   4}                 set_signals() <void set_signals () at ./server/mpm/mpmt_os2/mpmt_os2_child.c:465>:
{   5}                     sigemptyset()
{   5}                     sig_term() <void sig_term (int sig) at ./server/mpm/mpmt_os2/mpmt_os2_child.c:448>:
{   6}                         signal()
{   5}                     sigaction()
{   5}                     ap_log_error()
{   5}                     sig_hup() <void sig_hup (int sig) at ./server/mpm/mpmt_os2/mpmt_os2_child.c:457>:
{   4}                 apr_pool_create()
{   4}                 ap_run_child_init()
{   4}                 DosCreateEventSem()
{   4}                 ap_log_error()
{   4}                 APR_FROM_OS_ERROR()
{   4}                 clean_child_exit() <void clean_child_exit (int code) at ./server/mpm/mpmt_os2/mpmt_os2_child.c:81>:
{   5}                     apr_pool_destroy()
{   5}                     exit()
{   4}                 DosGetNamedSharedMem()
{   4}                 ap_calc_scoreboard_size()
{   4}                 ap_init_scoreboard() <void ap_init_scoreboard (void *shared_score) at ./server/scoreboard.c:113>:
{   5}                     ap_calc_scoreboard_size()
{   5}                     calloc()
{   5}                     ap_assert()
{   4}                 DosOpenMutexSem()
{   4}                 memset()
{   4}                 DosCreateQueue()
{   4}                 apr_psprintf()
{   4}                 server_maintenance() <void server_maintenance (void *vpArg) at ./server/mpm/mpmt_os2/mpmt_os2_child.c:406>:
{   5}                     DosOpenQueue()
{   5}                     apr_psprintf()
{   5}                     getpid()
{   5}                     ap_log_error()
{   5}                     APR_FROM_OS_ERROR()
{   5}                     DosQueryQueue()
{   5}                     add_worker() <void add_worker () at ./server/mpm/mpmt_os2/mpmt_os2_child.c:290>:
{   6}                         worker_main() <void worker_main (void *vpArg) at ./server/mpm/mpmt_os2/mpmt_os2_child.c:341>:
{   7}                             thread_exception_handler() <ULONG APIENTRY thread_exception_handler (EXCEPTIONREPORTRECORD *pReportRec, EXCEPTIONREGISTRATIONRECORD *pRegRec, CONTEXTRECORD *pContext, PVOID p) at ./server/mpm/mpmt_os2/mpmt_os2_child.c:307>:
{   8}                                 ap_log_error()
{   8}                                 getpid()
{   8}                                 kill()
{   8}                                 DosUnwindException()
{   7}                             DosSetExceptionHandler()
{   7}                             DosOpenQueue()
{   7}                             apr_psprintf()
{   7}                             getpid()
{   7}                             ap_log_error()
{   7}                             APR_FROM_OS_ERROR()
{   7}                             ID_FROM_CHILD_THREAD()
{   7}                             ap_update_child_status_from_indexes()
{   7}                             apr_allocator_create()
{   7}                             apr_allocator_max_free_set()
{   7}                             apr_bucket_alloc_create_ex()
{   7}                             DosReadQueue()
{   7}                             ap_create_sb_handle()
{   7}                             ap_run_create_connection()
{   7}                             ap_process_connection()
{   7}                             ap_lingering_close()
{   7}                             apr_pool_destroy()
{   7}                             apr_bucket_alloc_destroy()
{   7}                             apr_allocator_destroy()
{   5}                     DosWriteQueue()
{   5}                     DosWaitEventSem()
{   4}                 apr_pollset_create()
{   4}                 apr_pollset_add()
{   4}                 apr_palloc()
{   4}                 apr_socket_accept()
{   4}                 DosRequestMutexSem()
{   4}                 DosReleaseMutexSem()
{   4}                 apr_pollset_poll()
{   4}                 APR_STATUS_IS_EINTR()
{   4}                 DosWriteQueue()
{   4}                 DosPostEventSem()
{   4}                 DosWaitThread()
{   4}                 DosSleep()
{   4}                 DosPurgeQueue()
{   4}                 DosKillThread()
{   4}                 apr_pool_destroy()
{   3}             spawn_child() <void spawn_child (int slot) at ./server/mpm/mpmt_os2/mpmt_os2.c:342>:
{   4}                 DosGetInfoBlocks()
{   4}                 DosQueryModuleName()
{   4}                 DosExecPgm()
{   4}                 ap_log_error()
{   4}                 APR_FROM_OS_ERROR()
{   3}             DosWaitChild()
{   3}             apr_sleep()
{   3}             kill()
{   3}             DosFreeMem()
{   2}         ap_server_root_relative()
{   2}         remove() <allow_options_t remove at ./server/request.c:421>
{   2}         setup_listeners() <int setup_listeners (server_rec *s) at ./server/mpm/netware/mpm_netware.c:819>:
{   3}             ap_setup_listeners()
{   3}             ap_log_error()
{   3}             FD_ZERO()
{   3}             apr_os_sock_get()
{   3}             FD_SET()
{   2}         ap_run_pre_mpm()
{   2}         set_signals() <void set_signals (void) at ./server/mpm/netware/mpm_netware.c:283>:
{   3}             apr_signal()
{   3}             sig_term() <void sig_term (int sig) at ./server/mpm/netware/mpm_netware.c:252>:
{   4}                 DBPRINT0()
{   4}                 apr_thread_yield()
{   2}         apr_pool_create()
{   2}         ap_run_child_init()
{   2}         startup_workers() <void startup_workers (int number_to_start) at ./server/mpm/netware/mpm_netware.c:569>:
{   3}             make_child() <int make_child (server_rec *s, int slot) at ./server/mpm/netware/mpm_netware.c:523>:
{   4}                 ap_update_child_status_from_indexes()
{   4}                 NXContextAlloc()
{   4}                 worker_main() <void worker_main (void *arg) at ./server/mpm/netware/mpm_netware.c:324>:
{   5}                     stat()
{   5}                     apr_allocator_create()
{   5}                     apr_allocator_max_free_set()
{   5}                     apr_pool_create_ex()
{   5}                     apr_allocator_owner_set()
{   5}                     apr_pool_tag()
{   5}                     apr_bucket_alloc_create_ex()
{   5}                     atomic_inc()
{   5}                     apr_pool_clear()
{   5}                     DBPRINT1()
{   5}                     clean_child_exit() <void clean_child_exit (int code, int worker_num, apr_pool_t *ptrans, apr_bucket_alloc_t *bucket_alloc) at ./server/mpm/netware/mpm_netware.c:179>:
{   6}                         apr_bucket_alloc_destroy()
{   6}                         apr_pool_destroy()
{   6}                         atomic_dec()
{   6}                         ap_update_child_status_from_indexes()
{   6}                         NXThreadExit()
{   5}                     ap_update_child_status_from_indexes()
{   5}                     memcpy()
{   5}                     select()
{   5}                     ap_log_error()
{   5}                     apr_thread_yield()
{   5}                     apr_os_sock_get()
{   5}                     FD_ISSET()
{   5}                     apr_socket_accept()
{   5}                     APR_STATUS_IS_EAGAIN()
{   5}                     apr_socket_opt_set()
{   5}                     APR_STATUS_IS_ECONNRESET()
{   5}                     APR_STATUS_IS_ETIMEDOUT()
{   5}                     APR_STATUS_IS_EHOSTUNREACH()
{   5}                     APR_STATUS_IS_ENETUNREACH()
{   5}                     APR_STATUS_IS_ENETDOWN()
{   5}                     ap_create_sb_handle()
{   5}                     ap_run_create_connection()
{   5}                     ap_process_connection()
{   5}                     ap_lingering_close()
{   4}                 sprintf()
{   4}                 NXContextSetName()
{   4}                 NXThreadCreate()
{   4}                 NXContextFree()
{   4}                 apr_thread_yield()
{   2}         ap_get_server_version()
{   2}         ap_get_server_built()
{   2}         apr_proc_mutex_name()
{   2}         apr_proc_mutex_defname()
{   2}         show_server_data() <void show_server_data () at ./server/mpm/netware/mpm_netware.c:791>:
{   3}             printf()
{   3}             ap_get_server_version()
{   2}         perform_idle_server_maintenance() <void perform_idle_server_maintenance (apr_pool_t *p) at ./server/mpm/netware/mpm_netware.c:597>:
{   3}             DBPRINT2()
{   3}             ap_update_child_status_from_indexes()
{   3}             DBPRINT1()
{   3}             ap_log_error()
{   3}             DBPRINT0()
{   3}             make_child() <int make_child (server_rec *s, int slot) at ./server/mpm/netware/mpm_netware.c:523>:
{   4}                 ap_update_child_status_from_indexes()
{   4}                 NXContextAlloc()
{   4}                 worker_main() <void worker_main (void *arg) at ./server/mpm/netware/mpm_netware.c:324>:
{   5}                     stat()
{   5}                     apr_allocator_create()
{   5}                     apr_allocator_max_free_set()
{   5}                     apr_pool_create_ex()
{   5}                     apr_allocator_owner_set()
{   5}                     apr_pool_tag()
{   5}                     apr_bucket_alloc_create_ex()
{   5}                     atomic_inc()
{   5}                     apr_pool_clear()
{   5}                     DBPRINT1()
{   5}                     clean_child_exit() <void clean_child_exit (int code, int worker_num, apr_pool_t *ptrans, apr_bucket_alloc_t *bucket_alloc) at ./server/mpm/netware/mpm_netware.c:179>:
{   6}                         apr_bucket_alloc_destroy()
{   6}                         apr_pool_destroy()
{   6}                         atomic_dec()
{   6}                         ap_update_child_status_from_indexes()
{   6}                         NXThreadExit()
{   5}                     ap_update_child_status_from_indexes()
{   5}                     memcpy()
{   5}                     select()
{   5}                     ap_log_error()
{   5}                     apr_thread_yield()
{   5}                     apr_os_sock_get()
{   5}                     FD_ISSET()
{   5}                     apr_socket_accept()
{   5}                     APR_STATUS_IS_EAGAIN()
{   5}                     apr_socket_opt_set()
{   5}                     APR_STATUS_IS_ECONNRESET()
{   5}                     APR_STATUS_IS_ETIMEDOUT()
{   5}                     APR_STATUS_IS_EHOSTUNREACH()
{   5}                     APR_STATUS_IS_ENETUNREACH()
{   5}                     APR_STATUS_IS_ENETDOWN()
{   5}                     ap_create_sb_handle()
{   5}                     ap_run_create_connection()
{   5}                     ap_process_connection()
{   5}                     ap_lingering_close()
{   4}                 sprintf()
{   4}                 NXContextSetName()
{   4}                 NXThreadCreate()
{   4}                 NXContextFree()
{   4}                 apr_thread_yield()
{   2}         display_settings() <void display_settings () at ./server/mpm/netware/mpm_netware.c:712>:
{   3}             ClearScreen()
{   3}             getscreenhandle()
{   3}             printf()
{   3}             ap_get_server_version()
{   2}         apr_thread_yield()
{   2}         apr_sleep()
{   2}         printf()
{   2}         apr_socket_bind()
{   2}         apr_thread_mutex_create()
{   2}         set_signals() <void set_signals (void) at ./server/mpm/beos/beos.c:354>:
{   3}             sigemptyset()
{   3}             sig_coredump() <void sig_coredump (int sig) at ./server/mpm/beos/beos.c:215>:
{   4}                 chdir()
{   4}                 signal()
{   4}                 kill()
{   3}             sigaction()
{   3}             ap_log_error()
{   3}             sig_term() <void sig_term (int sig) at ./server/mpm/beos/beos.c:222>:
{   4}                 ap_start_shutdown() <void ap_start_shutdown (void) at ./server/mpm/beos/beos.c:180>:
{   3}             sigaddset()
{   3}             restart() <void restart (int sig) at ./server/mpm/beos/beos.c:227>:
{   4}                 ap_start_restart() <void ap_start_restart (int graceful) at ./server/mpm/beos/beos.c:194>:
{   2}         startup_threads() <void startup_threads (int number_to_start) at ./server/mpm/beos/beos.c:657>:
{   3}             make_worker() <int make_worker (int slot) at ./server/mpm/beos/beos.c:601> (R):
{   4}                 ap_update_child_status_from_indexes()
{   4}                 set_signals() <void set_signals (void) at ./server/mpm/beos/beos.c:354>:
{   5}                     sigemptyset()
{   5}                     sig_coredump() <void sig_coredump (int sig) at ./server/mpm/beos/beos.c:215>:
{   6}                         chdir()
{   6}                         signal()
{   6}                         kill()
{   5}                     sigaction()
{   5}                     ap_log_error()
{   5}                     sig_term() <void sig_term (int sig) at ./server/mpm/beos/beos.c:222>:
{   6}                         ap_start_shutdown() <void ap_start_shutdown (void) at ./server/mpm/beos/beos.c:180>:
{   5}                     sigaddset()
{   5}                     restart() <void restart (int sig) at ./server/mpm/beos/beos.c:227>:
{   6}                         ap_start_restart() <void ap_start_restart (int graceful) at ./server/mpm/beos/beos.c:194>:
{   4}                 getpid()
{   4}                 find_thread()
{   4}                 spawn_thread()
{   4}                 worker_thread() <int32 worker_thread (void *dummy) at ./server/mpm/beos/beos.c:409> (R):
{   5}                     on_exit_thread()
{   5}                     check_restart() <void check_restart (void *data) at ./server/mpm/beos/beos.c:642> (R):
{   6}                         make_worker() <int make_worker (int slot) at ./server/mpm/beos/beos.c:601> (recursive: see 652)
{   6}                         ap_log_error()
{   5}                     sigfillset()
{   5}                     sigprocmask()
{   5}                     apr_allocator_create()
{   5}                     apr_allocator_max_free_set()
{   5}                     apr_pool_create_ex()
{   5}                     apr_allocator_owner_set()
{   5}                     apr_pool_create()
{   5}                     apr_pool_tag()
{   5}                     ap_create_sb_handle()
{   5}                     ap_update_child_status()
{   5}                     apr_pollset_create()
{   5}                     apr_pollset_add()
{   5}                     apr_bucket_alloc_create()
{   5}                     apr_pool_clear()
{   5}                     clean_child_exit() <void clean_child_exit (int code, int slot) at ./server/mpm/beos/beos.c:141>:
{   6}                         ap_update_child_status_from_indexes()
{   6}                         exit_thread()
{   5}                     apr_thread_mutex_lock()
{   5}                     apr_pollset_poll()
{   5}                     APR_STATUS_IS_EINTR()
{   5}                     ap_log_error()
{   5}                     apr_thread_mutex_unlock()
{   5}                     beos_accept() <apr_status_t beos_accept (void **accepted, ap_listen_rec *lr, apr_pool_t *ptrans) at ./server/mpm/beos/beos.c:282>:
{   6}                         apr_socket_accept()
{   6}                         apr_os_sock_get()
{   6}                         APR_STATUS_IS_EINTR()
{   6}                         ap_log_error()
{   5}                     ap_run_create_connection()
{   5}                     ap_process_connection()
{   5}                     ap_lingering_close()
{   5}                     apr_pool_destroy()
{   4}                 ap_log_error()
{   4}                 sleep()
{   4}                 resume_thread()
{   2}         server_main_loop() <void server_main_loop (int remaining_threads_to_start) at ./server/mpm/beos/beos.c:729>:
{   3}             ap_wait_or_timeout() <void ap_wait_or_timeout (apr_exit_why_e *status, int *exitcode, apr_proc_t *ret, apr_pool_t *p) at ./server/mpm_common.c:318>:
{   4}                 ap_run_monitor()
{   4}                 apr_proc_wait_all_procs()
{   4}                 APR_STATUS_IS_EINTR()
{   4}                 APR_STATUS_IS_CHILD_DONE()
{   4}                 reap_children() <int reap_children (int *exitcode, apr_exit_why_e *status) at ./server/mpm/prefork/prefork.c:304>:
{   5}                     kill()
{   5}                     ap_update_child_status_from_indexes()
{   4}                 apr_sleep()
{   3}             ap_process_child_status() <int ap_process_child_status (apr_proc_t *pid, apr_exit_why_e why, int status) at ./server/mpm_common.c:352>:
{   4}                 apr_signal_description_get()
{   4}                 APR_PROC_CHECK_EXIT()
{   4}                 ap_log_error()
{   4}                 APR_PROC_CHECK_SIGNALED()
{   4}                 APR_PROC_CHECK_CORE_DUMP()
{   3}             ap_update_child_status_from_indexes()
{   3}             make_worker() <int make_worker (int slot) at ./server/mpm/beos/beos.c:601> (R):
{   4}                 ap_update_child_status_from_indexes()
{   4}                 set_signals() <void set_signals (void) at ./server/mpm/beos/beos.c:354>:
{   5}                     sigemptyset()
{   5}                     sig_coredump() <void sig_coredump (int sig) at ./server/mpm/beos/beos.c:215>:
{   6}                         chdir()
{   6}                         signal()
{   6}                         kill()
{   5}                     sigaction()
{   5}                     ap_log_error()
{   5}                     sig_term() <void sig_term (int sig) at ./server/mpm/beos/beos.c:222>:
{   6}                         ap_start_shutdown() <void ap_start_shutdown (void) at ./server/mpm/beos/beos.c:180>:
{   5}                     sigaddset()
{   5}                     restart() <void restart (int sig) at ./server/mpm/beos/beos.c:227>:
{   6}                         ap_start_restart() <void ap_start_restart (int graceful) at ./server/mpm/beos/beos.c:194>:
{   4}                 getpid()
{   4}                 find_thread()
{   4}                 spawn_thread()
{   4}                 worker_thread() <int32 worker_thread (void *dummy) at ./server/mpm/beos/beos.c:409> (R):
{   5}                     on_exit_thread()
{   5}                     check_restart() <void check_restart (void *data) at ./server/mpm/beos/beos.c:642> (R):
{   6}                         make_worker() <int make_worker (int slot) at ./server/mpm/beos/beos.c:601> (recursive: see 726)
{   6}                         ap_log_error()
{   5}                     sigfillset()
{   5}                     sigprocmask()
{   5}                     apr_allocator_create()
{   5}                     apr_allocator_max_free_set()
{   5}                     apr_pool_create_ex()
{   5}                     apr_allocator_owner_set()
{   5}                     apr_pool_create()
{   5}                     apr_pool_tag()
{   5}                     ap_create_sb_handle()
{   5}                     ap_update_child_status()
{   5}                     apr_pollset_create()
{   5}                     apr_pollset_add()
{   5}                     apr_bucket_alloc_create()
{   5}                     apr_pool_clear()
{   5}                     clean_child_exit() <void clean_child_exit (int code, int slot) at ./server/mpm/beos/beos.c:141>:
{   6}                         ap_update_child_status_from_indexes()
{   6}                         exit_thread()
{   5}                     apr_thread_mutex_lock()
{   5}                     apr_pollset_poll()
{   5}                     APR_STATUS_IS_EINTR()
{   5}                     ap_log_error()
{   5}                     apr_thread_mutex_unlock()
{   5}                     beos_accept() <apr_status_t beos_accept (void **accepted, ap_listen_rec *lr, apr_pool_t *ptrans) at ./server/mpm/beos/beos.c:282>:
{   6}                         apr_socket_accept()
{   6}                         apr_os_sock_get()
{   6}                         APR_STATUS_IS_EINTR()
{   6}                         ap_log_error()
{   5}                     ap_run_create_connection()
{   5}                     ap_process_connection()
{   5}                     ap_lingering_close()
{   5}                     apr_pool_destroy()
{   4}                 ap_log_error()
{   4}                 sleep()
{   4}                 resume_thread()
{   3}             ap_log_error()
{   3}             startup_threads() <void startup_threads (int number_to_start) at ./server/mpm/beos/beos.c:657>:
{   4}                 make_worker() <int make_worker (int slot) at ./server/mpm/beos/beos.c:601> (R):
{   5}                     ap_update_child_status_from_indexes()
{   5}                     set_signals() <void set_signals (void) at ./server/mpm/beos/beos.c:354>:
{   6}                         sigemptyset()
{   6}                         sig_coredump() <void sig_coredump (int sig) at ./server/mpm/beos/beos.c:215>:
{   7}                             chdir()
{   7}                             signal()
{   7}                             kill()
{   6}                         sigaction()
{   6}                         ap_log_error()
{   6}                         sig_term() <void sig_term (int sig) at ./server/mpm/beos/beos.c:222>:
{   7}                             ap_start_shutdown() <void ap_start_shutdown (void) at ./server/mpm/beos/beos.c:180>:
{   6}                         sigaddset()
{   6}                         restart() <void restart (int sig) at ./server/mpm/beos/beos.c:227>:
{   7}                             ap_start_restart() <void ap_start_restart (int graceful) at ./server/mpm/beos/beos.c:194>:
{   5}                     getpid()
{   5}                     find_thread()
{   5}                     spawn_thread()
{   5}                     worker_thread() <int32 worker_thread (void *dummy) at ./server/mpm/beos/beos.c:409> (R):
{   6}                         on_exit_thread()
{   6}                         check_restart() <void check_restart (void *data) at ./server/mpm/beos/beos.c:642> (R):
{   7}                             make_worker() <int make_worker (int slot) at ./server/mpm/beos/beos.c:601> (recursive: see 785)
{   7}                             ap_log_error()
{   6}                         sigfillset()
{   6}                         sigprocmask()
{   6}                         apr_allocator_create()
{   6}                         apr_allocator_max_free_set()
{   6}                         apr_pool_create_ex()
{   6}                         apr_allocator_owner_set()
{   6}                         apr_pool_create()
{   6}                         apr_pool_tag()
{   6}                         ap_create_sb_handle()
{   6}                         ap_update_child_status()
{   6}                         apr_pollset_create()
{   6}                         apr_pollset_add()
{   6}                         apr_bucket_alloc_create()
{   6}                         apr_pool_clear()
{   6}                         clean_child_exit() <void clean_child_exit (int code, int slot) at ./server/mpm/beos/beos.c:141>:
{   7}                             ap_update_child_status_from_indexes()
{   7}                             exit_thread()
{   6}                         apr_thread_mutex_lock()
{   6}                         apr_pollset_poll()
{   6}                         APR_STATUS_IS_EINTR()
{   6}                         ap_log_error()
{   6}                         apr_thread_mutex_unlock()
{   6}                         beos_accept() <apr_status_t beos_accept (void **accepted, ap_listen_rec *lr, apr_pool_t *ptrans) at ./server/mpm/beos/beos.c:282>:
{   7}                             apr_socket_accept()
{   7}                             apr_os_sock_get()
{   7}                             APR_STATUS_IS_EINTR()
{   7}                             ap_log_error()
{   6}                         ap_run_create_connection()
{   6}                         ap_process_connection()
{   6}                         ap_lingering_close()
{   6}                         apr_pool_destroy()
{   5}                     ap_log_error()
{   5}                     sleep()
{   5}                     resume_thread()
{   3}             perform_idle_server_maintenance() <void perform_idle_server_maintenance (void) at ./server/mpm/beos/beos.c:685>:
{   4}                 make_worker() <int make_worker (int slot) at ./server/mpm/beos/beos.c:601> (R):
{   5}                     ap_update_child_status_from_indexes()
{   5}                     set_signals() <void set_signals (void) at ./server/mpm/beos/beos.c:354>:
{   6}                         sigemptyset()
{   6}                         sig_coredump() <void sig_coredump (int sig) at ./server/mpm/beos/beos.c:215>:
{   7}                             chdir()
{   7}                             signal()
{   7}                             kill()
{   6}                         sigaction()
{   6}                         ap_log_error()
{   6}                         sig_term() <void sig_term (int sig) at ./server/mpm/beos/beos.c:222>:
{   7}                             ap_start_shutdown() <void ap_start_shutdown (void) at ./server/mpm/beos/beos.c:180>:
{   6}                         sigaddset()
{   6}                         restart() <void restart (int sig) at ./server/mpm/beos/beos.c:227>:
{   7}                             ap_start_restart() <void ap_start_restart (int graceful) at ./server/mpm/beos/beos.c:194>:
{   5}                     getpid()
{   5}                     find_thread()
{   5}                     spawn_thread()
{   5}                     worker_thread() <int32 worker_thread (void *dummy) at ./server/mpm/beos/beos.c:409> (R):
{   6}                         on_exit_thread()
{   6}                         check_restart() <void check_restart (void *data) at ./server/mpm/beos/beos.c:642> (R):
{   7}                             make_worker() <int make_worker (int slot) at ./server/mpm/beos/beos.c:601> (recursive: see 843)
{   7}                             ap_log_error()
{   6}                         sigfillset()
{   6}                         sigprocmask()
{   6}                         apr_allocator_create()
{   6}                         apr_allocator_max_free_set()
{   6}                         apr_pool_create_ex()
{   6}                         apr_allocator_owner_set()
{   6}                         apr_pool_create()
{   6}                         apr_pool_tag()
{   6}                         ap_create_sb_handle()
{   6}                         ap_update_child_status()
{   6}                         apr_pollset_create()
{   6}                         apr_pollset_add()
{   6}                         apr_bucket_alloc_create()
{   6}                         apr_pool_clear()
{   6}                         clean_child_exit() <void clean_child_exit (int code, int slot) at ./server/mpm/beos/beos.c:141>:
{   7}                             ap_update_child_status_from_indexes()
{   7}                             exit_thread()
{   6}                         apr_thread_mutex_lock()
{   6}                         apr_pollset_poll()
{   6}                         APR_STATUS_IS_EINTR()
{   6}                         ap_log_error()
{   6}                         apr_thread_mutex_unlock()
{   6}                         beos_accept() <apr_status_t beos_accept (void **accepted, ap_listen_rec *lr, apr_pool_t *ptrans) at ./server/mpm/beos/beos.c:282>:
{   7}                             apr_socket_accept()
{   7}                             apr_os_sock_get()
{   7}                             APR_STATUS_IS_EINTR()
{   7}                             ap_log_error()
{   6}                         ap_run_create_connection()
{   6}                         ap_process_connection()
{   6}                         ap_lingering_close()
{   6}                         apr_pool_destroy()
{   5}                     ap_log_error()
{   5}                     sleep()
{   5}                     resume_thread()
{   2}         tell_workers_to_exit() <void tell_workers_to_exit (void) at ./server/mpm/beos/beos.c:343>:
{   3}             apr_socket_sendto()
{   2}         snooze()
{   2}         worker_thread() <int32 worker_thread (void *dummy) at ./server/mpm/beos/beos.c:409> (R):
{   3}             on_exit_thread()
{   3}             check_restart() <void check_restart (void *data) at ./server/mpm/beos/beos.c:642> (R):
{   4}                 make_worker() <int make_worker (int slot) at ./server/mpm/beos/beos.c:601> (R):
{   5}                     ap_update_child_status_from_indexes()
{   5}                     set_signals() <void set_signals (void) at ./server/mpm/beos/beos.c:354>:
{   6}                         sigemptyset()
{   6}                         sig_coredump() <void sig_coredump (int sig) at ./server/mpm/beos/beos.c:215>:
{   7}                             chdir()
{   7}                             signal()
{   7}                             kill()
{   6}                         sigaction()
{   6}                         ap_log_error()
{   6}                         sig_term() <void sig_term (int sig) at ./server/mpm/beos/beos.c:222>:
{   7}                             ap_start_shutdown() <void ap_start_shutdown (void) at ./server/mpm/beos/beos.c:180>:
{   6}                         sigaddset()
{   6}                         restart() <void restart (int sig) at ./server/mpm/beos/beos.c:227>:
{   7}                             ap_start_restart() <void ap_start_restart (int graceful) at ./server/mpm/beos/beos.c:194>:
{   5}                     getpid()
{   5}                     find_thread()
{   5}                     spawn_thread()
{   5}                     worker_thread() <int32 worker_thread (void *dummy) at ./server/mpm/beos/beos.c:409> (recursive: see 903)
{   5}                     ap_log_error()
{   5}                     sleep()
{   5}                     resume_thread()
{   4}                 ap_log_error()
{   3}             sigfillset()
{   3}             sigprocmask()
{   3}             apr_allocator_create()
{   3}             apr_allocator_max_free_set()
{   3}             apr_pool_create_ex()
{   3}             apr_allocator_owner_set()
{   3}             apr_pool_create()
{   3}             apr_pool_tag()
{   3}             ap_create_sb_handle()
{   3}             ap_update_child_status()
{   3}             apr_pollset_create()
{   3}             apr_pollset_add()
{   3}             apr_bucket_alloc_create()
{   3}             apr_pool_clear()
{   3}             clean_child_exit() <void clean_child_exit (int code, int slot) at ./server/mpm/beos/beos.c:141>:
{   4}                 ap_update_child_status_from_indexes()
{   4}                 exit_thread()
{   3}             apr_thread_mutex_lock()
{   3}             apr_pollset_poll()
{   3}             APR_STATUS_IS_EINTR()
{   3}             ap_log_error()
{   3}             apr_thread_mutex_unlock()
{   3}             beos_accept() <apr_status_t beos_accept (void **accepted, ap_listen_rec *lr, apr_pool_t *ptrans) at ./server/mpm/beos/beos.c:282>:
{   4}                 apr_socket_accept()
{   4}                 apr_os_sock_get()
{   4}                 APR_STATUS_IS_EINTR()
{   4}                 ap_log_error()
{   3}             ap_run_create_connection()
{   3}             ap_process_connection()
{   3}             ap_lingering_close()
{   3}             apr_pool_destroy()
{   2}         apr_socket_close()
{   2}         unlink()
{   2}         beosd_killpg()
{   2}         getpgrp()
{   2}         ap_reclaim_child_processes() <void ap_reclaim_child_processes (int terminate) at ./server/mpm_common.c:188>:
{   3}             apr_time_now()
{   3}             apr_time_from_sec()
{   3}             ap_mpm_query()
{   3}             apr_sleep()
{   3}             MPM_CHILD_PID()
{   3}             reclaim_one_pid() <int reclaim_one_pid (pid_t pid, action_t action) at ./server/mpm_common.c:124>:
{   4}                 apr_proc_wait()
{   4}                 ap_log_error()
{   4}                 kill()
{   4}                 kill_thread()
{   3}             MPM_NOTE_CHILD_KILLED()
{   3}             AP_DEBUG_ASSERT()
{   3}             ap_unregister_extra_mpm_process() <int ap_unregister_extra_mpm_process (pid_t pid) at ./server/mpm_common.c:98>:
{   4}                 free()
{   3}             apr_proc_other_child_refresh_all()
{   2}         signal()
{   2}         apr_thread_mutex_destroy()
{   2}         apr_proc_mutex_create()
{   2}         unixd_set_proc_mutex_perms()
{   2}         set_signals() <void set_signals (void) at ./server/mpm/worker/worker.c:413>:
{   3}             ap_fatal_signal_setup() <apr_status_t ap_fatal_signal_setup (server_rec *s, apr_pool_t *in_pconf) at ./server/mpm_common.c:1186>:
{   4}                 sigemptyset()
{   4}                 sig_coredump() <void sig_coredump (int sig) at ./server/mpm_common.c:1145>:
{   5}                     apr_filepath_set()
{   5}                     apr_signal()
{   5}                     run_fatal_exception_hook() <void run_fatal_exception_hook (int sig) at ./server/mpm_common.c:1130>:
{   6}                         geteuid()
{   6}                         ap_run_fatal_exception()
{   5}                     getpid()
{   5}                     ap_log_error()
{   5}                     kill()
{   4}                 sigaction()
{   4}                 ap_log_error()
{   4}                 apr_signal()
{   4}                 getpid()
{   3}             sigemptyset()
{   3}             sig_term() <void sig_term (int sig) at ./server/mpm/worker/worker.c:403>:
{   4}                 ap_start_shutdown() <void ap_start_shutdown (int graceful) at ./server/mpm/worker/worker.c:377>:
{   3}             sigaction()
{   3}             ap_log_error()
{   3}             sigaddset()
{   3}             restart() <void restart (int sig) at ./server/mpm/worker/worker.c:408>:
{   4}                 ap_start_restart() <void ap_start_restart (int graceful) at ./server/mpm/worker/worker.c:392>:
{   3}             apr_signal()
{   2}         startup_children() <void startup_children (int number_to_start) at ./server/mpm/worker/worker.c:1342>:
{   3}             make_child() <int make_child (server_rec *s, int slot) at ./server/mpm/worker/worker.c:1270>:
{   4}                 set_signals() <void set_signals (void) at ./server/mpm/worker/worker.c:413>:
{   5}                     ap_fatal_signal_setup() <apr_status_t ap_fatal_signal_setup (server_rec *s, apr_pool_t *in_pconf) at ./server/mpm_common.c:1186>:
{   6}                         sigemptyset()
{   6}                         sig_coredump() <void sig_coredump (int sig) at ./server/mpm_common.c:1145>:
{   7}                             apr_filepath_set()
{   7}                             apr_signal()
{   7}                             run_fatal_exception_hook() <void run_fatal_exception_hook (int sig) at ./server/mpm_common.c:1130>:
{   8}                                 geteuid()
{   8}                                 ap_run_fatal_exception()
{   7}                             getpid()
{   7}                             ap_log_error()
{   7}                             kill()
{   6}                         sigaction()
{   6}                         ap_log_error()
{   6}                         apr_signal()
{   6}                         getpid()
{   5}                     sigemptyset()
{   5}                     sig_term() <void sig_term (int sig) at ./server/mpm/worker/worker.c:403>:
{   6}                         ap_start_shutdown() <void ap_start_shutdown (int graceful) at ./server/mpm/worker/worker.c:377>:
{   5}                     sigaction()
{   5}                     ap_log_error()
{   5}                     sigaddset()
{   5}                     restart() <void restart (int sig) at ./server/mpm/worker/worker.c:408>:
{   6}                         ap_start_restart() <void ap_start_restart (int graceful) at ./server/mpm/worker/worker.c:392>:
{   5}                     apr_signal()
{   4}                 getpid()
{   4}                 child_main() <void child_main (int child_num_arg) at ./server/mpm/worker/worker.c:1106>:
{   5}                     getpid()
{   5}                     ap_fatal_signal_child_setup() <apr_status_t ap_fatal_signal_child_setup (server_rec *s) at ./server/mpm_common.c:1180>:
{   6}                         getpid()
{   5}                     apr_pool_create()
{   5}                     ap_reopen_scoreboard() <apr_status_t ap_reopen_scoreboard (apr_pool_t *p, apr_shm_t **shm, int detached) at ./server/scoreboard.c:227>:
{   6}                         apr_shm_size_get()
{   6}                         ap_log_error()
{   6}                         apr_shm_detach()
{   5}                     SAFE_ACCEPT()
{   5}                     apr_proc_mutex_child_init()
{   5}                     ap_log_error()
{   5}                     clean_child_exit():
{   6}                         apr_pool_destroy()
{   6}                         exit()
{   5}                     unixd_setup_child()
{   5}                     ap_run_child_init()
{   5}                     apr_setup_signal_thread()
{   5}                     calloc()
{   5}                     apr_palloc()
{   5}                     apr_threadattr_create()
{   5}                     apr_threadattr_detach_set()
{   5}                     apr_threadattr_stacksize_set()
{   5}                     apr_thread_create()
{   5}                     start_threads() <void *APR_THREAD_FUNC start_threads (apr_thread_t *thd, void *dummy) at ./server/mpm/worker/worker.c:927>:
{   6}                         apr_pcalloc()
{   6}                         ap_queue_init() <apr_status_t ap_queue_init (fd_queue_t *queue, int queue_capacity, apr_pool_t *a) at ./server/mpm/experimental/event/fdqueue.c:281>:
{   7}                             apr_thread_mutex_create()
{   7}                             apr_thread_cond_create()
{   7}                             apr_palloc()
{   7}                             apr_pool_cleanup_register()
{   7}                             ap_queue_destroy() <apr_status_t ap_queue_destroy (void *data) at ./server/mpm/worker/fdqueue.c:236>:
{   8}                                 apr_thread_cond_destroy()
{   8}                                 apr_thread_mutex_destroy()
{   7}                             ap_queue_destroy() <apr_status_t ap_queue_destroy (void *data) at ./server/mpm/experimental/event/fdqueue.c:265>:
{   8}                                 apr_thread_cond_destroy()
{   8}                                 apr_thread_mutex_destroy()
{   6}                         ap_log_error()
{   6}                         clean_child_exit():
{   7}                             apr_pool_destroy()
{   7}                             exit()
{   6}                         ap_queue_info_create() <apr_status_t ap_queue_info_create (fd_queue_info_t **queue_info, apr_pool_t *pool, int max_idlers) at ./server/mpm/experimental/event/fdqueue.c:62>:
{   7}                             apr_palloc()
{   7}                             memset()
{   7}                             apr_thread_mutex_create()
{   7}                             apr_thread_cond_create()
{   7}                             apr_pool_cleanup_register()
{   7}                             queue_info_cleanup() <apr_status_t queue_info_cleanup (void *data_) at ./server/mpm/worker/fdqueue.c:34>:
{   8}                                 apr_thread_cond_destroy()
{   8}                                 apr_thread_mutex_destroy()
{   8}                                 apr_atomic_casptr()
{   8}                                 apr_pool_destroy()
{   7}                             queue_info_cleanup() <apr_status_t queue_info_cleanup (void *data_) at ./server/mpm/experimental/event/fdqueue.c:40>:
{   8}                                 apr_thread_cond_destroy()
{   8}                                 apr_thread_mutex_destroy()
{   8}                                 apr_atomic_casptr()
{   8}                                 apr_pool_destroy()
{   6}                         malloc()
{   6}                         ap_update_child_status_from_indexes()
{   6}                         apr_thread_create()
{   6}                         worker_thread() <void *APR_THREAD_FUNC worker_thread (apr_thread_t *thd, void *dummy) at ./server/mpm/worker/worker.c:806>:
{   7}                             free()
{   7}                             ap_update_child_status_from_indexes()
{   7}                             ap_queue_info_set_idle() <apr_status_t ap_queue_info_set_idle (fd_queue_info_t *queue_info, apr_pool_t *pool_to_recycle) at ./server/mpm/experimental/event/fdqueue.c:90>:
{   8}                                 apr_palloc()
{   8}                                 apr_atomic_casptr()
{   8}                                 apr_atomic_cas32()
{   8}                                 apr_thread_mutex_lock()
{   8}                                 apr_thread_cond_signal()
{   8}                                 apr_thread_mutex_unlock()
{   8}                                 ap_push_pool() <void ap_push_pool (fd_queue_info_t *queue_info, apr_pool_t *pool_to_recycle) at ./server/mpm/experimental/event/fdqueue.c:185>:
{   9}                                     apr_palloc()
{   9}                                     apr_atomic_casptr()
{   8}                                 apr_atomic_inc32()
{   8}                                 AP_DEBUG_ASSERT()
{   7}                             ap_log_error()
{   7}                             signal_threads() <void signal_threads (int mode) at ./server/mpm/worker/worker.c:260>:
{   8}                                 wakeup_listener() <void wakeup_listener (void) at ./server/mpm/worker/worker.c:231>:
{   9}                                     pthread_kill()
{   9}                                     kill()
{   8}                                 ap_queue_interrupt_all() <apr_status_t ap_queue_interrupt_all (fd_queue_t *queue) at ./server/mpm/experimental/event/fdqueue.c:393>:
{   9}                                     apr_thread_mutex_lock()
{   9}                                     apr_thread_cond_broadcast()
{   9}                                     apr_thread_mutex_unlock()
{   8}                                 ap_queue_info_term() <apr_status_t ap_queue_info_term (fd_queue_info_t *queue_info) at ./server/mpm/experimental/event/fdqueue.c:237>:
{   9}                                     apr_thread_mutex_lock()
{   9}                                     apr_thread_cond_broadcast()
{   9}                                     apr_thread_mutex_unlock()
{   8}                                 close_worker_sockets() <void close_worker_sockets (void) at ./server/mpm/worker/worker.c:220>:
{   9}                                     apr_socket_close()
{   7}                             ap_queue_pop() <apr_status_t ap_queue_pop (fd_queue_t *queue, apr_socket_t **sd, conn_state_t **cs, apr_pool_t **p) at ./server/mpm/experimental/event/fdqueue.c:350>:
{   8}                                 apr_thread_mutex_lock()
{   8}                                 ap_queue_empty()
{   8}                                 apr_thread_cond_wait()
{   8}                                 apr_thread_mutex_unlock()
{   7}                             APR_STATUS_IS_EOF()
{   7}                             APR_STATUS_IS_EINTR()
{   7}                             apr_bucket_alloc_create()
{   7}                             process_socket() <void process_socket (apr_pool_t *p, apr_socket_t *sock, int my_child_num, int my_thread_num, apr_bucket_alloc_t *bucket_alloc) at ./server/mpm/worker/worker.c:517>:
{   8}                                 ID_FROM_CHILD_THREAD()
{   8}                                 ap_create_sb_handle()
{   8}                                 apr_os_sock_get()
{   8}                                 ap_run_create_connection()
{   8}                                 ap_process_connection()
{   8}                                 ap_lingering_close()
{   7}                             apr_pool_clear()
{   7}                             apr_thread_exit()
{   6}                         create_listener_thread() <void create_listener_thread (thread_starter *ts) at ./server/mpm/worker/worker.c:900>:
{   7}                             malloc()
{   7}                             apr_thread_create()
{   7}                             listener_thread() <void *listener_thread (apr_thread_t *thd, void *dummy) at ./server/mpm/worker/worker.c:580>:
{   8}                                 apr_thread_pool_get()
{   8}                                 free()
{   8}                                 apr_pollset_create()
{   8}                                 apr_pollset_add()
{   8}                                 unblock_signal() <void unblock_signal (int sig) at ./server/mpm/worker/worker.c:560>:
{   9}                                     sigemptyset()
{   9}                                     sigaddset()
{   9}                                     sigprocmask()
{   9}                                     pthread_sigmask()
{   8}                                 apr_signal()
{   8}                                 dummy_signal_handler() <void dummy_signal_handler (int sig) at ./server/mpm/worker/worker.c:573>
{   8}                                 check_infinite_requests() <void check_infinite_requests (void) at ./server/mpm/worker/worker.c:539>:
{   9}                                     signal_threads() <void signal_threads (int mode) at ./server/mpm/worker/worker.c:260>:
{  10}                                         wakeup_listener() <void wakeup_listener (void) at ./server/mpm/worker/worker.c:231>:
{  11}                                             pthread_kill()
{  11}                                             kill()
{  10}                                         ap_queue_interrupt_all() <apr_status_t ap_queue_interrupt_all (fd_queue_t *queue) at ./server/mpm/experimental/event/fdqueue.c:393>:
{  11}                                             apr_thread_mutex_lock()
{  11}                                             apr_thread_cond_broadcast()
{  11}                                             apr_thread_mutex_unlock()
{  10}                                         ap_queue_info_term() <apr_status_t ap_queue_info_term (fd_queue_info_t *queue_info) at ./server/mpm/experimental/event/fdqueue.c:237>:
{  11}                                             apr_thread_mutex_lock()
{  11}                                             apr_thread_cond_broadcast()
{  11}                                             apr_thread_mutex_unlock()
{  10}                                         close_worker_sockets() <void close_worker_sockets (void) at ./server/mpm/worker/worker.c:220>:
{  11}                                             apr_socket_close()
{   8}                                 ap_queue_info_wait_for_idler() <apr_status_t ap_queue_info_wait_for_idler (fd_queue_info_t *queue_info) at ./server/mpm/experimental/event/fdqueue.c:122>:
{   9}                                     apr_thread_mutex_lock()
{   9}                                     apr_thread_cond_wait()
{   9}                                     apr_thread_mutex_unlock()
{   9}                                     apr_atomic_dec32()
{   9}                                     apr_atomic_casptr()
{   9}                                     apr_atomic_add32()
{   9}                                     AP_DEBUG_ASSERT()
{   9}                                     apr_atomic_inc32()
{   8}                                 APR_STATUS_IS_EOF()
{   8}                                 ap_log_error()
{   8}                                 signal_threads() <void signal_threads (int mode) at ./server/mpm/worker/worker.c:260>:
{   9}                                     wakeup_listener() <void wakeup_listener (void) at ./server/mpm/worker/worker.c:231>:
{  10}                                         pthread_kill()
{  10}                                         kill()
{   9}                                     ap_queue_interrupt_all() <apr_status_t ap_queue_interrupt_all (fd_queue_t *queue) at ./server/mpm/experimental/event/fdqueue.c:393>:
{  10}                                         apr_thread_mutex_lock()
{  10}                                         apr_thread_cond_broadcast()
{  10}                                         apr_thread_mutex_unlock()
{   9}                                     ap_queue_info_term() <apr_status_t ap_queue_info_term (fd_queue_info_t *queue_info) at ./server/mpm/experimental/event/fdqueue.c:237>:
{  10}                                         apr_thread_mutex_lock()
{  10}                                         apr_thread_cond_broadcast()
{  10}                                         apr_thread_mutex_unlock()
{   9}                                     close_worker_sockets() <void close_worker_sockets (void) at ./server/mpm/worker/worker.c:220>:
{  10}                                         apr_socket_close()
{   8}                                 SAFE_ACCEPT()
{   8}                                 apr_proc_mutex_lock()
{   8}                                 apr_pollset_poll()
{   8}                                 APR_STATUS_IS_EINTR()
{   8}                                 apr_allocator_create()
{   8}                                 apr_allocator_max_free_set()
{   8}                                 apr_pool_create_ex()
{   8}                                 apr_allocator_owner_set()
{   8}                                 apr_pool_tag()
{   8}                                 AP_DEBUG_ASSERT()
{   8}                                 apr_proc_mutex_unlock()
{   8}                                 ap_queue_push() <apr_status_t ap_queue_push (fd_queue_t *queue, apr_socket_t *sd, conn_state_t *cs, apr_pool_t *p) at ./server/mpm/experimental/event/fdqueue.c:316>:
{   9}                                     apr_thread_mutex_lock()
{   9}                                     AP_DEBUG_ASSERT()
{   9}                                     ap_queue_full()
{   9}                                     apr_thread_cond_signal()
{   9}                                     apr_thread_mutex_unlock()
{   8}                                 apr_socket_close()
{   8}                                 ap_close_listeners()
{   8}                                 ap_queue_term() <apr_status_t ap_queue_term (fd_queue_t *queue) at ./server/mpm/experimental/event/fdqueue.c:404>:
{   9}                                     apr_thread_mutex_lock()
{   9}                                     apr_thread_mutex_unlock()
{   9}                                     ap_queue_interrupt_all() <apr_status_t ap_queue_interrupt_all (fd_queue_t *queue) at ./server/mpm/experimental/event/fdqueue.c:393>:
{  10}                                         apr_thread_mutex_lock()
{  10}                                         apr_thread_cond_broadcast()
{  10}                                         apr_thread_mutex_unlock()
{   8}                                 kill()
{   8}                                 apr_thread_exit()
{   7}                             ap_log_error()
{   7}                             clean_child_exit():
{   8}                                 apr_pool_destroy()
{   8}                                 exit()
{   7}                             apr_os_thread_get()
{   6}                         apr_sleep()
{   6}                         apr_time_from_sec()
{   6}                         apr_thread_exit()
{   5}                     apr_signal_thread()
{   5}                     check_signal() <int check_signal (int signum) at ./server/mpm/worker/worker.c:890>:
{   5}                     join_start_thread() <void join_start_thread (apr_thread_t *start_thread_id) at ./server/mpm/worker/worker.c:1090>:
{   6}                         apr_thread_join()
{   6}                         ap_log_error()
{   5}                     signal_threads() <void signal_threads (int mode) at ./server/mpm/worker/worker.c:260>:
{   6}                         wakeup_listener() <void wakeup_listener (void) at ./server/mpm/worker/worker.c:231>:
{   7}                             pthread_kill()
{   7}                             kill()
{   6}                         ap_queue_interrupt_all() <apr_status_t ap_queue_interrupt_all (fd_queue_t *queue) at ./server/mpm/experimental/event/fdqueue.c:393>:
{   7}                             apr_thread_mutex_lock()
{   7}                             apr_thread_cond_broadcast()
{   7}                             apr_thread_mutex_unlock()
{   6}                         ap_queue_info_term() <apr_status_t ap_queue_info_term (fd_queue_info_t *queue_info) at ./server/mpm/experimental/event/fdqueue.c:237>:
{   7}                             apr_thread_mutex_lock()
{   7}                             apr_thread_cond_broadcast()
{   7}                             apr_thread_mutex_unlock()
{   6}                         close_worker_sockets() <void close_worker_sockets (void) at ./server/mpm/worker/worker.c:220>:
{   7}                             apr_socket_close()
{   5}                     join_workers() <void join_workers (apr_thread_t *listener, apr_thread_t **threads) at ./server/mpm/worker/worker.c:1035>:
{   6}                         pthread_kill()
{   6}                         kill()
{   6}                         apr_sleep()
{   6}                         apr_time_make()
{   6}                         wakeup_listener() <void wakeup_listener (void) at ./server/mpm/worker/worker.c:231>:
{   7}                             pthread_kill()
{   7}                             kill()
{   6}                         ap_log_error()
{   6}                         apr_thread_join()
{   5}                     unblock_signal() <void unblock_signal (int sig) at ./server/mpm/worker/worker.c:560>:
{   6}                         sigemptyset()
{   6}                         sigaddset()
{   6}                         sigprocmask()
{   6}                         pthread_sigmask()
{   5}                     apr_signal()
{   5}                     dummy_signal_handler() <void dummy_signal_handler (int sig) at ./server/mpm/worker/worker.c:573>
{   5}                     ap_mpm_pod_check()
{   5}                     free()
{   4}                 fork()
{   4}                 ap_log_error()
{   4}                 ap_update_child_status_from_indexes()
{   4}                 apr_sleep()
{   4}                 apr_time_from_sec()
{   4}                 bindprocessor()
{   4}                 RAISE_SIGSTOP()
{   4}                 apr_signal()
{   4}                 just_die() <void just_die (int sig) at ./server/mpm/worker/worker.c:342>:
{   5}                     clean_child_exit():
{   6}                         apr_pool_destroy()
{   6}                         exit()
{   4}                 clean_child_exit():
{   5}                     apr_pool_destroy()
{   5}                     exit()
{   4}                 ap_register_extra_mpm_process() <void ap_register_extra_mpm_process (pid_t pid) at ./server/mpm_common.c:89>:
{   5}                     malloc()
{   2}         server_main_loop() <void server_main_loop (int remaining_children_to_start) at ./server/mpm/worker/worker.c:1536>:
{   3}             ap_wait_or_timeout() <void ap_wait_or_timeout (apr_exit_why_e *status, int *exitcode, apr_proc_t *ret, apr_pool_t *p) at ./server/mpm_common.c:318>:
{   4}                 ap_run_monitor()
{   4}                 apr_proc_wait_all_procs()
{   4}                 APR_STATUS_IS_EINTR()
{   4}                 APR_STATUS_IS_CHILD_DONE()
{   4}                 reap_children() <int reap_children (int *exitcode, apr_exit_why_e *status) at ./server/mpm/prefork/prefork.c:304>:
{   5}                     kill()
{   5}                     ap_update_child_status_from_indexes()
{   4}                 apr_sleep()
{   3}             ap_process_child_status() <int ap_process_child_status (apr_proc_t *pid, apr_exit_why_e why, int status) at ./server/mpm_common.c:352>:
{   4}                 apr_signal_description_get()
{   4}                 APR_PROC_CHECK_EXIT()
{   4}                 ap_log_error()
{   4}                 APR_PROC_CHECK_SIGNALED()
{   4}                 APR_PROC_CHECK_CORE_DUMP()
{   3}             find_child_by_pid() <int find_child_by_pid (apr_proc_t *pid) at ./server/scoreboard.c:359>:
{   4}                 ap_mpm_query()
{   3}             ap_update_child_status_from_indexes()
{   3}             make_child() <int make_child (server_rec *s, int slot) at ./server/mpm/worker/worker.c:1270>:
{   4}                 set_signals() <void set_signals (void) at ./server/mpm/worker/worker.c:413>:
{   5}                     ap_fatal_signal_setup() <apr_status_t ap_fatal_signal_setup (server_rec *s, apr_pool_t *in_pconf) at ./server/mpm_common.c:1186>:
{   6}                         sigemptyset()
{   6}                         sig_coredump() <void sig_coredump (int sig) at ./server/mpm_common.c:1145>:
{   7}                             apr_filepath_set()
{   7}                             apr_signal()
{   7}                             run_fatal_exception_hook() <void run_fatal_exception_hook (int sig) at ./server/mpm_common.c:1130>:
{   8}                                 geteuid()
{   8}                                 ap_run_fatal_exception()
{   7}                             getpid()
{   7}                             ap_log_error()
{   7}                             kill()
{   6}                         sigaction()
{   6}                         ap_log_error()
{   6}                         apr_signal()
{   6}                         getpid()
{   5}                     sigemptyset()
{   5}                     sig_term() <void sig_term (int sig) at ./server/mpm/worker/worker.c:403>:
{   6}                         ap_start_shutdown() <void ap_start_shutdown (int graceful) at ./server/mpm/worker/worker.c:377>:
{   5}                     sigaction()
{   5}                     ap_log_error()
{   5}                     sigaddset()
{   5}                     restart() <void restart (int sig) at ./server/mpm/worker/worker.c:408>:
{   6}                         ap_start_restart() <void ap_start_restart (int graceful) at ./server/mpm/worker/worker.c:392>:
{   5}                     apr_signal()
{   4}                 getpid()
{   4}                 child_main() <void child_main (int child_num_arg) at ./server/mpm/worker/worker.c:1106>:
{   5}                     getpid()
{   5}                     ap_fatal_signal_child_setup() <apr_status_t ap_fatal_signal_child_setup (server_rec *s) at ./server/mpm_common.c:1180>:
{   6}                         getpid()
{   5}                     apr_pool_create()
{   5}                     ap_reopen_scoreboard() <apr_status_t ap_reopen_scoreboard (apr_pool_t *p, apr_shm_t **shm, int detached) at ./server/scoreboard.c:227>:
{   6}                         apr_shm_size_get()
{   6}                         ap_log_error()
{   6}                         apr_shm_detach()
{   5}                     SAFE_ACCEPT()
{   5}                     apr_proc_mutex_child_init()
{   5}                     ap_log_error()
{   5}                     clean_child_exit():
{   6}                         apr_pool_destroy()
{   6}                         exit()
{   5}                     unixd_setup_child()
{   5}                     ap_run_child_init()
{   5}                     apr_setup_signal_thread()
{   5}                     calloc()
{   5}                     apr_palloc()
{   5}                     apr_threadattr_create()
{   5}                     apr_threadattr_detach_set()
{   5}                     apr_threadattr_stacksize_set()
{   5}                     apr_thread_create()
{   5}                     start_threads() <void *APR_THREAD_FUNC start_threads (apr_thread_t *thd, void *dummy) at ./server/mpm/worker/worker.c:927>:
{   6}                         apr_pcalloc()
{   6}                         ap_queue_init() <apr_status_t ap_queue_init (fd_queue_t *queue, int queue_capacity, apr_pool_t *a) at ./server/mpm/experimental/event/fdqueue.c:281>:
{   7}                             apr_thread_mutex_create()
{   7}                             apr_thread_cond_create()
{   7}                             apr_palloc()
{   7}                             apr_pool_cleanup_register()
{   7}                             ap_queue_destroy() <apr_status_t ap_queue_destroy (void *data) at ./server/mpm/worker/fdqueue.c:236>:
{   8}                                 apr_thread_cond_destroy()
{   8}                                 apr_thread_mutex_destroy()
{   7}                             ap_queue_destroy() <apr_status_t ap_queue_destroy (void *data) at ./server/mpm/experimental/event/fdqueue.c:265>:
{   8}                                 apr_thread_cond_destroy()
{   8}                                 apr_thread_mutex_destroy()
{   6}                         ap_log_error()
{   6}                         clean_child_exit():
{   7}                             apr_pool_destroy()
{   7}                             exit()
{   6}                         ap_queue_info_create() <apr_status_t ap_queue_info_create (fd_queue_info_t **queue_info, apr_pool_t *pool, int max_idlers) at ./server/mpm/experimental/event/fdqueue.c:62>:
{   7}                             apr_palloc()
{   7}                             memset()
{   7}                             apr_thread_mutex_create()
{   7}                             apr_thread_cond_create()
{   7}                             apr_pool_cleanup_register()
{   7}                             queue_info_cleanup() <apr_status_t queue_info_cleanup (void *data_) at ./server/mpm/worker/fdqueue.c:34>:
{   8}                                 apr_thread_cond_destroy()
{   8}                                 apr_thread_mutex_destroy()
{   8}                                 apr_atomic_casptr()
{   8}                                 apr_pool_destroy()
{   7}                             queue_info_cleanup() <apr_status_t queue_info_cleanup (void *data_) at ./server/mpm/experimental/event/fdqueue.c:40>:
{   8}                                 apr_thread_cond_destroy()
{   8}                                 apr_thread_mutex_destroy()
{   8}                                 apr_atomic_casptr()
{   8}                                 apr_pool_destroy()
{   6}                         malloc()
{   6}                         ap_update_child_status_from_indexes()
{   6}                         apr_thread_create()
{   6}                         worker_thread() <void *APR_THREAD_FUNC worker_thread (apr_thread_t *thd, void *dummy) at ./server/mpm/worker/worker.c:806>:
{   7}                             free()
{   7}                             ap_update_child_status_from_indexes()
{   7}                             ap_queue_info_set_idle() <apr_status_t ap_queue_info_set_idle (fd_queue_info_t *queue_info, apr_pool_t *pool_to_recycle) at ./server/mpm/experimental/event/fdqueue.c:90>:
{   8}                                 apr_palloc()
{   8}                                 apr_atomic_casptr()
{   8}                                 apr_atomic_cas32()
{   8}                                 apr_thread_mutex_lock()
{   8}                                 apr_thread_cond_signal()
{   8}                                 apr_thread_mutex_unlock()
{   8}                                 ap_push_pool() <void ap_push_pool (fd_queue_info_t *queue_info, apr_pool_t *pool_to_recycle) at ./server/mpm/experimental/event/fdqueue.c:185>:
{   9}                                     apr_palloc()
{   9}                                     apr_atomic_casptr()
{   8}                                 apr_atomic_inc32()
{   8}                                 AP_DEBUG_ASSERT()
{   7}                             ap_log_error()
{   7}                             signal_threads() <void signal_threads (int mode) at ./server/mpm/worker/worker.c:260>:
{   8}                                 wakeup_listener() <void wakeup_listener (void) at ./server/mpm/worker/worker.c:231>:
{   9}                                     pthread_kill()
{   9}                                     kill()
{   8}                                 ap_queue_interrupt_all() <apr_status_t ap_queue_interrupt_all (fd_queue_t *queue) at ./server/mpm/experimental/event/fdqueue.c:393>:
{   9}                                     apr_thread_mutex_lock()
{   9}                                     apr_thread_cond_broadcast()
{   9}                                     apr_thread_mutex_unlock()
{   8}                                 ap_queue_info_term() <apr_status_t ap_queue_info_term (fd_queue_info_t *queue_info) at ./server/mpm/experimental/event/fdqueue.c:237>:
{   9}                                     apr_thread_mutex_lock()
{   9}                                     apr_thread_cond_broadcast()
{   9}                                     apr_thread_mutex_unlock()
{   8}                                 close_worker_sockets() <void close_worker_sockets (void) at ./server/mpm/worker/worker.c:220>:
{   9}                                     apr_socket_close()
{   7}                             ap_queue_pop() <apr_status_t ap_queue_pop (fd_queue_t *queue, apr_socket_t **sd, conn_state_t **cs, apr_pool_t **p) at ./server/mpm/experimental/event/fdqueue.c:350>:
{   8}                                 apr_thread_mutex_lock()
{   8}                                 ap_queue_empty()
{   8}                                 apr_thread_cond_wait()
{   8}                                 apr_thread_mutex_unlock()
{   7}                             APR_STATUS_IS_EOF()
{   7}                             APR_STATUS_IS_EINTR()
{   7}                             apr_bucket_alloc_create()
{   7}                             process_socket() <void process_socket (apr_pool_t *p, apr_socket_t *sock, int my_child_num, int my_thread_num, apr_bucket_alloc_t *bucket_alloc) at ./server/mpm/worker/worker.c:517>:
{   8}                                 ID_FROM_CHILD_THREAD()
{   8}                                 ap_create_sb_handle()
{   8}                                 apr_os_sock_get()
{   8}                                 ap_run_create_connection()
{   8}                                 ap_process_connection()
{   8}                                 ap_lingering_close()
{   7}                             apr_pool_clear()
{   7}                             apr_thread_exit()
{   6}                         create_listener_thread() <void create_listener_thread (thread_starter *ts) at ./server/mpm/worker/worker.c:900>:
{   7}                             malloc()
{   7}                             apr_thread_create()
{   7}                             listener_thread() <void *listener_thread (apr_thread_t *thd, void *dummy) at ./server/mpm/worker/worker.c:580>:
{   8}                                 apr_thread_pool_get()
{   8}                                 free()
{   8}                                 apr_pollset_create()
{   8}                                 apr_pollset_add()
{   8}                                 unblock_signal() <void unblock_signal (int sig) at ./server/mpm/worker/worker.c:560>:
{   9}                                     sigemptyset()
{   9}                                     sigaddset()
{   9}                                     sigprocmask()
{   9}                                     pthread_sigmask()
{   8}                                 apr_signal()
{   8}                                 dummy_signal_handler() <void dummy_signal_handler (int sig) at ./server/mpm/worker/worker.c:573>
{   8}                                 check_infinite_requests() <void check_infinite_requests (void) at ./server/mpm/worker/worker.c:539>:
{   9}                                     signal_threads() <void signal_threads (int mode) at ./server/mpm/worker/worker.c:260>:
{  10}                                         wakeup_listener() <void wakeup_listener (void) at ./server/mpm/worker/worker.c:231>:
{  11}                                             pthread_kill()
{  11}                                             kill()
{  10}                                         ap_queue_interrupt_all() <apr_status_t ap_queue_interrupt_all (fd_queue_t *queue) at ./server/mpm/experimental/event/fdqueue.c:393>:
{  11}                                             apr_thread_mutex_lock()
{  11}                                             apr_thread_cond_broadcast()
{  11}                                             apr_thread_mutex_unlock()
{  10}                                         ap_queue_info_term() <apr_status_t ap_queue_info_term (fd_queue_info_t *queue_info) at ./server/mpm/experimental/event/fdqueue.c:237>:
{  11}                                             apr_thread_mutex_lock()
{  11}                                             apr_thread_cond_broadcast()
{  11}                                             apr_thread_mutex_unlock()
{  10}                                         close_worker_sockets() <void close_worker_sockets (void) at ./server/mpm/worker/worker.c:220>:
{  11}                                             apr_socket_close()
{   8}                                 ap_queue_info_wait_for_idler() <apr_status_t ap_queue_info_wait_for_idler (fd_queue_info_t *queue_info) at ./server/mpm/experimental/event/fdqueue.c:122>:
{   9}                                     apr_thread_mutex_lock()
{   9}                                     apr_thread_cond_wait()
{   9}                                     apr_thread_mutex_unlock()
{   9}                                     apr_atomic_dec32()
{   9}                                     apr_atomic_casptr()
{   9}                                     apr_atomic_add32()
{   9}                                     AP_DEBUG_ASSERT()
{   9}                                     apr_atomic_inc32()
{   8}                                 APR_STATUS_IS_EOF()
{   8}                                 ap_log_error()
{   8}                                 signal_threads() <void signal_threads (int mode) at ./server/mpm/worker/worker.c:260>:
{   9}                                     wakeup_listener() <void wakeup_listener (void) at ./server/mpm/worker/worker.c:231>:
{  10}                                         pthread_kill()
{  10}                                         kill()
{   9}                                     ap_queue_interrupt_all() <apr_status_t ap_queue_interrupt_all (fd_queue_t *queue) at ./server/mpm/experimental/event/fdqueue.c:393>:
{  10}                                         apr_thread_mutex_lock()
{  10}                                         apr_thread_cond_broadcast()
{  10}                                         apr_thread_mutex_unlock()
{   9}                                     ap_queue_info_term() <apr_status_t ap_queue_info_term (fd_queue_info_t *queue_info) at ./server/mpm/experimental/event/fdqueue.c:237>:
{  10}                                         apr_thread_mutex_lock()
{  10}                                         apr_thread_cond_broadcast()
{  10}                                         apr_thread_mutex_unlock()
{   9}                                     close_worker_sockets() <void close_worker_sockets (void) at ./server/mpm/worker/worker.c:220>:
{  10}                                         apr_socket_close()
{   8}                                 SAFE_ACCEPT()
{   8}                                 apr_proc_mutex_lock()
{   8}                                 apr_pollset_poll()
{   8}                                 APR_STATUS_IS_EINTR()
{   8}                                 apr_allocator_create()
{   8}                                 apr_allocator_max_free_set()
{   8}                                 apr_pool_create_ex()
{   8}                                 apr_allocator_owner_set()
{   8}                                 apr_pool_tag()
{   8}                                 AP_DEBUG_ASSERT()
{   8}                                 apr_proc_mutex_unlock()
{   8}                                 ap_queue_push() <apr_status_t ap_queue_push (fd_queue_t *queue, apr_socket_t *sd, conn_state_t *cs, apr_pool_t *p) at ./server/mpm/experimental/event/fdqueue.c:316>:
{   9}                                     apr_thread_mutex_lock()
{   9}                                     AP_DEBUG_ASSERT()
{   9}                                     ap_queue_full()
{   9}                                     apr_thread_cond_signal()
{   9}                                     apr_thread_mutex_unlock()
{   8}                                 apr_socket_close()
{   8}                                 ap_close_listeners()
{   8}                                 ap_queue_term() <apr_status_t ap_queue_term (fd_queue_t *queue) at ./server/mpm/experimental/event/fdqueue.c:404>:
{   9}                                     apr_thread_mutex_lock()
{   9}                                     apr_thread_mutex_unlock()
{   9}                                     ap_queue_interrupt_all() <apr_status_t ap_queue_interrupt_all (fd_queue_t *queue) at ./server/mpm/experimental/event/fdqueue.c:393>:
{  10}                                         apr_thread_mutex_lock()
{  10}                                         apr_thread_cond_broadcast()
{  10}                                         apr_thread_mutex_unlock()
{   8}                                 kill()
{   8}                                 apr_thread_exit()
{   7}                             ap_log_error()
{   7}                             clean_child_exit():
{   8}                                 apr_pool_destroy()
{   8}                                 exit()
{   7}                             apr_os_thread_get()
{   6}                         apr_sleep()
{   6}                         apr_time_from_sec()
{   6}                         apr_thread_exit()
{   5}                     apr_signal_thread()
{   5}                     check_signal() <int check_signal (int signum) at ./server/mpm/worker/worker.c:890>:
{   5}                     join_start_thread() <void join_start_thread (apr_thread_t *start_thread_id) at ./server/mpm/worker/worker.c:1090>:
{   6}                         apr_thread_join()
{   6}                         ap_log_error()
{   5}                     signal_threads() <void signal_threads (int mode) at ./server/mpm/worker/worker.c:260>:
{   6}                         wakeup_listener() <void wakeup_listener (void) at ./server/mpm/worker/worker.c:231>:
{   7}                             pthread_kill()
{   7}                             kill()
{   6}                         ap_queue_interrupt_all() <apr_status_t ap_queue_interrupt_all (fd_queue_t *queue) at ./server/mpm/experimental/event/fdqueue.c:393>:
{   7}                             apr_thread_mutex_lock()
{   7}                             apr_thread_cond_broadcast()
{   7}                             apr_thread_mutex_unlock()
{   6}                         ap_queue_info_term() <apr_status_t ap_queue_info_term (fd_queue_info_t *queue_info) at ./server/mpm/experimental/event/fdqueue.c:237>:
{   7}                             apr_thread_mutex_lock()
{   7}                             apr_thread_cond_broadcast()
{   7}                             apr_thread_mutex_unlock()
{   6}                         close_worker_sockets() <void close_worker_sockets (void) at ./server/mpm/worker/worker.c:220>:
{   7}                             apr_socket_close()
{   5}                     join_workers() <void join_workers (apr_thread_t *listener, apr_thread_t **threads) at ./server/mpm/worker/worker.c:1035>:
{   6}                         pthread_kill()
{   6}                         kill()
{   6}                         apr_sleep()
{   6}                         apr_time_make()
{   6}                         wakeup_listener() <void wakeup_listener (void) at ./server/mpm/worker/worker.c:231>:
{   7}                             pthread_kill()
{   7}                             kill()
{   6}                         ap_log_error()
{   6}                         apr_thread_join()
{   5}                     unblock_signal() <void unblock_signal (int sig) at ./server/mpm/worker/worker.c:560>:
{   6}                         sigemptyset()
{   6}                         sigaddset()
{   6}                         sigprocmask()
{   6}                         pthread_sigmask()
{   5}                     apr_signal()
{   5}                     dummy_signal_handler() <void dummy_signal_handler (int sig) at ./server/mpm/worker/worker.c:573>
{   5}                     ap_mpm_pod_check()
{   5}                     free()
{   4}                 fork()
{   4}                 ap_log_error()
{   4}                 ap_update_child_status_from_indexes()
{   4}                 apr_sleep()
{   4}                 apr_time_from_sec()
{   4}                 bindprocessor()
{   4}                 RAISE_SIGSTOP()
{   4}                 apr_signal()
{   4}                 just_die() <void just_die (int sig) at ./server/mpm/worker/worker.c:342>:
{   5}                     clean_child_exit():
{   6}                         apr_pool_destroy()
{   6}                         exit()
{   4}                 clean_child_exit():
{   5}                     apr_pool_destroy()
{   5}                     exit()
{   4}                 ap_register_extra_mpm_process() <void ap_register_extra_mpm_process (pid_t pid) at ./server/mpm_common.c:89>:
{   5}                     malloc()
{   3}             ap_unregister_extra_mpm_process() <int ap_unregister_extra_mpm_process (pid_t pid) at ./server/mpm_common.c:98>:
{   4}                 free()
{   3}             apr_proc_other_child_alert()
{   3}             ap_log_error()
{   3}             startup_children() <void startup_children (int number_to_start) at ./server/mpm/worker/worker.c:1342>:
{   4}                 make_child() <int make_child (server_rec *s, int slot) at ./server/mpm/worker/worker.c:1270>:
{   5}                     set_signals() <void set_signals (void) at ./server/mpm/worker/worker.c:413>:
{   6}                         ap_fatal_signal_setup() <apr_status_t ap_fatal_signal_setup (server_rec *s, apr_pool_t *in_pconf) at ./server/mpm_common.c:1186>:
{   7}                             sigemptyset()
{   7}                             sig_coredump() <void sig_coredump (int sig) at ./server/mpm_common.c:1145>:
{   8}                                 apr_filepath_set()
{   8}                                 apr_signal()
{   8}                                 run_fatal_exception_hook() <void run_fatal_exception_hook (int sig) at ./server/mpm_common.c:1130>:
{   9}                                     geteuid()
{   9}                                     ap_run_fatal_exception()
{   8}                                 getpid()
{   8}                                 ap_log_error()
{   8}                                 kill()
{   7}                             sigaction()
{   7}                             ap_log_error()
{   7}                             apr_signal()
{   7}                             getpid()
{   6}                         sigemptyset()
{   6}                         sig_term() <void sig_term (int sig) at ./server/mpm/worker/worker.c:403>:
{   7}                             ap_start_shutdown() <void ap_start_shutdown (int graceful) at ./server/mpm/worker/worker.c:377>:
{   6}                         sigaction()
{   6}                         ap_log_error()
{   6}                         sigaddset()
{   6}                         restart() <void restart (int sig) at ./server/mpm/worker/worker.c:408>:
{   7}                             ap_start_restart() <void ap_start_restart (int graceful) at ./server/mpm/worker/worker.c:392>:
{   6}                         apr_signal()
{   5}                     getpid()
{   5}                     child_main() <void child_main (int child_num_arg) at ./server/mpm/worker/worker.c:1106>:
{   6}                         getpid()
{   6}                         ap_fatal_signal_child_setup() <apr_status_t ap_fatal_signal_child_setup (server_rec *s) at ./server/mpm_common.c:1180>:
{   7}                             getpid()
{   6}                         apr_pool_create()
{   6}                         ap_reopen_scoreboard() <apr_status_t ap_reopen_scoreboard (apr_pool_t *p, apr_shm_t **shm, int detached) at ./server/scoreboard.c:227>:
{   7}                             apr_shm_size_get()
{   7}                             ap_log_error()
{   7}                             apr_shm_detach()
{   6}                         SAFE_ACCEPT()
{   6}                         apr_proc_mutex_child_init()
{   6}                         ap_log_error()
{   6}                         clean_child_exit():
{   7}                             apr_pool_destroy()
{   7}                             exit()
{   6}                         unixd_setup_child()
{   6}                         ap_run_child_init()
{   6}                         apr_setup_signal_thread()
{   6}                         calloc()
{   6}                         apr_palloc()
{   6}                         apr_threadattr_create()
{   6}                         apr_threadattr_detach_set()
{   6}                         apr_threadattr_stacksize_set()
{   6}                         apr_thread_create()
{   6}                         start_threads() <void *APR_THREAD_FUNC start_threads (apr_thread_t *thd, void *dummy) at ./server/mpm/worker/worker.c:927>:
{   7}                             apr_pcalloc()
{   7}                             ap_queue_init() <apr_status_t ap_queue_init (fd_queue_t *queue, int queue_capacity, apr_pool_t *a) at ./server/mpm/experimental/event/fdqueue.c:281>:
{   8}                                 apr_thread_mutex_create()
{   8}                                 apr_thread_cond_create()
{   8}                                 apr_palloc()
{   8}                                 apr_pool_cleanup_register()
{   8}                                 ap_queue_destroy() <apr_status_t ap_queue_destroy (void *data) at ./server/mpm/worker/fdqueue.c:236>:
{   9}                                     apr_thread_cond_destroy()
{   9}                                     apr_thread_mutex_destroy()
{   8}                                 ap_queue_destroy() <apr_status_t ap_queue_destroy (void *data) at ./server/mpm/experimental/event/fdqueue.c:265>:
{   9}                                     apr_thread_cond_destroy()
{   9}                                     apr_thread_mutex_destroy()
{   7}                             ap_log_error()
{   7}                             clean_child_exit():
{   8}                                 apr_pool_destroy()
{   8}                                 exit()
{   7}                             ap_queue_info_create() <apr_status_t ap_queue_info_create (fd_queue_info_t **queue_info, apr_pool_t *pool, int max_idlers) at ./server/mpm/experimental/event/fdqueue.c:62>:
{   8}                                 apr_palloc()
{   8}                                 memset()
{   8}                                 apr_thread_mutex_create()
{   8}                                 apr_thread_cond_create()
{   8}                                 apr_pool_cleanup_register()
{   8}                                 queue_info_cleanup() <apr_status_t queue_info_cleanup (void *data_) at ./server/mpm/worker/fdqueue.c:34>:
{   9}                                     apr_thread_cond_destroy()
{   9}                                     apr_thread_mutex_destroy()
{   9}                                     apr_atomic_casptr()
{   9}                                     apr_pool_destroy()
{   8}                                 queue_info_cleanup() <apr_status_t queue_info_cleanup (void *data_) at ./server/mpm/experimental/event/fdqueue.c:40>:
{   9}                                     apr_thread_cond_destroy()
{   9}                                     apr_thread_mutex_destroy()
{   9}                                     apr_atomic_casptr()
{   9}                                     apr_pool_destroy()
{   7}                             malloc()
{   7}                             ap_update_child_status_from_indexes()
{   7}                             apr_thread_create()
{   7}                             worker_thread() <void *APR_THREAD_FUNC worker_thread (apr_thread_t *thd, void *dummy) at ./server/mpm/worker/worker.c:806>:
{   8}                                 free()
{   8}                                 ap_update_child_status_from_indexes()
{   8}                                 ap_queue_info_set_idle() <apr_status_t ap_queue_info_set_idle (fd_queue_info_t *queue_info, apr_pool_t *pool_to_recycle) at ./server/mpm/experimental/event/fdqueue.c:90>:
{   9}                                     apr_palloc()
{   9}                                     apr_atomic_casptr()
{   9}                                     apr_atomic_cas32()
{   9}                                     apr_thread_mutex_lock()
{   9}                                     apr_thread_cond_signal()
{   9}                                     apr_thread_mutex_unlock()
{   9}                                     ap_push_pool() <void ap_push_pool (fd_queue_info_t *queue_info, apr_pool_t *pool_to_recycle) at ./server/mpm/experimental/event/fdqueue.c:185>:
{  10}                                         apr_palloc()
{  10}                                         apr_atomic_casptr()
{   9}                                     apr_atomic_inc32()
{   9}                                     AP_DEBUG_ASSERT()
{   8}                                 ap_log_error()
{   8}                                 signal_threads() <void signal_threads (int mode) at ./server/mpm/worker/worker.c:260>:
{   9}                                     wakeup_listener() <void wakeup_listener (void) at ./server/mpm/worker/worker.c:231>:
{  10}                                         pthread_kill()
{  10}                                         kill()
{   9}                                     ap_queue_interrupt_all() <apr_status_t ap_queue_interrupt_all (fd_queue_t *queue) at ./server/mpm/experimental/event/fdqueue.c:393>:
{  10}                                         apr_thread_mutex_lock()
{  10}                                         apr_thread_cond_broadcast()
{  10}                                         apr_thread_mutex_unlock()
{   9}                                     ap_queue_info_term() <apr_status_t ap_queue_info_term (fd_queue_info_t *queue_info) at ./server/mpm/experimental/event/fdqueue.c:237>:
{  10}                                         apr_thread_mutex_lock()
{  10}                                         apr_thread_cond_broadcast()
{  10}                                         apr_thread_mutex_unlock()
{   9}                                     close_worker_sockets() <void close_worker_sockets (void) at ./server/mpm/worker/worker.c:220>:
{  10}                                         apr_socket_close()
{   8}                                 ap_queue_pop() <apr_status_t ap_queue_pop (fd_queue_t *queue, apr_socket_t **sd, conn_state_t **cs, apr_pool_t **p) at ./server/mpm/experimental/event/fdqueue.c:350>:
{   9}                                     apr_thread_mutex_lock()
{   9}                                     ap_queue_empty()
{   9}                                     apr_thread_cond_wait()
{   9}                                     apr_thread_mutex_unlock()
{   8}                                 APR_STATUS_IS_EOF()
{   8}                                 APR_STATUS_IS_EINTR()
{   8}                                 apr_bucket_alloc_create()
{   8}                                 process_socket() <void process_socket (apr_pool_t *p, apr_socket_t *sock, int my_child_num, int my_thread_num, apr_bucket_alloc_t *bucket_alloc) at ./server/mpm/worker/worker.c:517>:
{   9}                                     ID_FROM_CHILD_THREAD()
{   9}                                     ap_create_sb_handle()
{   9}                                     apr_os_sock_get()
{   9}                                     ap_run_create_connection()
{   9}                                     ap_process_connection()
{   9}                                     ap_lingering_close()
{   8}                                 apr_pool_clear()
{   8}                                 apr_thread_exit()
{   7}                             create_listener_thread() <void create_listener_thread (thread_starter *ts) at ./server/mpm/worker/worker.c:900>:
{   8}                                 malloc()
{   8}                                 apr_thread_create()
{   8}                                 listener_thread() <void *listener_thread (apr_thread_t *thd, void *dummy) at ./server/mpm/worker/worker.c:580>:
{   9}                                     apr_thread_pool_get()
{   9}                                     free()
{   9}                                     apr_pollset_create()
{   9}                                     apr_pollset_add()
{   9}                                     unblock_signal() <void unblock_signal (int sig) at ./server/mpm/worker/worker.c:560>:
{  10}                                         sigemptyset()
{  10}                                         sigaddset()
{  10}                                         sigprocmask()
{  10}                                         pthread_sigmask()
{   9}                                     apr_signal()
{   9}                                     dummy_signal_handler() <void dummy_signal_handler (int sig) at ./server/mpm/worker/worker.c:573>
{   9}                                     check_infinite_requests() <void check_infinite_requests (void) at ./server/mpm/worker/worker.c:539>:
{  10}                                         signal_threads() <void signal_threads (int mode) at ./server/mpm/worker/worker.c:260>:
{  11}                                             wakeup_listener() <void wakeup_listener (void) at ./server/mpm/worker/worker.c:231>:
{  12}                                                 pthread_kill()
{  12}                                                 kill()
{  11}                                             ap_queue_interrupt_all() <apr_status_t ap_queue_interrupt_all (fd_queue_t *queue) at ./server/mpm/experimental/event/fdqueue.c:393>:
{  12}                                                 apr_thread_mutex_lock()
{  12}                                                 apr_thread_cond_broadcast()
{  12}                                                 apr_thread_mutex_unlock()
{  11}                                             ap_queue_info_term() <apr_status_t ap_queue_info_term (fd_queue_info_t *queue_info) at ./server/mpm/experimental/event/fdqueue.c:237>:
{  12}                                                 apr_thread_mutex_lock()
{  12}                                                 apr_thread_cond_broadcast()
{  12}                                                 apr_thread_mutex_unlock()
{  11}                                             close_worker_sockets() <void close_worker_sockets (void) at ./server/mpm/worker/worker.c:220>:
{  12}                                                 apr_socket_close()
{   9}                                     ap_queue_info_wait_for_idler() <apr_status_t ap_queue_info_wait_for_idler (fd_queue_info_t *queue_info) at ./server/mpm/experimental/event/fdqueue.c:122>:
{  10}                                         apr_thread_mutex_lock()
{  10}                                         apr_thread_cond_wait()
{  10}                                         apr_thread_mutex_unlock()
{  10}                                         apr_atomic_dec32()
{  10}                                         apr_atomic_casptr()
{  10}                                         apr_atomic_add32()
{  10}                                         AP_DEBUG_ASSERT()
{  10}                                         apr_atomic_inc32()
{   9}                                     APR_STATUS_IS_EOF()
{   9}                                     ap_log_error()
{   9}                                     signal_threads() <void signal_threads (int mode) at ./server/mpm/worker/worker.c:260>:
{  10}                                         wakeup_listener() <void wakeup_listener (void) at ./server/mpm/worker/worker.c:231>:
{  11}                                             pthread_kill()
{  11}                                             kill()
{  10}                                         ap_queue_interrupt_all() <apr_status_t ap_queue_interrupt_all (fd_queue_t *queue) at ./server/mpm/experimental/event/fdqueue.c:393>:
{  11}                                             apr_thread_mutex_lock()
{  11}                                             apr_thread_cond_broadcast()
{  11}                                             apr_thread_mutex_unlock()
{  10}                                         ap_queue_info_term() <apr_status_t ap_queue_info_term (fd_queue_info_t *queue_info) at ./server/mpm/experimental/event/fdqueue.c:237>:
{  11}                                             apr_thread_mutex_lock()
{  11}                                             apr_thread_cond_broadcast()
{  11}                                             apr_thread_mutex_unlock()
{  10}                                         close_worker_sockets() <void close_worker_sockets (void) at ./server/mpm/worker/worker.c:220>:
{  11}                                             apr_socket_close()
{   9}                                     SAFE_ACCEPT()
{   9}                                     apr_proc_mutex_lock()
{   9}                                     apr_pollset_poll()
{   9}                                     APR_STATUS_IS_EINTR()
{   9}                                     apr_allocator_create()
{   9}                                     apr_allocator_max_free_set()
{   9}                                     apr_pool_create_ex()
{   9}                                     apr_allocator_owner_set()
{   9}                                     apr_pool_tag()
{   9}                                     AP_DEBUG_ASSERT()
{   9}                                     apr_proc_mutex_unlock()
{   9}                                     ap_queue_push() <apr_status_t ap_queue_push (fd_queue_t *queue, apr_socket_t *sd, conn_state_t *cs, apr_pool_t *p) at ./server/mpm/experimental/event/fdqueue.c:316>:
{  10}                                         apr_thread_mutex_lock()
{  10}                                         AP_DEBUG_ASSERT()
{  10}                                         ap_queue_full()
{  10}                                         apr_thread_cond_signal()
{  10}                                         apr_thread_mutex_unlock()
{   9}                                     apr_socket_close()
{   9}                                     ap_close_listeners()
{   9}                                     ap_queue_term() <apr_status_t ap_queue_term (fd_queue_t *queue) at ./server/mpm/experimental/event/fdqueue.c:404>:
{  10}                                         apr_thread_mutex_lock()
{  10}                                         apr_thread_mutex_unlock()
{  10}                                         ap_queue_interrupt_all() <apr_status_t ap_queue_interrupt_all (fd_queue_t *queue) at ./server/mpm/experimental/event/fdqueue.c:393>:
{  11}                                             apr_thread_mutex_lock()
{  11}                                             apr_thread_cond_broadcast()
{  11}                                             apr_thread_mutex_unlock()
{   9}                                     kill()
{   9}                                     apr_thread_exit()
{   8}                                 ap_log_error()
{   8}                                 clean_child_exit():
{   9}                                     apr_pool_destroy()
{   9}                                     exit()
{   8}                                 apr_os_thread_get()
{   7}                             apr_sleep()
{   7}                             apr_time_from_sec()
{   7}                             apr_thread_exit()
{   6}                         apr_signal_thread()
{   6}                         check_signal() <int check_signal (int signum) at ./server/mpm/worker/worker.c:890>:
{   6}                         join_start_thread() <void join_start_thread (apr_thread_t *start_thread_id) at ./server/mpm/worker/worker.c:1090>:
{   7}                             apr_thread_join()
{   7}                             ap_log_error()
{   6}                         signal_threads() <void signal_threads (int mode) at ./server/mpm/worker/worker.c:260>:
{   7}                             wakeup_listener() <void wakeup_listener (void) at ./server/mpm/worker/worker.c:231>:
{   8}                                 pthread_kill()
{   8}                                 kill()
{   7}                             ap_queue_interrupt_all() <apr_status_t ap_queue_interrupt_all (fd_queue_t *queue) at ./server/mpm/experimental/event/fdqueue.c:393>:
{   8}                                 apr_thread_mutex_lock()
{   8}                                 apr_thread_cond_broadcast()
{   8}                                 apr_thread_mutex_unlock()
{   7}                             ap_queue_info_term() <apr_status_t ap_queue_info_term (fd_queue_info_t *queue_info) at ./server/mpm/experimental/event/fdqueue.c:237>:
{   8}                                 apr_thread_mutex_lock()
{   8}                                 apr_thread_cond_broadcast()
{   8}                                 apr_thread_mutex_unlock()
{   7}                             close_worker_sockets() <void close_worker_sockets (void) at ./server/mpm/worker/worker.c:220>:
{   8}                                 apr_socket_close()
{   6}                         join_workers() <void join_workers (apr_thread_t *listener, apr_thread_t **threads) at ./server/mpm/worker/worker.c:1035>:
{   7}                             pthread_kill()
{   7}                             kill()
{   7}                             apr_sleep()
{   7}                             apr_time_make()
{   7}                             wakeup_listener() <void wakeup_listener (void) at ./server/mpm/worker/worker.c:231>:
{   8}                                 pthread_kill()
{   8}                                 kill()
{   7}                             ap_log_error()
{   7}                             apr_thread_join()
{   6}                         unblock_signal() <void unblock_signal (int sig) at ./server/mpm/worker/worker.c:560>:
{   7}                             sigemptyset()
{   7}                             sigaddset()
{   7}                             sigprocmask()
{   7}                             pthread_sigmask()
{   6}                         apr_signal()
{   6}                         dummy_signal_handler() <void dummy_signal_handler (int sig) at ./server/mpm/worker/worker.c:573>
{   6}                         ap_mpm_pod_check()
{   6}                         free()
{   5}                     fork()
{   5}                     ap_log_error()
{   5}                     ap_update_child_status_from_indexes()
{   5}                     apr_sleep()
{   5}                     apr_time_from_sec()
{   5}                     bindprocessor()
{   5}                     RAISE_SIGSTOP()
{   5}                     apr_signal()
{   5}                     just_die() <void just_die (int sig) at ./server/mpm/worker/worker.c:342>:
{   6}                         clean_child_exit():
{   7}                             apr_pool_destroy()
{   7}                             exit()
{   5}                     clean_child_exit():
{   6}                         apr_pool_destroy()
{   6}                         exit()
{   5}                     ap_register_extra_mpm_process() <void ap_register_extra_mpm_process (pid_t pid) at ./server/mpm_common.c:89>:
{   6}                         malloc()
{   3}             perform_idle_server_maintenance() <void perform_idle_server_maintenance (void) at ./server/mpm/worker/worker.c:1370>:
{   4}                 ap_log_error()
{   4}                 ap_mpm_pod_signal()
{   4}                 make_child() <int make_child (server_rec *s, int slot) at ./server/mpm/worker/worker.c:1270>:
{   5}                     set_signals() <void set_signals (void) at ./server/mpm/worker/worker.c:413>:
{   6}                         ap_fatal_signal_setup() <apr_status_t ap_fatal_signal_setup (server_rec *s, apr_pool_t *in_pconf) at ./server/mpm_common.c:1186>:
{   7}                             sigemptyset()
{   7}                             sig_coredump() <void sig_coredump (int sig) at ./server/mpm_common.c:1145>:
{   8}                                 apr_filepath_set()
{   8}                                 apr_signal()
{   8}                                 run_fatal_exception_hook() <void run_fatal_exception_hook (int sig) at ./server/mpm_common.c:1130>:
{   9}                                     geteuid()
{   9}                                     ap_run_fatal_exception()
{   8}                                 getpid()
{   8}                                 ap_log_error()
{   8}                                 kill()
{   7}                             sigaction()
{   7}                             ap_log_error()
{   7}                             apr_signal()
{   7}                             getpid()
{   6}                         sigemptyset()
{   6}                         sig_term() <void sig_term (int sig) at ./server/mpm/worker/worker.c:403>:
{   7}                             ap_start_shutdown() <void ap_start_shutdown (int graceful) at ./server/mpm/worker/worker.c:377>:
{   6}                         sigaction()
{   6}                         ap_log_error()
{   6}                         sigaddset()
{   6}                         restart() <void restart (int sig) at ./server/mpm/worker/worker.c:408>:
{   7}                             ap_start_restart() <void ap_start_restart (int graceful) at ./server/mpm/worker/worker.c:392>:
{   6}                         apr_signal()
{   5}                     getpid()
{   5}                     child_main() <void child_main (int child_num_arg) at ./server/mpm/worker/worker.c:1106>:
{   6}                         getpid()
{   6}                         ap_fatal_signal_child_setup() <apr_status_t ap_fatal_signal_child_setup (server_rec *s) at ./server/mpm_common.c:1180>:
{   7}                             getpid()
{   6}                         apr_pool_create()
{   6}                         ap_reopen_scoreboard() <apr_status_t ap_reopen_scoreboard (apr_pool_t *p, apr_shm_t **shm, int detached) at ./server/scoreboard.c:227>:
{   7}                             apr_shm_size_get()
{   7}                             ap_log_error()
{   7}                             apr_shm_detach()
{   6}                         SAFE_ACCEPT()
{   6}                         apr_proc_mutex_child_init()
{   6}                         ap_log_error()
{   6}                         clean_child_exit():
{   7}                             apr_pool_destroy()
{   7}                             exit()
{   6}                         unixd_setup_child()
{   6}                         ap_run_child_init()
{   6}                         apr_setup_signal_thread()
{   6}                         calloc()
{   6}                         apr_palloc()
{   6}                         apr_threadattr_create()
{   6}                         apr_threadattr_detach_set()
{   6}                         apr_threadattr_stacksize_set()
{   6}                         apr_thread_create()
{   6}                         start_threads() <void *APR_THREAD_FUNC start_threads (apr_thread_t *thd, void *dummy) at ./server/mpm/worker/worker.c:927>:
{   7}                             apr_pcalloc()
{   7}                             ap_queue_init() <apr_status_t ap_queue_init (fd_queue_t *queue, int queue_capacity, apr_pool_t *a) at ./server/mpm/experimental/event/fdqueue.c:281>:
{   8}                                 apr_thread_mutex_create()
{   8}                                 apr_thread_cond_create()
{   8}                                 apr_palloc()
{   8}                                 apr_pool_cleanup_register()
{   8}                                 ap_queue_destroy() <apr_status_t ap_queue_destroy (void *data) at ./server/mpm/worker/fdqueue.c:236>:
{   9}                                     apr_thread_cond_destroy()
{   9}                                     apr_thread_mutex_destroy()
{   8}                                 ap_queue_destroy() <apr_status_t ap_queue_destroy (void *data) at ./server/mpm/experimental/event/fdqueue.c:265>:
{   9}                                     apr_thread_cond_destroy()
{   9}                                     apr_thread_mutex_destroy()
{   7}                             ap_log_error()
{   7}                             clean_child_exit():
{   8}                                 apr_pool_destroy()
{   8}                                 exit()
{   7}                             ap_queue_info_create() <apr_status_t ap_queue_info_create (fd_queue_info_t **queue_info, apr_pool_t *pool, int max_idlers) at ./server/mpm/experimental/event/fdqueue.c:62>:
{   8}                                 apr_palloc()
{   8}                                 memset()
{   8}                                 apr_thread_mutex_create()
{   8}                                 apr_thread_cond_create()
{   8}                                 apr_pool_cleanup_register()
{   8}                                 queue_info_cleanup() <apr_status_t queue_info_cleanup (void *data_) at ./server/mpm/worker/fdqueue.c:34>:
{   9}                                     apr_thread_cond_destroy()
{   9}                                     apr_thread_mutex_destroy()
{   9}                                     apr_atomic_casptr()
{   9}                                     apr_pool_destroy()
{   8}                                 queue_info_cleanup() <apr_status_t queue_info_cleanup (void *data_) at ./server/mpm/experimental/event/fdqueue.c:40>:
{   9}                                     apr_thread_cond_destroy()
{   9}                                     apr_thread_mutex_destroy()
{   9}                                     apr_atomic_casptr()
{   9}                                     apr_pool_destroy()
{   7}                             malloc()
{   7}                             ap_update_child_status_from_indexes()
{   7}                             apr_thread_create()
{   7}                             worker_thread() <void *APR_THREAD_FUNC worker_thread (apr_thread_t *thd, void *dummy) at ./server/mpm/worker/worker.c:806>:
{   8}                                 free()
{   8}                                 ap_update_child_status_from_indexes()
{   8}                                 ap_queue_info_set_idle() <apr_status_t ap_queue_info_set_idle (fd_queue_info_t *queue_info, apr_pool_t *pool_to_recycle) at ./server/mpm/experimental/event/fdqueue.c:90>:
{   9}                                     apr_palloc()
{   9}                                     apr_atomic_casptr()
{   9}                                     apr_atomic_cas32()
{   9}                                     apr_thread_mutex_lock()
{   9}                                     apr_thread_cond_signal()
{   9}                                     apr_thread_mutex_unlock()
{   9}                                     ap_push_pool() <void ap_push_pool (fd_queue_info_t *queue_info, apr_pool_t *pool_to_recycle) at ./server/mpm/experimental/event/fdqueue.c:185>:
{  10}                                         apr_palloc()
{  10}                                         apr_atomic_casptr()
{   9}                                     apr_atomic_inc32()
{   9}                                     AP_DEBUG_ASSERT()
{   8}                                 ap_log_error()
{   8}                                 signal_threads() <void signal_threads (int mode) at ./server/mpm/worker/worker.c:260>:
{   9}                                     wakeup_listener() <void wakeup_listener (void) at ./server/mpm/worker/worker.c:231>:
{  10}                                         pthread_kill()
{  10}                                         kill()
{   9}                                     ap_queue_interrupt_all() <apr_status_t ap_queue_interrupt_all (fd_queue_t *queue) at ./server/mpm/experimental/event/fdqueue.c:393>:
{  10}                                         apr_thread_mutex_lock()
{  10}                                         apr_thread_cond_broadcast()
{  10}                                         apr_thread_mutex_unlock()
{   9}                                     ap_queue_info_term() <apr_status_t ap_queue_info_term (fd_queue_info_t *queue_info) at ./server/mpm/experimental/event/fdqueue.c:237>:
{  10}                                         apr_thread_mutex_lock()
{  10}                                         apr_thread_cond_broadcast()
{  10}                                         apr_thread_mutex_unlock()
{   9}                                     close_worker_sockets() <void close_worker_sockets (void) at ./server/mpm/worker/worker.c:220>:
{  10}                                         apr_socket_close()
{   8}                                 ap_queue_pop() <apr_status_t ap_queue_pop (fd_queue_t *queue, apr_socket_t **sd, conn_state_t **cs, apr_pool_t **p) at ./server/mpm/experimental/event/fdqueue.c:350>:
{   9}                                     apr_thread_mutex_lock()
{   9}                                     ap_queue_empty()
{   9}                                     apr_thread_cond_wait()
{   9}                                     apr_thread_mutex_unlock()
{   8}                                 APR_STATUS_IS_EOF()
{   8}                                 APR_STATUS_IS_EINTR()
{   8}                                 apr_bucket_alloc_create()
{   8}                                 process_socket() <void process_socket (apr_pool_t *p, apr_socket_t *sock, int my_child_num, int my_thread_num, apr_bucket_alloc_t *bucket_alloc) at ./server/mpm/worker/worker.c:517>:
{   9}                                     ID_FROM_CHILD_THREAD()
{   9}                                     ap_create_sb_handle()
{   9}                                     apr_os_sock_get()
{   9}                                     ap_run_create_connection()
{   9}                                     ap_process_connection()
{   9}                                     ap_lingering_close()
{   8}                                 apr_pool_clear()
{   8}                                 apr_thread_exit()
{   7}                             create_listener_thread() <void create_listener_thread (thread_starter *ts) at ./server/mpm/worker/worker.c:900>:
{   8}                                 malloc()
{   8}                                 apr_thread_create()
{   8}                                 listener_thread() <void *listener_thread (apr_thread_t *thd, void *dummy) at ./server/mpm/worker/worker.c:580>:
{   9}                                     apr_thread_pool_get()
{   9}                                     free()
{   9}                                     apr_pollset_create()
{   9}                                     apr_pollset_add()
{   9}                                     unblock_signal() <void unblock_signal (int sig) at ./server/mpm/worker/worker.c:560>:
{  10}                                         sigemptyset()
{  10}                                         sigaddset()
{  10}                                         sigprocmask()
{  10}                                         pthread_sigmask()
{   9}                                     apr_signal()
{   9}                                     dummy_signal_handler() <void dummy_signal_handler (int sig) at ./server/mpm/worker/worker.c:573>
{   9}                                     check_infinite_requests() <void check_infinite_requests (void) at ./server/mpm/worker/worker.c:539>:
{  10}                                         signal_threads() <void signal_threads (int mode) at ./server/mpm/worker/worker.c:260>:
{  11}                                             wakeup_listener() <void wakeup_listener (void) at ./server/mpm/worker/worker.c:231>:
{  12}                                                 pthread_kill()
{  12}                                                 kill()
{  11}                                             ap_queue_interrupt_all() <apr_status_t ap_queue_interrupt_all (fd_queue_t *queue) at ./server/mpm/experimental/event/fdqueue.c:393>:
{  12}                                                 apr_thread_mutex_lock()
{  12}                                                 apr_thread_cond_broadcast()
{  12}                                                 apr_thread_mutex_unlock()
{  11}                                             ap_queue_info_term() <apr_status_t ap_queue_info_term (fd_queue_info_t *queue_info) at ./server/mpm/experimental/event/fdqueue.c:237>:
{  12}                                                 apr_thread_mutex_lock()
{  12}                                                 apr_thread_cond_broadcast()
{  12}                                                 apr_thread_mutex_unlock()
{  11}                                             close_worker_sockets() <void close_worker_sockets (void) at ./server/mpm/worker/worker.c:220>:
{  12}                                                 apr_socket_close()
{   9}                                     ap_queue_info_wait_for_idler() <apr_status_t ap_queue_info_wait_for_idler (fd_queue_info_t *queue_info) at ./server/mpm/experimental/event/fdqueue.c:122>:
{  10}                                         apr_thread_mutex_lock()
{  10}                                         apr_thread_cond_wait()
{  10}                                         apr_thread_mutex_unlock()
{  10}                                         apr_atomic_dec32()
{  10}                                         apr_atomic_casptr()
{  10}                                         apr_atomic_add32()
{  10}                                         AP_DEBUG_ASSERT()
{  10}                                         apr_atomic_inc32()
{   9}                                     APR_STATUS_IS_EOF()
{   9}                                     ap_log_error()
{   9}                                     signal_threads() <void signal_threads (int mode) at ./server/mpm/worker/worker.c:260>:
{  10}                                         wakeup_listener() <void wakeup_listener (void) at ./server/mpm/worker/worker.c:231>:
{  11}                                             pthread_kill()
{  11}                                             kill()
{  10}                                         ap_queue_interrupt_all() <apr_status_t ap_queue_interrupt_all (fd_queue_t *queue) at ./server/mpm/experimental/event/fdqueue.c:393>:
{  11}                                             apr_thread_mutex_lock()
{  11}                                             apr_thread_cond_broadcast()
{  11}                                             apr_thread_mutex_unlock()
{  10}                                         ap_queue_info_term() <apr_status_t ap_queue_info_term (fd_queue_info_t *queue_info) at ./server/mpm/experimental/event/fdqueue.c:237>:
{  11}                                             apr_thread_mutex_lock()
{  11}                                             apr_thread_cond_broadcast()
{  11}                                             apr_thread_mutex_unlock()
{  10}                                         close_worker_sockets() <void close_worker_sockets (void) at ./server/mpm/worker/worker.c:220>:
{  11}                                             apr_socket_close()
{   9}                                     SAFE_ACCEPT()
{   9}                                     apr_proc_mutex_lock()
{   9}                                     apr_pollset_poll()
{   9}                                     APR_STATUS_IS_EINTR()
{   9}                                     apr_allocator_create()
{   9}                                     apr_allocator_max_free_set()
{   9}                                     apr_pool_create_ex()
{   9}                                     apr_allocator_owner_set()
{   9}                                     apr_pool_tag()
{   9}                                     AP_DEBUG_ASSERT()
{   9}                                     apr_proc_mutex_unlock()
{   9}                                     ap_queue_push() <apr_status_t ap_queue_push (fd_queue_t *queue, apr_socket_t *sd, conn_state_t *cs, apr_pool_t *p) at ./server/mpm/experimental/event/fdqueue.c:316>:
{  10}                                         apr_thread_mutex_lock()
{  10}                                         AP_DEBUG_ASSERT()
{  10}                                         ap_queue_full()
{  10}                                         apr_thread_cond_signal()
{  10}                                         apr_thread_mutex_unlock()
{   9}                                     apr_socket_close()
{   9}                                     ap_close_listeners()
{   9}                                     ap_queue_term() <apr_status_t ap_queue_term (fd_queue_t *queue) at ./server/mpm/experimental/event/fdqueue.c:404>:
{  10}                                         apr_thread_mutex_lock()
{  10}                                         apr_thread_mutex_unlock()
{  10}                                         ap_queue_interrupt_all() <apr_status_t ap_queue_interrupt_all (fd_queue_t *queue) at ./server/mpm/experimental/event/fdqueue.c:393>:
{  11}                                             apr_thread_mutex_lock()
{  11}                                             apr_thread_cond_broadcast()
{  11}                                             apr_thread_mutex_unlock()
{   9}                                     kill()
{   9}                                     apr_thread_exit()
{   8}                                 ap_log_error()
{   8}                                 clean_child_exit():
{   9}                                     apr_pool_destroy()
{   9}                                     exit()
{   8}                                 apr_os_thread_get()
{   7}                             apr_sleep()
{   7}                             apr_time_from_sec()
{   7}                             apr_thread_exit()
{   6}                         apr_signal_thread()
{   6}                         check_signal() <int check_signal (int signum) at ./server/mpm/worker/worker.c:890>:
{   6}                         join_start_thread() <void join_start_thread (apr_thread_t *start_thread_id) at ./server/mpm/worker/worker.c:1090>:
{   7}                             apr_thread_join()
{   7}                             ap_log_error()
{   6}                         signal_threads() <void signal_threads (int mode) at ./server/mpm/worker/worker.c:260>:
{   7}                             wakeup_listener() <void wakeup_listener (void) at ./server/mpm/worker/worker.c:231>:
{   8}                                 pthread_kill()
{   8}                                 kill()
{   7}                             ap_queue_interrupt_all() <apr_status_t ap_queue_interrupt_all (fd_queue_t *queue) at ./server/mpm/experimental/event/fdqueue.c:393>:
{   8}                                 apr_thread_mutex_lock()
{   8}                                 apr_thread_cond_broadcast()
{   8}                                 apr_thread_mutex_unlock()
{   7}                             ap_queue_info_term() <apr_status_t ap_queue_info_term (fd_queue_info_t *queue_info) at ./server/mpm/experimental/event/fdqueue.c:237>:
{   8}                                 apr_thread_mutex_lock()
{   8}                                 apr_thread_cond_broadcast()
{   8}                                 apr_thread_mutex_unlock()
{   7}                             close_worker_sockets() <void close_worker_sockets (void) at ./server/mpm/worker/worker.c:220>:
{   8}                                 apr_socket_close()
{   6}                         join_workers() <void join_workers (apr_thread_t *listener, apr_thread_t **threads) at ./server/mpm/worker/worker.c:1035>:
{   7}                             pthread_kill()
{   7}                             kill()
{   7}                             apr_sleep()
{   7}                             apr_time_make()
{   7}                             wakeup_listener() <void wakeup_listener (void) at ./server/mpm/worker/worker.c:231>:
{   8}                                 pthread_kill()
{   8}                                 kill()
{   7}                             ap_log_error()
{   7}                             apr_thread_join()
{   6}                         unblock_signal() <void unblock_signal (int sig) at ./server/mpm/worker/worker.c:560>:
{   7}                             sigemptyset()
{   7}                             sigaddset()
{   7}                             sigprocmask()
{   7}                             pthread_sigmask()
{   6}                         apr_signal()
{   6}                         dummy_signal_handler() <void dummy_signal_handler (int sig) at ./server/mpm/worker/worker.c:573>
{   6}                         ap_mpm_pod_check()
{   6}                         free()
{   5}                     fork()
{   5}                     ap_log_error()
{   5}                     ap_update_child_status_from_indexes()
{   5}                     apr_sleep()
{   5}                     apr_time_from_sec()
{   5}                     bindprocessor()
{   5}                     RAISE_SIGSTOP()
{   5}                     apr_signal()
{   5}                     just_die() <void just_die (int sig) at ./server/mpm/worker/worker.c:342>:
{   6}                         clean_child_exit():
{   7}                             apr_pool_destroy()
{   7}                             exit()
{   5}                     clean_child_exit():
{   6}                         apr_pool_destroy()
{   6}                         exit()
{   5}                     ap_register_extra_mpm_process() <void ap_register_extra_mpm_process (pid_t pid) at ./server/mpm_common.c:89>:
{   6}                         malloc()
{   2}         ap_mpm_pod_killpg() <void ap_mpm_pod_killpg (ap_pod_t *pod, int num) at ./server/mpm_common.c:669>:
{   3}             dummy_connection() <apr_status_t dummy_connection (ap_pod_t *pod) at ./server/mpm_common.c:579>:
{   4}                 apr_pool_create()
{   4}                 apr_socket_create()
{   4}                 ap_log_error()
{   4}                 apr_pool_destroy()
{   4}                 apr_socket_timeout_set()
{   4}                 apr_time_from_sec()
{   4}                 apr_socket_close()
{   4}                 apr_socket_connect()
{   4}                 APR_STATUS_IS_TIMEUP()
{   4}                 apr_pstrcat()
{   4}                 ap_get_server_version()
{   4}                 strlen()
{   4}                 apr_socket_send()
{   2}         ap_close_listeners()
{   2}         ap_relieve_child_processes() <void ap_relieve_child_processes (void) at ./server/mpm_common.c:277>:
{   3}             ap_mpm_query()
{   3}             MPM_CHILD_PID()
{   3}             reclaim_one_pid() <int reclaim_one_pid (pid_t pid, action_t action) at ./server/mpm_common.c:124>:
{   4}                 apr_proc_wait()
{   4}                 ap_log_error()
{   4}                 kill()
{   4}                 kill_thread()
{   3}             MPM_NOTE_CHILD_KILLED()
{   3}             AP_DEBUG_ASSERT()
{   3}             ap_unregister_extra_mpm_process() <int ap_unregister_extra_mpm_process (pid_t pid) at ./server/mpm_common.c:98>:
{   4}                 free()
{   2}         apr_time_from_sec()
{   2}         MPM_CHILD_PID()
{   2}         kill()
{   2}         apr_time_now()
{   2}         apr_signal()
{   2}         ap_mpm_pod_open()
{   2}         strncasecmp()
{   2}         ap_exists_config_define()
{   2}         apr_proc_detach()
{   2}         unixd_pre_config()
{   2}         ap_listen_pre_config()
{   2}         apr_cpystrn()
{   2}         ap_hook_open_logs()
{   2}         worker_open_logs() <int worker_open_logs (apr_pool_t *p, apr_pool_t *plog, apr_pool_t *ptemp, server_rec *s) at ./server/mpm/worker/worker.c:1851>
{   2}         ap_hook_pre_config()
{   2}         worker_pre_config() <int worker_pre_config (apr_pool_t *pconf, apr_pool_t *plog, apr_pool_t *ptemp) at ./server/mpm/worker/worker.c:1874>
{   2}         err() <void err (char *s) at ./support/ab.c:350>:
{   3}             fprintf()
{   3}             printf()
{   3}             exit()
{   2}         ap_check_cmd_context()
{   2}         atoi()
{   2}         AP_INIT_TAKE1()
{   2}         set_daemons_to_start() <const char *set_daemons_to_start (cmd_parms *cmd, void *dummy, const char *arg) at ./server/mpm/worker/worker.c:1985>
{   2}         set_min_spare_threads() <const char *set_min_spare_threads (cmd_parms *cmd, void *dummy, const char *arg) at ./server/mpm/worker/worker.c:1997>
{   2}         set_max_spare_threads() <const char *set_max_spare_threads (cmd_parms *cmd, void *dummy, const char *arg) at ./server/mpm/worker/worker.c:2019>
{   2}         set_max_clients() <const char *set_max_clients (cmd_parms *cmd, void *dummy, const char *arg) at ./server/mpm/worker/worker.c:2031>
{   2}         set_threads_per_child() <const char *set_threads_per_child (cmd_parms *cmd, void *dummy, const char *arg) at ./server/mpm/worker/worker.c:2091>
{   2}         set_server_limit() <const char *set_server_limit (cmd_parms *cmd, void *dummy, const char *arg) at ./server/mpm/worker/worker.c:2120>
{   2}         set_thread_limit() <const char *set_thread_limit (cmd_parms *cmd, void *dummy, const char *arg) at ./server/mpm/worker/worker.c:2160>
{   2}         ap_mpm_rewrite_args() <void ap_mpm_rewrite_args (process_rec *process) at ./server/mpm_common.c:989>:
{   3}             apr_array_make()
{   3}             apr_array_push()
{   3}             apr_getopt_init()
{   3}             apr_getopt()
{   3}             strcmp()
{   3}             apr_pstrdup()
{   3}             APR_REGISTER_OPTIONAL_FN()
{   3}             ap_signal_server() <int ap_signal_server (int *exit_status, apr_pool_t *pconf) at ./server/mpm_common.c:898>:
{   4}                 ap_read_pid()
{   4}                 ap_log_error()
{   4}                 kill()
{   4}                 apr_psprintf()
{   4}                 strcmp()
{   4}                 printf()
{   4}                 send_signal() <int send_signal (pid_t pid, int sig) at ./server/mpm_common.c:888>:
{   5}                     kill()
{   5}                     ap_log_error()
{   2}         worker_hooks() <void worker_hooks (apr_pool_t *p) at ./server/mpm/worker/worker.c:1969>
{   2}         set_signals() <void set_signals (void) at ./server/mpm/experimental/event/event.c:455>:
{   3}             ap_fatal_signal_setup() <apr_status_t ap_fatal_signal_setup (server_rec *s, apr_pool_t *in_pconf) at ./server/mpm_common.c:1186>:
{   4}                 sigemptyset()
{   4}                 sig_coredump() <void sig_coredump (int sig) at ./server/mpm_common.c:1145>:
{   5}                     apr_filepath_set()
{   5}                     apr_signal()
{   5}                     run_fatal_exception_hook() <void run_fatal_exception_hook (int sig) at ./server/mpm_common.c:1130>:
{   6}                         geteuid()
{   6}                         ap_run_fatal_exception()
{   5}                     getpid()
{   5}                     ap_log_error()
{   5}                     kill()
{   4}                 sigaction()
{   4}                 ap_log_error()
{   4}                 apr_signal()
{   4}                 getpid()
{   3}             sigemptyset()
{   3}             sig_term() <void sig_term (int sig) at ./server/mpm/experimental/event/event.c:445>:
{   4}                 ap_start_shutdown() <void ap_start_shutdown (int graceful) at ./server/mpm/experimental/event/event.c:419>:
{   3}             sigaction()
{   3}             ap_log_error()
{   3}             sigaddset()
{   3}             restart() <void restart (int sig) at ./server/mpm/experimental/event/event.c:450>:
{   4}                 ap_start_restart() <void ap_start_restart (int graceful) at ./server/mpm/experimental/event/event.c:434>:
{   3}             apr_signal()
{   2}         startup_children() <void startup_children (int number_to_start) at ./server/mpm/experimental/event/event.c:1589>:
{   3}             make_child() <int make_child (server_rec *s, int slot) at ./server/mpm/experimental/event/event.c:1532>:
{   4}                 set_signals() <void set_signals (void) at ./server/mpm/experimental/event/event.c:455>:
{   5}                     ap_fatal_signal_setup() <apr_status_t ap_fatal_signal_setup (server_rec *s, apr_pool_t *in_pconf) at ./server/mpm_common.c:1186>:
{   6}                         sigemptyset()
{   6}                         sig_coredump() <void sig_coredump (int sig) at ./server/mpm_common.c:1145>:
{   7}                             apr_filepath_set()
{   7}                             apr_signal()
{   7}                             run_fatal_exception_hook() <void run_fatal_exception_hook (int sig) at ./server/mpm_common.c:1130>:
{   8}                                 geteuid()
{   8}                                 ap_run_fatal_exception()
{   7}                             getpid()
{   7}                             ap_log_error()
{   7}                             kill()
{   6}                         sigaction()
{   6}                         ap_log_error()
{   6}                         apr_signal()
{   6}                         getpid()
{   5}                     sigemptyset()
{   5}                     sig_term() <void sig_term (int sig) at ./server/mpm/experimental/event/event.c:445>:
{   6}                         ap_start_shutdown() <void ap_start_shutdown (int graceful) at ./server/mpm/experimental/event/event.c:419>:
{   5}                     sigaction()
{   5}                     ap_log_error()
{   5}                     sigaddset()
{   5}                     restart() <void restart (int sig) at ./server/mpm/experimental/event/event.c:450>:
{   6}                         ap_start_restart() <void ap_start_restart (int graceful) at ./server/mpm/experimental/event/event.c:434>:
{   5}                     apr_signal()
{   4}                 getpid()
{   4}                 child_main() <void child_main (int child_num_arg) at ./server/mpm/experimental/event/event.c:1372>:
{   5}                     getpid()
{   5}                     ap_fatal_signal_child_setup() <apr_status_t ap_fatal_signal_child_setup (server_rec *s) at ./server/mpm_common.c:1180>:
{   6}                         getpid()
{   5}                     apr_pool_create()
{   5}                     ap_reopen_scoreboard() <apr_status_t ap_reopen_scoreboard (apr_pool_t *p, apr_shm_t **shm, int detached) at ./server/scoreboard.c:227>:
{   6}                         apr_shm_size_get()
{   6}                         ap_log_error()
{   6}                         apr_shm_detach()
{   5}                     unixd_setup_child()
{   5}                     clean_child_exit():
{   6}                         apr_pool_destroy()
{   6}                         exit()
{   5}                     ap_run_child_init()
{   5}                     apr_setup_signal_thread()
{   5}                     ap_log_error()
{   5}                     calloc()
{   5}                     apr_palloc()
{   5}                     apr_threadattr_create()
{   5}                     apr_threadattr_detach_set()
{   5}                     apr_threadattr_stacksize_set()
{   5}                     apr_thread_create()
{   5}                     start_threads() <void *APR_THREAD_FUNC start_threads (apr_thread_t *thd, void *dummy) at ./server/mpm/experimental/event/event.c:1190>:
{   6}                         apr_pcalloc()
{   6}                         ap_queue_init() <apr_status_t ap_queue_init (fd_queue_t *queue, int queue_capacity, apr_pool_t *a) at ./server/mpm/experimental/event/fdqueue.c:281>:
{   7}                             apr_thread_mutex_create()
{   7}                             apr_thread_cond_create()
{   7}                             apr_palloc()
{   7}                             apr_pool_cleanup_register()
{   7}                             ap_queue_destroy() <apr_status_t ap_queue_destroy (void *data) at ./server/mpm/worker/fdqueue.c:236>:
{   8}                                 apr_thread_cond_destroy()
{   8}                                 apr_thread_mutex_destroy()
{   7}                             ap_queue_destroy() <apr_status_t ap_queue_destroy (void *data) at ./server/mpm/experimental/event/fdqueue.c:265>:
{   8}                                 apr_thread_cond_destroy()
{   8}                                 apr_thread_mutex_destroy()
{   6}                         ap_log_error()
{   6}                         clean_child_exit():
{   7}                             apr_pool_destroy()
{   7}                             exit()
{   6}                         ap_queue_info_create() <apr_status_t ap_queue_info_create (fd_queue_info_t **queue_info, apr_pool_t *pool, int max_idlers) at ./server/mpm/experimental/event/fdqueue.c:62>:
{   7}                             apr_palloc()
{   7}                             memset()
{   7}                             apr_thread_mutex_create()
{   7}                             apr_thread_cond_create()
{   7}                             apr_pool_cleanup_register()
{   7}                             queue_info_cleanup() <apr_status_t queue_info_cleanup (void *data_) at ./server/mpm/worker/fdqueue.c:34>:
{   8}                                 apr_thread_cond_destroy()
{   8}                                 apr_thread_mutex_destroy()
{   8}                                 apr_atomic_casptr()
{   8}                                 apr_pool_destroy()
{   7}                             queue_info_cleanup() <apr_status_t queue_info_cleanup (void *data_) at ./server/mpm/experimental/event/fdqueue.c:40>:
{   8}                                 apr_thread_cond_destroy()
{   8}                                 apr_thread_mutex_destroy()
{   8}                                 apr_atomic_casptr()
{   8}                                 apr_pool_destroy()
{   6}                         malloc()
{   6}                         ap_update_child_status_from_indexes()
{   6}                         apr_thread_create()
{   6}                         worker_thread() <void *APR_THREAD_FUNC worker_thread (apr_thread_t *thd, void *dummy) at ./server/mpm/experimental/event/event.c:1066>:
{   7}                             free()
{   7}                             ap_update_child_status_from_indexes()
{   7}                             ap_queue_info_set_idle() <apr_status_t ap_queue_info_set_idle (fd_queue_info_t *queue_info, apr_pool_t *pool_to_recycle) at ./server/mpm/experimental/event/fdqueue.c:90>:
{   8}                                 apr_palloc()
{   8}                                 apr_atomic_casptr()
{   8}                                 apr_atomic_cas32()
{   8}                                 apr_thread_mutex_lock()
{   8}                                 apr_thread_cond_signal()
{   8}                                 apr_thread_mutex_unlock()
{   8}                                 ap_push_pool() <void ap_push_pool (fd_queue_info_t *queue_info, apr_pool_t *pool_to_recycle) at ./server/mpm/experimental/event/fdqueue.c:185>:
{   9}                                     apr_palloc()
{   9}                                     apr_atomic_casptr()
{   8}                                 apr_atomic_inc32()
{   8}                                 AP_DEBUG_ASSERT()
{   7}                             ap_log_error()
{   7}                             signal_threads() <void signal_threads (int mode) at ./server/mpm/experimental/event/event.c:299>:
{   8}                                 wakeup_listener() <void wakeup_listener (void) at ./server/mpm/experimental/event/event.c:270>:
{   9}                                     pthread_kill()
{   9}                                     kill()
{   8}                                 ap_queue_interrupt_all() <apr_status_t ap_queue_interrupt_all (fd_queue_t *queue) at ./server/mpm/experimental/event/fdqueue.c:393>:
{   9}                                     apr_thread_mutex_lock()
{   9}                                     apr_thread_cond_broadcast()
{   9}                                     apr_thread_mutex_unlock()
{   8}                                 ap_queue_info_term() <apr_status_t ap_queue_info_term (fd_queue_info_t *queue_info) at ./server/mpm/experimental/event/fdqueue.c:237>:
{   9}                                     apr_thread_mutex_lock()
{   9}                                     apr_thread_cond_broadcast()
{   9}                                     apr_thread_mutex_unlock()
{   8}                                 close_worker_sockets() <void close_worker_sockets (void) at ./server/mpm/experimental/event/event.c:259>:
{   9}                                     apr_socket_close()
{   7}                             ap_queue_pop() <apr_status_t ap_queue_pop (fd_queue_t *queue, apr_socket_t **sd, conn_state_t **cs, apr_pool_t **p) at ./server/mpm/experimental/event/fdqueue.c:350>:
{   8}                                 apr_thread_mutex_lock()
{   8}                                 ap_queue_empty()
{   8}                                 apr_thread_cond_wait()
{   8}                                 apr_thread_mutex_unlock()
{   7}                             APR_STATUS_IS_EOF()
{   7}                             APR_STATUS_IS_EINTR()
{   7}                             process_socket() <int process_socket (apr_pool_t *p, apr_socket_t *sock, conn_state_t *cs, int my_child_num, int my_thread_num) at ./server/mpm/experimental/event/event.c:559>:
{   8}                                 ID_FROM_CHILD_THREAD()
{   8}                                 ap_create_sb_handle()
{   8}                                 apr_os_sock_get()
{   8}                                 apr_time_now()
{   8}                                 apr_pcalloc()
{   8}                                 apr_bucket_alloc_create()
{   8}                                 ap_run_create_connection()
{   8}                                 ap_update_vhost_given_ip()
{   8}                                 ap_run_pre_connection()
{   8}                                 ap_log_error()
{   8}                                 ap_run_process_connection()
{   8}                                 ap_lingering_close()
{   8}                                 apr_bucket_alloc_destroy()
{   8}                                 apr_pool_clear()
{   8}                                 ap_push_pool() <void ap_push_pool (fd_queue_info_t *queue_info, apr_pool_t *pool_to_recycle) at ./server/mpm/experimental/event/fdqueue.c:185>:
{   9}                                     apr_palloc()
{   9}                                     apr_atomic_casptr()
{   8}                                 apr_thread_mutex_lock()
{   8}                                 APR_RING_INSERT_TAIL()
{   8}                                 apr_pollset_add()
{   8}                                 apr_thread_mutex_unlock()
{   8}                                 AP_DEBUG_ASSERT()
{   7}                             apr_thread_exit()
{   6}                         create_listener_thread() <void create_listener_thread (thread_starter *ts) at ./server/mpm/experimental/event/event.c:1163>:
{   7}                             malloc()
{   7}                             apr_thread_create()
{   7}                             listener_thread() <void *listener_thread (apr_thread_t *thd, void *dummy) at ./server/mpm/experimental/event/event.c:797>:
{   8}                                 apr_thread_pool_get()
{   8}                                 free()
{   8}                                 apr_thread_mutex_create()
{   8}                                 ap_log_error()
{   8}                                 signal_threads() <void signal_threads (int mode) at ./server/mpm/experimental/event/event.c:299>:
{   9}                                     wakeup_listener() <void wakeup_listener (void) at ./server/mpm/experimental/event/event.c:270>:
{  10}                                         pthread_kill()
{  10}                                         kill()
{   9}                                     ap_queue_interrupt_all() <apr_status_t ap_queue_interrupt_all (fd_queue_t *queue) at ./server/mpm/experimental/event/fdqueue.c:393>:
{  10}                                         apr_thread_mutex_lock()
{  10}                                         apr_thread_cond_broadcast()
{  10}                                         apr_thread_mutex_unlock()
{   9}                                     ap_queue_info_term() <apr_status_t ap_queue_info_term (fd_queue_info_t *queue_info) at ./server/mpm/experimental/event/fdqueue.c:237>:
{  10}                                         apr_thread_mutex_lock()
{  10}                                         apr_thread_cond_broadcast()
{  10}                                         apr_thread_mutex_unlock()
{   9}                                     close_worker_sockets() <void close_worker_sockets (void) at ./server/mpm/experimental/event/event.c:259>:
{  10}                                         apr_socket_close()
{   8}                                 APR_RING_INIT()
{   8}                                 apr_pollset_create()
{   8}                                 apr_pcalloc()
{   8}                                 apr_socket_opt_set()
{   8}                                 apr_pollset_add()
{   8}                                 unblock_signal() <void unblock_signal (int sig) at ./server/mpm/experimental/event/event.c:702>:
{   9}                                     sigemptyset()
{   9}                                     sigaddset()
{   9}                                     sigprocmask()
{   9}                                     pthread_sigmask()
{   8}                                 apr_signal()
{   8}                                 dummy_signal_handler() <void dummy_signal_handler (int sig) at ./server/mpm/experimental/event/event.c:715>
{   8}                                 check_infinite_requests() <void check_infinite_requests (void) at ./server/mpm/experimental/event/event.c:681>:
{   9}                                     signal_threads() <void signal_threads (int mode) at ./server/mpm/experimental/event/event.c:299>:
{  10}                                         wakeup_listener() <void wakeup_listener (void) at ./server/mpm/experimental/event/event.c:270>:
{  11}                                             pthread_kill()
{  11}                                             kill()
{  10}                                         ap_queue_interrupt_all() <apr_status_t ap_queue_interrupt_all (fd_queue_t *queue) at ./server/mpm/experimental/event/fdqueue.c:393>:
{  11}                                             apr_thread_mutex_lock()
{  11}                                             apr_thread_cond_broadcast()
{  11}                                             apr_thread_mutex_unlock()
{  10}                                         ap_queue_info_term() <apr_status_t ap_queue_info_term (fd_queue_info_t *queue_info) at ./server/mpm/experimental/event/fdqueue.c:237>:
{  11}                                             apr_thread_mutex_lock()
{  11}                                             apr_thread_cond_broadcast()
{  11}                                             apr_thread_mutex_unlock()
{  10}                                         close_worker_sockets() <void close_worker_sockets (void) at ./server/mpm/experimental/event/event.c:259>:
{  11}                                             apr_socket_close()
{   8}                                 apr_pollset_poll()
{   8}                                 APR_STATUS_IS_EINTR()
{   8}                                 APR_STATUS_IS_TIMEUP()
{   8}                                 get_worker() <int get_worker (int *have_idle_worker_p) at ./server/mpm/experimental/event/event.c:768>:
{   9}                                     ap_queue_info_wait_for_idler() <apr_status_t ap_queue_info_wait_for_idler (fd_queue_info_t *queue_info) at ./server/mpm/experimental/event/fdqueue.c:122>:
{  10}                                         apr_thread_mutex_lock()
{  10}                                         apr_thread_cond_wait()
{  10}                                         apr_thread_mutex_unlock()
{  10}                                         apr_atomic_dec32()
{  10}                                         apr_atomic_casptr()
{  10}                                         apr_atomic_add32()
{  10}                                         AP_DEBUG_ASSERT()
{  10}                                         apr_atomic_inc32()
{   9}                                     APR_STATUS_IS_EOF()
{   9}                                     ap_log_error()
{   9}                                     signal_threads() <void signal_threads (int mode) at ./server/mpm/experimental/event/event.c:299>:
{  10}                                         wakeup_listener() <void wakeup_listener (void) at ./server/mpm/experimental/event/event.c:270>:
{  11}                                             pthread_kill()
{  11}                                             kill()
{  10}                                         ap_queue_interrupt_all() <apr_status_t ap_queue_interrupt_all (fd_queue_t *queue) at ./server/mpm/experimental/event/fdqueue.c:393>:
{  11}                                             apr_thread_mutex_lock()
{  11}                                             apr_thread_cond_broadcast()
{  11}                                             apr_thread_mutex_unlock()
{  10}                                         ap_queue_info_term() <apr_status_t ap_queue_info_term (fd_queue_info_t *queue_info) at ./server/mpm/experimental/event/fdqueue.c:237>:
{  11}                                             apr_thread_mutex_lock()
{  11}                                             apr_thread_cond_broadcast()
{  11}                                             apr_thread_mutex_unlock()
{  10}                                         close_worker_sockets() <void close_worker_sockets (void) at ./server/mpm/experimental/event/event.c:259>:
{  11}                                             apr_socket_close()
{   8}                                 AP_DEBUG_ASSERT()
{   8}                                 apr_thread_mutex_lock()
{   8}                                 APR_RING_REMOVE()
{   8}                                 apr_thread_mutex_unlock()
{   8}                                 push2worker() <apr_status_t push2worker (const apr_pollfd_t *pfd, apr_pollset_t *pollset) at ./server/mpm/experimental/event/event.c:722>:
{   9}                                     apr_pollset_remove()
{   9}                                     ap_queue_push() <apr_status_t ap_queue_push (fd_queue_t *queue, apr_socket_t *sd, conn_state_t *cs, apr_pool_t *p) at ./server/mpm/experimental/event/fdqueue.c:316>:
{  10}                                         apr_thread_mutex_lock()
{  10}                                         AP_DEBUG_ASSERT()
{  10}                                         ap_queue_full()
{  10}                                         apr_thread_cond_signal()
{  10}                                         apr_thread_mutex_unlock()
{   9}                                     apr_bucket_alloc_destroy()
{   9}                                     apr_socket_close()
{   9}                                     ap_log_error()
{   9}                                     apr_pool_clear()
{   9}                                     ap_push_pool() <void ap_push_pool (fd_queue_info_t *queue_info, apr_pool_t *pool_to_recycle) at ./server/mpm/experimental/event/fdqueue.c:185>:
{  10}                                         apr_palloc()
{  10}                                         apr_atomic_casptr()
{   8}                                 ap_pop_pool() <void ap_pop_pool (apr_pool_t **recycled_pool, fd_queue_info_t *queue_info) at ./server/mpm/experimental/event/fdqueue.c:208>:
{   9}                                     apr_atomic_casptr()
{   8}                                 apr_allocator_create()
{   8}                                 apr_allocator_max_free_set()
{   8}                                 apr_pool_create_ex()
{   8}                                 apr_allocator_owner_set()
{   8}                                 apr_pool_tag()
{   8}                                 ap_queue_push() <apr_status_t ap_queue_push (fd_queue_t *queue, apr_socket_t *sd, conn_state_t *cs, apr_pool_t *p) at ./server/mpm/experimental/event/fdqueue.c:316>:
{   9}                                     apr_thread_mutex_lock()
{   9}                                     AP_DEBUG_ASSERT()
{   9}                                     ap_queue_full()
{   9}                                     apr_thread_cond_signal()
{   9}                                     apr_thread_mutex_unlock()
{   8}                                 apr_socket_close()
{   8}                                 apr_pool_clear()
{   8}                                 ap_push_pool() <void ap_push_pool (fd_queue_info_t *queue_info, apr_pool_t *pool_to_recycle) at ./server/mpm/experimental/event/fdqueue.c:185>:
{   9}                                     apr_palloc()
{   9}                                     apr_atomic_casptr()
{   8}                                 apr_time_now()
{   8}                                 APR_RING_FIRST()
{   8}                                 APR_RING_EMPTY()
{   8}                                 ap_close_listeners()
{   8}                                 ap_queue_term() <apr_status_t ap_queue_term (fd_queue_t *queue) at ./server/mpm/experimental/event/fdqueue.c:404>:
{   9}                                     apr_thread_mutex_lock()
{   9}                                     apr_thread_mutex_unlock()
{   9}                                     ap_queue_interrupt_all() <apr_status_t ap_queue_interrupt_all (fd_queue_t *queue) at ./server/mpm/experimental/event/fdqueue.c:393>:
{  10}                                         apr_thread_mutex_lock()
{  10}                                         apr_thread_cond_broadcast()
{  10}                                         apr_thread_mutex_unlock()
{   8}                                 kill()
{   8}                                 apr_thread_exit()
{   7}                             ap_log_error()
{   7}                             clean_child_exit():
{   8}                                 apr_pool_destroy()
{   8}                                 exit()
{   7}                             apr_os_thread_get()
{   6}                         apr_sleep()
{   6}                         apr_time_from_sec()
{   6}                         apr_thread_exit()
{   5}                     apr_signal_thread()
{   5}                     check_signal() <int check_signal (int signum) at ./server/mpm/experimental/event/event.c:1151>:
{   5}                     join_start_thread() <void join_start_thread (apr_thread_t *start_thread_id) at ./server/mpm/experimental/event/event.c:1357>:
{   6}                         apr_thread_join()
{   6}                         ap_log_error()
{   5}                     signal_threads() <void signal_threads (int mode) at ./server/mpm/experimental/event/event.c:299>:
{   6}                         wakeup_listener() <void wakeup_listener (void) at ./server/mpm/experimental/event/event.c:270>:
{   7}                             pthread_kill()
{   7}                             kill()
{   6}                         ap_queue_interrupt_all() <apr_status_t ap_queue_interrupt_all (fd_queue_t *queue) at ./server/mpm/experimental/event/fdqueue.c:393>:
{   7}                             apr_thread_mutex_lock()
{   7}                             apr_thread_cond_broadcast()
{   7}                             apr_thread_mutex_unlock()
{   6}                         ap_queue_info_term() <apr_status_t ap_queue_info_term (fd_queue_info_t *queue_info) at ./server/mpm/experimental/event/fdqueue.c:237>:
{   7}                             apr_thread_mutex_lock()
{   7}                             apr_thread_cond_broadcast()
{   7}                             apr_thread_mutex_unlock()
{   6}                         close_worker_sockets() <void close_worker_sockets (void) at ./server/mpm/experimental/event/event.c:259>:
{   7}                             apr_socket_close()
{   5}                     join_workers() <void join_workers (apr_thread_t *listener, apr_thread_t **threads) at ./server/mpm/experimental/event/event.c:1303>:
{   6}                         pthread_kill()
{   6}                         kill()
{   6}                         apr_sleep()
{   6}                         apr_time_make()
{   6}                         wakeup_listener() <void wakeup_listener (void) at ./server/mpm/experimental/event/event.c:270>:
{   7}                             pthread_kill()
{   7}                             kill()
{   6}                         ap_log_error()
{   6}                         apr_thread_join()
{   5}                     unblock_signal() <void unblock_signal (int sig) at ./server/mpm/experimental/event/event.c:702>:
{   6}                         sigemptyset()
{   6}                         sigaddset()
{   6}                         sigprocmask()
{   6}                         pthread_sigmask()
{   5}                     apr_signal()
{   5}                     dummy_signal_handler() <void dummy_signal_handler (int sig) at ./server/mpm/experimental/event/event.c:715>
{   5}                     ap_mpm_pod_check()
{   5}                     free()
{   4}                 fork()
{   4}                 ap_log_error()
{   4}                 ap_update_child_status_from_indexes()
{   4}                 apr_sleep()
{   4}                 apr_time_from_sec()
{   4}                 bindprocessor()
{   4}                 RAISE_SIGSTOP()
{   4}                 apr_signal()
{   4}                 just_die() <void just_die (int sig) at ./server/mpm/experimental/event/event.c:384>:
{   5}                     clean_child_exit():
{   6}                         apr_pool_destroy()
{   6}                         exit()
{   4}                 clean_child_exit():
{   5}                     apr_pool_destroy()
{   5}                     exit()
{   2}         server_main_loop() <void server_main_loop (int remaining_children_to_start) at ./server/mpm/experimental/event/event.c:1783>:
{   3}             ap_wait_or_timeout() <void ap_wait_or_timeout (apr_exit_why_e *status, int *exitcode, apr_proc_t *ret, apr_pool_t *p) at ./server/mpm_common.c:318>:
{   4}                 ap_run_monitor()
{   4}                 apr_proc_wait_all_procs()
{   4}                 APR_STATUS_IS_EINTR()
{   4}                 APR_STATUS_IS_CHILD_DONE()
{   4}                 reap_children() <int reap_children (int *exitcode, apr_exit_why_e *status) at ./server/mpm/prefork/prefork.c:304>:
{   5}                     kill()
{   5}                     ap_update_child_status_from_indexes()
{   4}                 apr_sleep()
{   3}             ap_process_child_status() <int ap_process_child_status (apr_proc_t *pid, apr_exit_why_e why, int status) at ./server/mpm_common.c:352>:
{   4}                 apr_signal_description_get()
{   4}                 APR_PROC_CHECK_EXIT()
{   4}                 ap_log_error()
{   4}                 APR_PROC_CHECK_SIGNALED()
{   4}                 APR_PROC_CHECK_CORE_DUMP()
{   3}             find_child_by_pid() <int find_child_by_pid (apr_proc_t *pid) at ./server/scoreboard.c:359>:
{   4}                 ap_mpm_query()
{   3}             ap_update_child_status_from_indexes()
{   3}             make_child() <int make_child (server_rec *s, int slot) at ./server/mpm/experimental/event/event.c:1532>:
{   4}                 set_signals() <void set_signals (void) at ./server/mpm/experimental/event/event.c:455>:
{   5}                     ap_fatal_signal_setup() <apr_status_t ap_fatal_signal_setup (server_rec *s, apr_pool_t *in_pconf) at ./server/mpm_common.c:1186>:
{   6}                         sigemptyset()
{   6}                         sig_coredump() <void sig_coredump (int sig) at ./server/mpm_common.c:1145>:
{   7}                             apr_filepath_set()
{   7}                             apr_signal()
{   7}                             run_fatal_exception_hook() <void run_fatal_exception_hook (int sig) at ./server/mpm_common.c:1130>:
{   8}                                 geteuid()
{   8}                                 ap_run_fatal_exception()
{   7}                             getpid()
{   7}                             ap_log_error()
{   7}                             kill()
{   6}                         sigaction()
{   6}                         ap_log_error()
{   6}                         apr_signal()
{   6}                         getpid()
{   5}                     sigemptyset()
{   5}                     sig_term() <void sig_term (int sig) at ./server/mpm/experimental/event/event.c:445>:
{   6}                         ap_start_shutdown() <void ap_start_shutdown (int graceful) at ./server/mpm/experimental/event/event.c:419>:
{   5}                     sigaction()
{   5}                     ap_log_error()
{   5}                     sigaddset()
{   5}                     restart() <void restart (int sig) at ./server/mpm/experimental/event/event.c:450>:
{   6}                         ap_start_restart() <void ap_start_restart (int graceful) at ./server/mpm/experimental/event/event.c:434>:
{   5}                     apr_signal()
{   4}                 getpid()
{   4}                 child_main() <void child_main (int child_num_arg) at ./server/mpm/experimental/event/event.c:1372>:
{   5}                     getpid()
{   5}                     ap_fatal_signal_child_setup() <apr_status_t ap_fatal_signal_child_setup (server_rec *s) at ./server/mpm_common.c:1180>:
{   6}                         getpid()
{   5}                     apr_pool_create()
{   5}                     ap_reopen_scoreboard() <apr_status_t ap_reopen_scoreboard (apr_pool_t *p, apr_shm_t **shm, int detached) at ./server/scoreboard.c:227>:
{   6}                         apr_shm_size_get()
{   6}                         ap_log_error()
{   6}                         apr_shm_detach()
{   5}                     unixd_setup_child()
{   5}                     clean_child_exit():
{   6}                         apr_pool_destroy()
{   6}                         exit()
{   5}                     ap_run_child_init()
{   5}                     apr_setup_signal_thread()
{   5}                     ap_log_error()
{   5}                     calloc()
{   5}                     apr_palloc()
{   5}                     apr_threadattr_create()
{   5}                     apr_threadattr_detach_set()
{   5}                     apr_threadattr_stacksize_set()
{   5}                     apr_thread_create()
{   5}                     start_threads() <void *APR_THREAD_FUNC start_threads (apr_thread_t *thd, void *dummy) at ./server/mpm/experimental/event/event.c:1190>:
{   6}                         apr_pcalloc()
{   6}                         ap_queue_init() <apr_status_t ap_queue_init (fd_queue_t *queue, int queue_capacity, apr_pool_t *a) at ./server/mpm/experimental/event/fdqueue.c:281>:
{   7}                             apr_thread_mutex_create()
{   7}                             apr_thread_cond_create()
{   7}                             apr_palloc()
{   7}                             apr_pool_cleanup_register()
{   7}                             ap_queue_destroy() <apr_status_t ap_queue_destroy (void *data) at ./server/mpm/worker/fdqueue.c:236>:
{   8}                                 apr_thread_cond_destroy()
{   8}                                 apr_thread_mutex_destroy()
{   7}                             ap_queue_destroy() <apr_status_t ap_queue_destroy (void *data) at ./server/mpm/experimental/event/fdqueue.c:265>:
{   8}                                 apr_thread_cond_destroy()
{   8}                                 apr_thread_mutex_destroy()
{   6}                         ap_log_error()
{   6}                         clean_child_exit():
{   7}                             apr_pool_destroy()
{   7}                             exit()
{   6}                         ap_queue_info_create() <apr_status_t ap_queue_info_create (fd_queue_info_t **queue_info, apr_pool_t *pool, int max_idlers) at ./server/mpm/experimental/event/fdqueue.c:62>:
{   7}                             apr_palloc()
{   7}                             memset()
{   7}                             apr_thread_mutex_create()
{   7}                             apr_thread_cond_create()
{   7}                             apr_pool_cleanup_register()
{   7}                             queue_info_cleanup() <apr_status_t queue_info_cleanup (void *data_) at ./server/mpm/worker/fdqueue.c:34>:
{   8}                                 apr_thread_cond_destroy()
{   8}                                 apr_thread_mutex_destroy()
{   8}                                 apr_atomic_casptr()
{   8}                                 apr_pool_destroy()
{   7}                             queue_info_cleanup() <apr_status_t queue_info_cleanup (void *data_) at ./server/mpm/experimental/event/fdqueue.c:40>:
{   8}                                 apr_thread_cond_destroy()
{   8}                                 apr_thread_mutex_destroy()
{   8}                                 apr_atomic_casptr()
{   8}                                 apr_pool_destroy()
{   6}                         malloc()
{   6}                         ap_update_child_status_from_indexes()
{   6}                         apr_thread_create()
{   6}                         worker_thread() <void *APR_THREAD_FUNC worker_thread (apr_thread_t *thd, void *dummy) at ./server/mpm/experimental/event/event.c:1066>:
{   7}                             free()
{   7}                             ap_update_child_status_from_indexes()
{   7}                             ap_queue_info_set_idle() <apr_status_t ap_queue_info_set_idle (fd_queue_info_t *queue_info, apr_pool_t *pool_to_recycle) at ./server/mpm/experimental/event/fdqueue.c:90>:
{   8}                                 apr_palloc()
{   8}                                 apr_atomic_casptr()
{   8}                                 apr_atomic_cas32()
{   8}                                 apr_thread_mutex_lock()
{   8}                                 apr_thread_cond_signal()
{   8}                                 apr_thread_mutex_unlock()
{   8}                                 ap_push_pool() <void ap_push_pool (fd_queue_info_t *queue_info, apr_pool_t *pool_to_recycle) at ./server/mpm/experimental/event/fdqueue.c:185>:
{   9}                                     apr_palloc()
{   9}                                     apr_atomic_casptr()
{   8}                                 apr_atomic_inc32()
{   8}                                 AP_DEBUG_ASSERT()
{   7}                             ap_log_error()
{   7}                             signal_threads() <void signal_threads (int mode) at ./server/mpm/experimental/event/event.c:299>:
{   8}                                 wakeup_listener() <void wakeup_listener (void) at ./server/mpm/experimental/event/event.c:270>:
{   9}                                     pthread_kill()
{   9}                                     kill()
{   8}                                 ap_queue_interrupt_all() <apr_status_t ap_queue_interrupt_all (fd_queue_t *queue) at ./server/mpm/experimental/event/fdqueue.c:393>:
{   9}                                     apr_thread_mutex_lock()
{   9}                                     apr_thread_cond_broadcast()
{   9}                                     apr_thread_mutex_unlock()
{   8}                                 ap_queue_info_term() <apr_status_t ap_queue_info_term (fd_queue_info_t *queue_info) at ./server/mpm/experimental/event/fdqueue.c:237>:
{   9}                                     apr_thread_mutex_lock()
{   9}                                     apr_thread_cond_broadcast()
{   9}                                     apr_thread_mutex_unlock()
{   8}                                 close_worker_sockets() <void close_worker_sockets (void) at ./server/mpm/experimental/event/event.c:259>:
{   9}                                     apr_socket_close()
{   7}                             ap_queue_pop() <apr_status_t ap_queue_pop (fd_queue_t *queue, apr_socket_t **sd, conn_state_t **cs, apr_pool_t **p) at ./server/mpm/experimental/event/fdqueue.c:350>:
{   8}                                 apr_thread_mutex_lock()
{   8}                                 ap_queue_empty()
{   8}                                 apr_thread_cond_wait()
{   8}                                 apr_thread_mutex_unlock()
{   7}                             APR_STATUS_IS_EOF()
{   7}                             APR_STATUS_IS_EINTR()
{   7}                             process_socket() <int process_socket (apr_pool_t *p, apr_socket_t *sock, conn_state_t *cs, int my_child_num, int my_thread_num) at ./server/mpm/experimental/event/event.c:559>:
{   8}                                 ID_FROM_CHILD_THREAD()
{   8}                                 ap_create_sb_handle()
{   8}                                 apr_os_sock_get()
{   8}                                 apr_time_now()
{   8}                                 apr_pcalloc()
{   8}                                 apr_bucket_alloc_create()
{   8}                                 ap_run_create_connection()
{   8}                                 ap_update_vhost_given_ip()
{   8}                                 ap_run_pre_connection()
{   8}                                 ap_log_error()
{   8}                                 ap_run_process_connection()
{   8}                                 ap_lingering_close()
{   8}                                 apr_bucket_alloc_destroy()
{   8}                                 apr_pool_clear()
{   8}                                 ap_push_pool() <void ap_push_pool (fd_queue_info_t *queue_info, apr_pool_t *pool_to_recycle) at ./server/mpm/experimental/event/fdqueue.c:185>:
{   9}                                     apr_palloc()
{   9}                                     apr_atomic_casptr()
{   8}                                 apr_thread_mutex_lock()
{   8}                                 APR_RING_INSERT_TAIL()
{   8}                                 apr_pollset_add()
{   8}                                 apr_thread_mutex_unlock()
{   8}                                 AP_DEBUG_ASSERT()
{   7}                             apr_thread_exit()
{   6}                         create_listener_thread() <void create_listener_thread (thread_starter *ts) at ./server/mpm/experimental/event/event.c:1163>:
{   7}                             malloc()
{   7}                             apr_thread_create()
{   7}                             listener_thread() <void *listener_thread (apr_thread_t *thd, void *dummy) at ./server/mpm/experimental/event/event.c:797>:
{   8}                                 apr_thread_pool_get()
{   8}                                 free()
{   8}                                 apr_thread_mutex_create()
{   8}                                 ap_log_error()
{   8}                                 signal_threads() <void signal_threads (int mode) at ./server/mpm/experimental/event/event.c:299>:
{   9}                                     wakeup_listener() <void wakeup_listener (void) at ./server/mpm/experimental/event/event.c:270>:
{  10}                                         pthread_kill()
{  10}                                         kill()
{   9}                                     ap_queue_interrupt_all() <apr_status_t ap_queue_interrupt_all (fd_queue_t *queue) at ./server/mpm/experimental/event/fdqueue.c:393>:
{  10}                                         apr_thread_mutex_lock()
{  10}                                         apr_thread_cond_broadcast()
{  10}                                         apr_thread_mutex_unlock()
{   9}                                     ap_queue_info_term() <apr_status_t ap_queue_info_term (fd_queue_info_t *queue_info) at ./server/mpm/experimental/event/fdqueue.c:237>:
{  10}                                         apr_thread_mutex_lock()
{  10}                                         apr_thread_cond_broadcast()
{  10}                                         apr_thread_mutex_unlock()
{   9}                                     close_worker_sockets() <void close_worker_sockets (void) at ./server/mpm/experimental/event/event.c:259>:
{  10}                                         apr_socket_close()
{   8}                                 APR_RING_INIT()
{   8}                                 apr_pollset_create()
{   8}                                 apr_pcalloc()
{   8}                                 apr_socket_opt_set()
{   8}                                 apr_pollset_add()
{   8}                                 unblock_signal() <void unblock_signal (int sig) at ./server/mpm/experimental/event/event.c:702>:
{   9}                                     sigemptyset()
{   9}                                     sigaddset()
{   9}                                     sigprocmask()
{   9}                                     pthread_sigmask()
{   8}                                 apr_signal()
{   8}                                 dummy_signal_handler() <void dummy_signal_handler (int sig) at ./server/mpm/experimental/event/event.c:715>
{   8}                                 check_infinite_requests() <void check_infinite_requests (void) at ./server/mpm/experimental/event/event.c:681>:
{   9}                                     signal_threads() <void signal_threads (int mode) at ./server/mpm/experimental/event/event.c:299>:
{  10}                                         wakeup_listener() <void wakeup_listener (void) at ./server/mpm/experimental/event/event.c:270>:
{  11}                                             pthread_kill()
{  11}                                             kill()
{  10}                                         ap_queue_interrupt_all() <apr_status_t ap_queue_interrupt_all (fd_queue_t *queue) at ./server/mpm/experimental/event/fdqueue.c:393>:
{  11}                                             apr_thread_mutex_lock()
{  11}                                             apr_thread_cond_broadcast()
{  11}                                             apr_thread_mutex_unlock()
{  10}                                         ap_queue_info_term() <apr_status_t ap_queue_info_term (fd_queue_info_t *queue_info) at ./server/mpm/experimental/event/fdqueue.c:237>:
{  11}                                             apr_thread_mutex_lock()
{  11}                                             apr_thread_cond_broadcast()
{  11}                                             apr_thread_mutex_unlock()
{  10}                                         close_worker_sockets() <void close_worker_sockets (void) at ./server/mpm/experimental/event/event.c:259>:
{  11}                                             apr_socket_close()
{   8}                                 apr_pollset_poll()
{   8}                                 APR_STATUS_IS_EINTR()
{   8}                                 APR_STATUS_IS_TIMEUP()
{   8}                                 get_worker() <int get_worker (int *have_idle_worker_p) at ./server/mpm/experimental/event/event.c:768>:
{   9}                                     ap_queue_info_wait_for_idler() <apr_status_t ap_queue_info_wait_for_idler (fd_queue_info_t *queue_info) at ./server/mpm/experimental/event/fdqueue.c:122>:
{  10}                                         apr_thread_mutex_lock()
{  10}                                         apr_thread_cond_wait()
{  10}                                         apr_thread_mutex_unlock()
{  10}                                         apr_atomic_dec32()
{  10}                                         apr_atomic_casptr()
{  10}                                         apr_atomic_add32()
{  10}                                         AP_DEBUG_ASSERT()
{  10}                                         apr_atomic_inc32()
{   9}                                     APR_STATUS_IS_EOF()
{   9}                                     ap_log_error()
{   9}                                     signal_threads() <void signal_threads (int mode) at ./server/mpm/experimental/event/event.c:299>:
{  10}                                         wakeup_listener() <void wakeup_listener (void) at ./server/mpm/experimental/event/event.c:270>:
{  11}                                             pthread_kill()
{  11}                                             kill()
{  10}                                         ap_queue_interrupt_all() <apr_status_t ap_queue_interrupt_all (fd_queue_t *queue) at ./server/mpm/experimental/event/fdqueue.c:393>:
{  11}                                             apr_thread_mutex_lock()
{  11}                                             apr_thread_cond_broadcast()
{  11}                                             apr_thread_mutex_unlock()
{  10}                                         ap_queue_info_term() <apr_status_t ap_queue_info_term (fd_queue_info_t *queue_info) at ./server/mpm/experimental/event/fdqueue.c:237>:
{  11}                                             apr_thread_mutex_lock()
{  11}                                             apr_thread_cond_broadcast()
{  11}                                             apr_thread_mutex_unlock()
{  10}                                         close_worker_sockets() <void close_worker_sockets (void) at ./server/mpm/experimental/event/event.c:259>:
{  11}                                             apr_socket_close()
{   8}                                 AP_DEBUG_ASSERT()
{   8}                                 apr_thread_mutex_lock()
{   8}                                 APR_RING_REMOVE()
{   8}                                 apr_thread_mutex_unlock()
{   8}                                 push2worker() <apr_status_t push2worker (const apr_pollfd_t *pfd, apr_pollset_t *pollset) at ./server/mpm/experimental/event/event.c:722>:
{   9}                                     apr_pollset_remove()
{   9}                                     ap_queue_push() <apr_status_t ap_queue_push (fd_queue_t *queue, apr_socket_t *sd, conn_state_t *cs, apr_pool_t *p) at ./server/mpm/experimental/event/fdqueue.c:316>:
{  10}                                         apr_thread_mutex_lock()
{  10}                                         AP_DEBUG_ASSERT()
{  10}                                         ap_queue_full()
{  10}                                         apr_thread_cond_signal()
{  10}                                         apr_thread_mutex_unlock()
{   9}                                     apr_bucket_alloc_destroy()
{   9}                                     apr_socket_close()
{   9}                                     ap_log_error()
{   9}                                     apr_pool_clear()
{   9}                                     ap_push_pool() <void ap_push_pool (fd_queue_info_t *queue_info, apr_pool_t *pool_to_recycle) at ./server/mpm/experimental/event/fdqueue.c:185>:
{  10}                                         apr_palloc()
{  10}                                         apr_atomic_casptr()
{   8}                                 ap_pop_pool() <void ap_pop_pool (apr_pool_t **recycled_pool, fd_queue_info_t *queue_info) at ./server/mpm/experimental/event/fdqueue.c:208>:
{   9}                                     apr_atomic_casptr()
{   8}                                 apr_allocator_create()
{   8}                                 apr_allocator_max_free_set()
{   8}                                 apr_pool_create_ex()
{   8}                                 apr_allocator_owner_set()
{   8}                                 apr_pool_tag()
{   8}                                 ap_queue_push() <apr_status_t ap_queue_push (fd_queue_t *queue, apr_socket_t *sd, conn_state_t *cs, apr_pool_t *p) at ./server/mpm/experimental/event/fdqueue.c:316>:
{   9}                                     apr_thread_mutex_lock()
{   9}                                     AP_DEBUG_ASSERT()
{   9}                                     ap_queue_full()
{   9}                                     apr_thread_cond_signal()
{   9}                                     apr_thread_mutex_unlock()
{   8}                                 apr_socket_close()
{   8}                                 apr_pool_clear()
{   8}                                 ap_push_pool() <void ap_push_pool (fd_queue_info_t *queue_info, apr_pool_t *pool_to_recycle) at ./server/mpm/experimental/event/fdqueue.c:185>:
{   9}                                     apr_palloc()
{   9}                                     apr_atomic_casptr()
{   8}                                 apr_time_now()
{   8}                                 APR_RING_FIRST()
{   8}                                 APR_RING_EMPTY()
{   8}                                 ap_close_listeners()
{   8}                                 ap_queue_term() <apr_status_t ap_queue_term (fd_queue_t *queue) at ./server/mpm/experimental/event/fdqueue.c:404>:
{   9}                                     apr_thread_mutex_lock()
{   9}                                     apr_thread_mutex_unlock()
{   9}                                     ap_queue_interrupt_all() <apr_status_t ap_queue_interrupt_all (fd_queue_t *queue) at ./server/mpm/experimental/event/fdqueue.c:393>:
{  10}                                         apr_thread_mutex_lock()
{  10}                                         apr_thread_cond_broadcast()
{  10}                                         apr_thread_mutex_unlock()
{   8}                                 kill()
{   8}                                 apr_thread_exit()
{   7}                             ap_log_error()
{   7}                             clean_child_exit():
{   8}                                 apr_pool_destroy()
{   8}                                 exit()
{   7}                             apr_os_thread_get()
{   6}                         apr_sleep()
{   6}                         apr_time_from_sec()
{   6}                         apr_thread_exit()
{   5}                     apr_signal_thread()
{   5}                     check_signal() <int check_signal (int signum) at ./server/mpm/experimental/event/event.c:1151>:
{   5}                     join_start_thread() <void join_start_thread (apr_thread_t *start_thread_id) at ./server/mpm/experimental/event/event.c:1357>:
{   6}                         apr_thread_join()
{   6}                         ap_log_error()
{   5}                     signal_threads() <void signal_threads (int mode) at ./server/mpm/experimental/event/event.c:299>:
{   6}                         wakeup_listener() <void wakeup_listener (void) at ./server/mpm/experimental/event/event.c:270>:
{   7}                             pthread_kill()
{   7}                             kill()
{   6}                         ap_queue_interrupt_all() <apr_status_t ap_queue_interrupt_all (fd_queue_t *queue) at ./server/mpm/experimental/event/fdqueue.c:393>:
{   7}                             apr_thread_mutex_lock()
{   7}                             apr_thread_cond_broadcast()
{   7}                             apr_thread_mutex_unlock()
{   6}                         ap_queue_info_term() <apr_status_t ap_queue_info_term (fd_queue_info_t *queue_info) at ./server/mpm/experimental/event/fdqueue.c:237>:
{   7}                             apr_thread_mutex_lock()
{   7}                             apr_thread_cond_broadcast()
{   7}                             apr_thread_mutex_unlock()
{   6}                         close_worker_sockets() <void close_worker_sockets (void) at ./server/mpm/experimental/event/event.c:259>:
{   7}                             apr_socket_close()
{   5}                     join_workers() <void join_workers (apr_thread_t *listener, apr_thread_t **threads) at ./server/mpm/experimental/event/event.c:1303>:
{   6}                         pthread_kill()
{   6}                         kill()
{   6}                         apr_sleep()
{   6}                         apr_time_make()
{   6}                         wakeup_listener() <void wakeup_listener (void) at ./server/mpm/experimental/event/event.c:270>:
{   7}                             pthread_kill()
{   7}                             kill()
{   6}                         ap_log_error()
{   6}                         apr_thread_join()
{   5}                     unblock_signal() <void unblock_signal (int sig) at ./server/mpm/experimental/event/event.c:702>:
{   6}                         sigemptyset()
{   6}                         sigaddset()
{   6}                         sigprocmask()
{   6}                         pthread_sigmask()
{   5}                     apr_signal()
{   5}                     dummy_signal_handler() <void dummy_signal_handler (int sig) at ./server/mpm/experimental/event/event.c:715>
{   5}                     ap_mpm_pod_check()
{   5}                     free()
{   4}                 fork()
{   4}                 ap_log_error()
{   4}                 ap_update_child_status_from_indexes()
{   4}                 apr_sleep()
{   4}                 apr_time_from_sec()
{   4}                 bindprocessor()
{   4}                 RAISE_SIGSTOP()
{   4}                 apr_signal()
{   4}                 just_die() <void just_die (int sig) at ./server/mpm/experimental/event/event.c:384>:
{   5}                     clean_child_exit():
{   6}                         apr_pool_destroy()
{   6}                         exit()
{   4}                 clean_child_exit():
{   5}                     apr_pool_destroy()
{   5}                     exit()
{   3}             apr_proc_other_child_alert()
{   3}             ap_log_error()
{   3}             startup_children() <void startup_children (int number_to_start) at ./server/mpm/experimental/event/event.c:1589>:
{   4}                 make_child() <int make_child (server_rec *s, int slot) at ./server/mpm/experimental/event/event.c:1532>:
{   5}                     set_signals() <void set_signals (void) at ./server/mpm/experimental/event/event.c:455>:
{   6}                         ap_fatal_signal_setup() <apr_status_t ap_fatal_signal_setup (server_rec *s, apr_pool_t *in_pconf) at ./server/mpm_common.c:1186>:
{   7}                             sigemptyset()
{   7}                             sig_coredump() <void sig_coredump (int sig) at ./server/mpm_common.c:1145>:
{   8}                                 apr_filepath_set()
{   8}                                 apr_signal()
{   8}                                 run_fatal_exception_hook() <void run_fatal_exception_hook (int sig) at ./server/mpm_common.c:1130>:
{   9}                                     geteuid()
{   9}                                     ap_run_fatal_exception()
{   8}                                 getpid()
{   8}                                 ap_log_error()
{   8}                                 kill()
{   7}                             sigaction()
{   7}                             ap_log_error()
{   7}                             apr_signal()
{   7}                             getpid()
{   6}                         sigemptyset()
{   6}                         sig_term() <void sig_term (int sig) at ./server/mpm/experimental/event/event.c:445>:
{   7}                             ap_start_shutdown() <void ap_start_shutdown (int graceful) at ./server/mpm/experimental/event/event.c:419>:
{   6}                         sigaction()
{   6}                         ap_log_error()
{   6}                         sigaddset()
{   6}                         restart() <void restart (int sig) at ./server/mpm/experimental/event/event.c:450>:
{   7}                             ap_start_restart() <void ap_start_restart (int graceful) at ./server/mpm/experimental/event/event.c:434>:
{   6}                         apr_signal()
{   5}                     getpid()
{   5}                     child_main() <void child_main (int child_num_arg) at ./server/mpm/experimental/event/event.c:1372>:
{   6}                         getpid()
{   6}                         ap_fatal_signal_child_setup() <apr_status_t ap_fatal_signal_child_setup (server_rec *s) at ./server/mpm_common.c:1180>:
{   7}                             getpid()
{   6}                         apr_pool_create()
{   6}                         ap_reopen_scoreboard() <apr_status_t ap_reopen_scoreboard (apr_pool_t *p, apr_shm_t **shm, int detached) at ./server/scoreboard.c:227>:
{   7}                             apr_shm_size_get()
{   7}                             ap_log_error()
{   7}                             apr_shm_detach()
{   6}                         unixd_setup_child()
{   6}                         clean_child_exit():
{   7}                             apr_pool_destroy()
{   7}                             exit()
{   6}                         ap_run_child_init()
{   6}                         apr_setup_signal_thread()
{   6}                         ap_log_error()
{   6}                         calloc()
{   6}                         apr_palloc()
{   6}                         apr_threadattr_create()
{   6}                         apr_threadattr_detach_set()
{   6}                         apr_threadattr_stacksize_set()
{   6}                         apr_thread_create()
{   6}                         start_threads() <void *APR_THREAD_FUNC start_threads (apr_thread_t *thd, void *dummy) at ./server/mpm/experimental/event/event.c:1190>:
{   7}                             apr_pcalloc()
{   7}                             ap_queue_init() <apr_status_t ap_queue_init (fd_queue_t *queue, int queue_capacity, apr_pool_t *a) at ./server/mpm/experimental/event/fdqueue.c:281>:
{   8}                                 apr_thread_mutex_create()
{   8}                                 apr_thread_cond_create()
{   8}                                 apr_palloc()
{   8}                                 apr_pool_cleanup_register()
{   8}                                 ap_queue_destroy() <apr_status_t ap_queue_destroy (void *data) at ./server/mpm/worker/fdqueue.c:236>:
{   9}                                     apr_thread_cond_destroy()
{   9}                                     apr_thread_mutex_destroy()
{   8}                                 ap_queue_destroy() <apr_status_t ap_queue_destroy (void *data) at ./server/mpm/experimental/event/fdqueue.c:265>:
{   9}                                     apr_thread_cond_destroy()
{   9}                                     apr_thread_mutex_destroy()
{   7}                             ap_log_error()
{   7}                             clean_child_exit():
{   8}                                 apr_pool_destroy()
{   8}                                 exit()
{   7}                             ap_queue_info_create() <apr_status_t ap_queue_info_create (fd_queue_info_t **queue_info, apr_pool_t *pool, int max_idlers) at ./server/mpm/experimental/event/fdqueue.c:62>:
{   8}                                 apr_palloc()
{   8}                                 memset()
{   8}                                 apr_thread_mutex_create()
{   8}                                 apr_thread_cond_create()
{   8}                                 apr_pool_cleanup_register()
{   8}                                 queue_info_cleanup() <apr_status_t queue_info_cleanup (void *data_) at ./server/mpm/worker/fdqueue.c:34>:
{   9}                                     apr_thread_cond_destroy()
{   9}                                     apr_thread_mutex_destroy()
{   9}                                     apr_atomic_casptr()
{   9}                                     apr_pool_destroy()
{   8}                                 queue_info_cleanup() <apr_status_t queue_info_cleanup (void *data_) at ./server/mpm/experimental/event/fdqueue.c:40>:
{   9}                                     apr_thread_cond_destroy()
{   9}                                     apr_thread_mutex_destroy()
{   9}                                     apr_atomic_casptr()
{   9}                                     apr_pool_destroy()
{   7}                             malloc()
{   7}                             ap_update_child_status_from_indexes()
{   7}                             apr_thread_create()
{   7}                             worker_thread() <void *APR_THREAD_FUNC worker_thread (apr_thread_t *thd, void *dummy) at ./server/mpm/experimental/event/event.c:1066>:
{   8}                                 free()
{   8}                                 ap_update_child_status_from_indexes()
{   8}                                 ap_queue_info_set_idle() <apr_status_t ap_queue_info_set_idle (fd_queue_info_t *queue_info, apr_pool_t *pool_to_recycle) at ./server/mpm/experimental/event/fdqueue.c:90>:
{   9}                                     apr_palloc()
{   9}                                     apr_atomic_casptr()
{   9}                                     apr_atomic_cas32()
{   9}                                     apr_thread_mutex_lock()
{   9}                                     apr_thread_cond_signal()
{   9}                                     apr_thread_mutex_unlock()
{   9}                                     ap_push_pool() <void ap_push_pool (fd_queue_info_t *queue_info, apr_pool_t *pool_to_recycle) at ./server/mpm/experimental/event/fdqueue.c:185>:
{  10}                                         apr_palloc()
{  10}                                         apr_atomic_casptr()
{   9}                                     apr_atomic_inc32()
{   9}                                     AP_DEBUG_ASSERT()
{   8}                                 ap_log_error()
{   8}                                 signal_threads() <void signal_threads (int mode) at ./server/mpm/experimental/event/event.c:299>:
{   9}                                     wakeup_listener() <void wakeup_listener (void) at ./server/mpm/experimental/event/event.c:270>:
{  10}                                         pthread_kill()
{  10}                                         kill()
{   9}                                     ap_queue_interrupt_all() <apr_status_t ap_queue_interrupt_all (fd_queue_t *queue) at ./server/mpm/experimental/event/fdqueue.c:393>:
{  10}                                         apr_thread_mutex_lock()
{  10}                                         apr_thread_cond_broadcast()
{  10}                                         apr_thread_mutex_unlock()
{   9}                                     ap_queue_info_term() <apr_status_t ap_queue_info_term (fd_queue_info_t *queue_info) at ./server/mpm/experimental/event/fdqueue.c:237>:
{  10}                                         apr_thread_mutex_lock()
{  10}                                         apr_thread_cond_broadcast()
{  10}                                         apr_thread_mutex_unlock()
{   9}                                     close_worker_sockets() <void close_worker_sockets (void) at ./server/mpm/experimental/event/event.c:259>:
{  10}                                         apr_socket_close()
{   8}                                 ap_queue_pop() <apr_status_t ap_queue_pop (fd_queue_t *queue, apr_socket_t **sd, conn_state_t **cs, apr_pool_t **p) at ./server/mpm/experimental/event/fdqueue.c:350>:
{   9}                                     apr_thread_mutex_lock()
{   9}                                     ap_queue_empty()
{   9}                                     apr_thread_cond_wait()
{   9}                                     apr_thread_mutex_unlock()
{   8}                                 APR_STATUS_IS_EOF()
{   8}                                 APR_STATUS_IS_EINTR()
{   8}                                 process_socket() <int process_socket (apr_pool_t *p, apr_socket_t *sock, conn_state_t *cs, int my_child_num, int my_thread_num) at ./server/mpm/experimental/event/event.c:559>:
{   9}                                     ID_FROM_CHILD_THREAD()
{   9}                                     ap_create_sb_handle()
{   9}                                     apr_os_sock_get()
{   9}                                     apr_time_now()
{   9}                                     apr_pcalloc()
{   9}                                     apr_bucket_alloc_create()
{   9}                                     ap_run_create_connection()
{   9}                                     ap_update_vhost_given_ip()
{   9}                                     ap_run_pre_connection()
{   9}                                     ap_log_error()
{   9}                                     ap_run_process_connection()
{   9}                                     ap_lingering_close()
{   9}                                     apr_bucket_alloc_destroy()
{   9}                                     apr_pool_clear()
{   9}                                     ap_push_pool() <void ap_push_pool (fd_queue_info_t *queue_info, apr_pool_t *pool_to_recycle) at ./server/mpm/experimental/event/fdqueue.c:185>:
{  10}                                         apr_palloc()
{  10}                                         apr_atomic_casptr()
{   9}                                     apr_thread_mutex_lock()
{   9}                                     APR_RING_INSERT_TAIL()
{   9}                                     apr_pollset_add()
{   9}                                     apr_thread_mutex_unlock()
{   9}                                     AP_DEBUG_ASSERT()
{   8}                                 apr_thread_exit()
{   7}                             create_listener_thread() <void create_listener_thread (thread_starter *ts) at ./server/mpm/experimental/event/event.c:1163>:
{   8}                                 malloc()
{   8}                                 apr_thread_create()
{   8}                                 listener_thread() <void *listener_thread (apr_thread_t *thd, void *dummy) at ./server/mpm/experimental/event/event.c:797>:
{   9}                                     apr_thread_pool_get()
{   9}                                     free()
{   9}                                     apr_thread_mutex_create()
{   9}                                     ap_log_error()
{   9}                                     signal_threads() <void signal_threads (int mode) at ./server/mpm/experimental/event/event.c:299>:
{  10}                                         wakeup_listener() <void wakeup_listener (void) at ./server/mpm/experimental/event/event.c:270>:
{  11}                                             pthread_kill()
{  11}                                             kill()
{  10}                                         ap_queue_interrupt_all() <apr_status_t ap_queue_interrupt_all (fd_queue_t *queue) at ./server/mpm/experimental/event/fdqueue.c:393>:
{  11}                                             apr_thread_mutex_lock()
{  11}                                             apr_thread_cond_broadcast()
{  11}                                             apr_thread_mutex_unlock()
{  10}                                         ap_queue_info_term() <apr_status_t ap_queue_info_term (fd_queue_info_t *queue_info) at ./server/mpm/experimental/event/fdqueue.c:237>:
{  11}                                             apr_thread_mutex_lock()
{  11}                                             apr_thread_cond_broadcast()
{  11}                                             apr_thread_mutex_unlock()
{  10}                                         close_worker_sockets() <void close_worker_sockets (void) at ./server/mpm/experimental/event/event.c:259>:
{  11}                                             apr_socket_close()
{   9}                                     APR_RING_INIT()
{   9}                                     apr_pollset_create()
{   9}                                     apr_pcalloc()
{   9}                                     apr_socket_opt_set()
{   9}                                     apr_pollset_add()
{   9}                                     unblock_signal() <void unblock_signal (int sig) at ./server/mpm/experimental/event/event.c:702>:
{  10}                                         sigemptyset()
{  10}                                         sigaddset()
{  10}                                         sigprocmask()
{  10}                                         pthread_sigmask()
{   9}                                     apr_signal()
{   9}                                     dummy_signal_handler() <void dummy_signal_handler (int sig) at ./server/mpm/experimental/event/event.c:715>
{   9}                                     check_infinite_requests() <void check_infinite_requests (void) at ./server/mpm/experimental/event/event.c:681>:
{  10}                                         signal_threads() <void signal_threads (int mode) at ./server/mpm/experimental/event/event.c:299>:
{  11}                                             wakeup_listener() <void wakeup_listener (void) at ./server/mpm/experimental/event/event.c:270>:
{  12}                                                 pthread_kill()
{  12}                                                 kill()
{  11}                                             ap_queue_interrupt_all() <apr_status_t ap_queue_interrupt_all (fd_queue_t *queue) at ./server/mpm/experimental/event/fdqueue.c:393>:
{  12}                                                 apr_thread_mutex_lock()
{  12}                                                 apr_thread_cond_broadcast()
{  12}                                                 apr_thread_mutex_unlock()
{  11}                                             ap_queue_info_term() <apr_status_t ap_queue_info_term (fd_queue_info_t *queue_info) at ./server/mpm/experimental/event/fdqueue.c:237>:
{  12}                                                 apr_thread_mutex_lock()
{  12}                                                 apr_thread_cond_broadcast()
{  12}                                                 apr_thread_mutex_unlock()
{  11}                                             close_worker_sockets() <void close_worker_sockets (void) at ./server/mpm/experimental/event/event.c:259>:
{  12}                                                 apr_socket_close()
{   9}                                     apr_pollset_poll()
{   9}                                     APR_STATUS_IS_EINTR()
{   9}                                     APR_STATUS_IS_TIMEUP()
{   9}                                     get_worker() <int get_worker (int *have_idle_worker_p) at ./server/mpm/experimental/event/event.c:768>:
{  10}                                         ap_queue_info_wait_for_idler() <apr_status_t ap_queue_info_wait_for_idler (fd_queue_info_t *queue_info) at ./server/mpm/experimental/event/fdqueue.c:122>:
{  11}                                             apr_thread_mutex_lock()
{  11}                                             apr_thread_cond_wait()
{  11}                                             apr_thread_mutex_unlock()
{  11}                                             apr_atomic_dec32()
{  11}                                             apr_atomic_casptr()
{  11}                                             apr_atomic_add32()
{  11}                                             AP_DEBUG_ASSERT()
{  11}                                             apr_atomic_inc32()
{  10}                                         APR_STATUS_IS_EOF()
{  10}                                         ap_log_error()
{  10}                                         signal_threads() <void signal_threads (int mode) at ./server/mpm/experimental/event/event.c:299>:
{  11}                                             wakeup_listener() <void wakeup_listener (void) at ./server/mpm/experimental/event/event.c:270>:
{  12}                                                 pthread_kill()
{  12}                                                 kill()
{  11}                                             ap_queue_interrupt_all() <apr_status_t ap_queue_interrupt_all (fd_queue_t *queue) at ./server/mpm/experimental/event/fdqueue.c:393>:
{  12}                                                 apr_thread_mutex_lock()
{  12}                                                 apr_thread_cond_broadcast()
{  12}                                                 apr_thread_mutex_unlock()
{  11}                                             ap_queue_info_term() <apr_status_t ap_queue_info_term (fd_queue_info_t *queue_info) at ./server/mpm/experimental/event/fdqueue.c:237>:
{  12}                                                 apr_thread_mutex_lock()
{  12}                                                 apr_thread_cond_broadcast()
{  12}                                                 apr_thread_mutex_unlock()
{  11}                                             close_worker_sockets() <void close_worker_sockets (void) at ./server/mpm/experimental/event/event.c:259>:
{  12}                                                 apr_socket_close()
{   9}                                     AP_DEBUG_ASSERT()
{   9}                                     apr_thread_mutex_lock()
{   9}                                     APR_RING_REMOVE()
{   9}                                     apr_thread_mutex_unlock()
{   9}                                     push2worker() <apr_status_t push2worker (const apr_pollfd_t *pfd, apr_pollset_t *pollset) at ./server/mpm/experimental/event/event.c:722>:
{  10}                                         apr_pollset_remove()
{  10}                                         ap_queue_push() <apr_status_t ap_queue_push (fd_queue_t *queue, apr_socket_t *sd, conn_state_t *cs, apr_pool_t *p) at ./server/mpm/experimental/event/fdqueue.c:316>:
{  11}                                             apr_thread_mutex_lock()
{  11}                                             AP_DEBUG_ASSERT()
{  11}                                             ap_queue_full()
{  11}                                             apr_thread_cond_signal()
{  11}                                             apr_thread_mutex_unlock()
{  10}                                         apr_bucket_alloc_destroy()
{  10}                                         apr_socket_close()
{  10}                                         ap_log_error()
{  10}                                         apr_pool_clear()
{  10}                                         ap_push_pool() <void ap_push_pool (fd_queue_info_t *queue_info, apr_pool_t *pool_to_recycle) at ./server/mpm/experimental/event/fdqueue.c:185>:
{  11}                                             apr_palloc()
{  11}                                             apr_atomic_casptr()
{   9}                                     ap_pop_pool() <void ap_pop_pool (apr_pool_t **recycled_pool, fd_queue_info_t *queue_info) at ./server/mpm/experimental/event/fdqueue.c:208>:
{  10}                                         apr_atomic_casptr()
{   9}                                     apr_allocator_create()
{   9}                                     apr_allocator_max_free_set()
{   9}                                     apr_pool_create_ex()
{   9}                                     apr_allocator_owner_set()
{   9}                                     apr_pool_tag()
{   9}                                     ap_queue_push() <apr_status_t ap_queue_push (fd_queue_t *queue, apr_socket_t *sd, conn_state_t *cs, apr_pool_t *p) at ./server/mpm/experimental/event/fdqueue.c:316>:
{  10}                                         apr_thread_mutex_lock()
{  10}                                         AP_DEBUG_ASSERT()
{  10}                                         ap_queue_full()
{  10}                                         apr_thread_cond_signal()
{  10}                                         apr_thread_mutex_unlock()
{   9}                                     apr_socket_close()
{   9}                                     apr_pool_clear()
{   9}                                     ap_push_pool() <void ap_push_pool (fd_queue_info_t *queue_info, apr_pool_t *pool_to_recycle) at ./server/mpm/experimental/event/fdqueue.c:185>:
{  10}                                         apr_palloc()
{  10}                                         apr_atomic_casptr()
{   9}                                     apr_time_now()
{   9}                                     APR_RING_FIRST()
{   9}                                     APR_RING_EMPTY()
{   9}                                     ap_close_listeners()
{   9}                                     ap_queue_term() <apr_status_t ap_queue_term (fd_queue_t *queue) at ./server/mpm/experimental/event/fdqueue.c:404>:
{  10}                                         apr_thread_mutex_lock()
{  10}                                         apr_thread_mutex_unlock()
{  10}                                         ap_queue_interrupt_all() <apr_status_t ap_queue_interrupt_all (fd_queue_t *queue) at ./server/mpm/experimental/event/fdqueue.c:393>:
{  11}                                             apr_thread_mutex_lock()
{  11}                                             apr_thread_cond_broadcast()
{  11}                                             apr_thread_mutex_unlock()
{   9}                                     kill()
{   9}                                     apr_thread_exit()
{   8}                                 ap_log_error()
{   8}                                 clean_child_exit():
{   9}                                     apr_pool_destroy()
{   9}                                     exit()
{   8}                                 apr_os_thread_get()
{   7}                             apr_sleep()
{   7}                             apr_time_from_sec()
{   7}                             apr_thread_exit()
{   6}                         apr_signal_thread()
{   6}                         check_signal() <int check_signal (int signum) at ./server/mpm/experimental/event/event.c:1151>:
{   6}                         join_start_thread() <void join_start_thread (apr_thread_t *start_thread_id) at ./server/mpm/experimental/event/event.c:1357>:
{   7}                             apr_thread_join()
{   7}                             ap_log_error()
{   6}                         signal_threads() <void signal_threads (int mode) at ./server/mpm/experimental/event/event.c:299>:
{   7}                             wakeup_listener() <void wakeup_listener (void) at ./server/mpm/experimental/event/event.c:270>:
{   8}                                 pthread_kill()
{   8}                                 kill()
{   7}                             ap_queue_interrupt_all() <apr_status_t ap_queue_interrupt_all (fd_queue_t *queue) at ./server/mpm/experimental/event/fdqueue.c:393>:
{   8}                                 apr_thread_mutex_lock()
{   8}                                 apr_thread_cond_broadcast()
{   8}                                 apr_thread_mutex_unlock()
{   7}                             ap_queue_info_term() <apr_status_t ap_queue_info_term (fd_queue_info_t *queue_info) at ./server/mpm/experimental/event/fdqueue.c:237>:
{   8}                                 apr_thread_mutex_lock()
{   8}                                 apr_thread_cond_broadcast()
{   8}                                 apr_thread_mutex_unlock()
{   7}                             close_worker_sockets() <void close_worker_sockets (void) at ./server/mpm/experimental/event/event.c:259>:
{   8}                                 apr_socket_close()
{   6}                         join_workers() <void join_workers (apr_thread_t *listener, apr_thread_t **threads) at ./server/mpm/experimental/event/event.c:1303>:
{   7}                             pthread_kill()
{   7}                             kill()
{   7}                             apr_sleep()
{   7}                             apr_time_make()
{   7}                             wakeup_listener() <void wakeup_listener (void) at ./server/mpm/experimental/event/event.c:270>:
{   8}                                 pthread_kill()
{   8}                                 kill()
{   7}                             ap_log_error()
{   7}                             apr_thread_join()
{   6}                         unblock_signal() <void unblock_signal (int sig) at ./server/mpm/experimental/event/event.c:702>:
{   7}                             sigemptyset()
{   7}                             sigaddset()
{   7}                             sigprocmask()
{   7}                             pthread_sigmask()
{   6}                         apr_signal()
{   6}                         dummy_signal_handler() <void dummy_signal_handler (int sig) at ./server/mpm/experimental/event/event.c:715>
{   6}                         ap_mpm_pod_check()
{   6}                         free()
{   5}                     fork()
{   5}                     ap_log_error()
{   5}                     ap_update_child_status_from_indexes()
{   5}                     apr_sleep()
{   5}                     apr_time_from_sec()
{   5}                     bindprocessor()
{   5}                     RAISE_SIGSTOP()
{   5}                     apr_signal()
{   5}                     just_die() <void just_die (int sig) at ./server/mpm/experimental/event/event.c:384>:
{   6}                         clean_child_exit():
{   7}                             apr_pool_destroy()
{   7}                             exit()
{   5}                     clean_child_exit():
{   6}                         apr_pool_destroy()
{   6}                         exit()
{   3}             perform_idle_server_maintenance() <void perform_idle_server_maintenance (void) at ./server/mpm/experimental/event/event.c:1617>:
{   4}                 ap_log_error()
{   4}                 ap_mpm_pod_signal()
{   4}                 make_child() <int make_child (server_rec *s, int slot) at ./server/mpm/experimental/event/event.c:1532>:
{   5}                     set_signals() <void set_signals (void) at ./server/mpm/experimental/event/event.c:455>:
{   6}                         ap_fatal_signal_setup() <apr_status_t ap_fatal_signal_setup (server_rec *s, apr_pool_t *in_pconf) at ./server/mpm_common.c:1186>:
{   7}                             sigemptyset()
{   7}                             sig_coredump() <void sig_coredump (int sig) at ./server/mpm_common.c:1145>:
{   8}                                 apr_filepath_set()
{   8}                                 apr_signal()
{   8}                                 run_fatal_exception_hook() <void run_fatal_exception_hook (int sig) at ./server/mpm_common.c:1130>:
{   9}                                     geteuid()
{   9}                                     ap_run_fatal_exception()
{   8}                                 getpid()
{   8}                                 ap_log_error()
{   8}                                 kill()
{   7}                             sigaction()
{   7}                             ap_log_error()
{   7}                             apr_signal()
{   7}                             getpid()
{   6}                         sigemptyset()
{   6}                         sig_term() <void sig_term (int sig) at ./server/mpm/experimental/event/event.c:445>:
{   7}                             ap_start_shutdown() <void ap_start_shutdown (int graceful) at ./server/mpm/experimental/event/event.c:419>:
{   6}                         sigaction()
{   6}                         ap_log_error()
{   6}                         sigaddset()
{   6}                         restart() <void restart (int sig) at ./server/mpm/experimental/event/event.c:450>:
{   7}                             ap_start_restart() <void ap_start_restart (int graceful) at ./server/mpm/experimental/event/event.c:434>:
{   6}                         apr_signal()
{   5}                     getpid()
{   5}                     child_main() <void child_main (int child_num_arg) at ./server/mpm/experimental/event/event.c:1372>:
{   6}                         getpid()
{   6}                         ap_fatal_signal_child_setup() <apr_status_t ap_fatal_signal_child_setup (server_rec *s) at ./server/mpm_common.c:1180>:
{   7}                             getpid()
{   6}                         apr_pool_create()
{   6}                         ap_reopen_scoreboard() <apr_status_t ap_reopen_scoreboard (apr_pool_t *p, apr_shm_t **shm, int detached) at ./server/scoreboard.c:227>:
{   7}                             apr_shm_size_get()
{   7}                             ap_log_error()
{   7}                             apr_shm_detach()
{   6}                         unixd_setup_child()
{   6}                         clean_child_exit():
{   7}                             apr_pool_destroy()
{   7}                             exit()
{   6}                         ap_run_child_init()
{   6}                         apr_setup_signal_thread()
{   6}                         ap_log_error()
{   6}                         calloc()
{   6}                         apr_palloc()
{   6}                         apr_threadattr_create()
{   6}                         apr_threadattr_detach_set()
{   6}                         apr_threadattr_stacksize_set()
{   6}                         apr_thread_create()
{   6}                         start_threads() <void *APR_THREAD_FUNC start_threads (apr_thread_t *thd, void *dummy) at ./server/mpm/experimental/event/event.c:1190>:
{   7}                             apr_pcalloc()
{   7}                             ap_queue_init() <apr_status_t ap_queue_init (fd_queue_t *queue, int queue_capacity, apr_pool_t *a) at ./server/mpm/experimental/event/fdqueue.c:281>:
{   8}                                 apr_thread_mutex_create()
{   8}                                 apr_thread_cond_create()
{   8}                                 apr_palloc()
{   8}                                 apr_pool_cleanup_register()
{   8}                                 ap_queue_destroy() <apr_status_t ap_queue_destroy (void *data) at ./server/mpm/worker/fdqueue.c:236>:
{   9}                                     apr_thread_cond_destroy()
{   9}                                     apr_thread_mutex_destroy()
{   8}                                 ap_queue_destroy() <apr_status_t ap_queue_destroy (void *data) at ./server/mpm/experimental/event/fdqueue.c:265>:
{   9}                                     apr_thread_cond_destroy()
{   9}                                     apr_thread_mutex_destroy()
{   7}                             ap_log_error()
{   7}                             clean_child_exit():
{   8}                                 apr_pool_destroy()
{   8}                                 exit()
{   7}                             ap_queue_info_create() <apr_status_t ap_queue_info_create (fd_queue_info_t **queue_info, apr_pool_t *pool, int max_idlers) at ./server/mpm/experimental/event/fdqueue.c:62>:
{   8}                                 apr_palloc()
{   8}                                 memset()
{   8}                                 apr_thread_mutex_create()
{   8}                                 apr_thread_cond_create()
{   8}                                 apr_pool_cleanup_register()
{   8}                                 queue_info_cleanup() <apr_status_t queue_info_cleanup (void *data_) at ./server/mpm/worker/fdqueue.c:34>:
{   9}                                     apr_thread_cond_destroy()
{   9}                                     apr_thread_mutex_destroy()
{   9}                                     apr_atomic_casptr()
{   9}                                     apr_pool_destroy()
{   8}                                 queue_info_cleanup() <apr_status_t queue_info_cleanup (void *data_) at ./server/mpm/experimental/event/fdqueue.c:40>:
{   9}                                     apr_thread_cond_destroy()
{   9}                                     apr_thread_mutex_destroy()
{   9}                                     apr_atomic_casptr()
{   9}                                     apr_pool_destroy()
{   7}                             malloc()
{   7}                             ap_update_child_status_from_indexes()
{   7}                             apr_thread_create()
{   7}                             worker_thread() <void *APR_THREAD_FUNC worker_thread (apr_thread_t *thd, void *dummy) at ./server/mpm/experimental/event/event.c:1066>:
{   8}                                 free()
{   8}                                 ap_update_child_status_from_indexes()
{   8}                                 ap_queue_info_set_idle() <apr_status_t ap_queue_info_set_idle (fd_queue_info_t *queue_info, apr_pool_t *pool_to_recycle) at ./server/mpm/experimental/event/fdqueue.c:90>:
{   9}                                     apr_palloc()
{   9}                                     apr_atomic_casptr()
{   9}                                     apr_atomic_cas32()
{   9}                                     apr_thread_mutex_lock()
{   9}                                     apr_thread_cond_signal()
{   9}                                     apr_thread_mutex_unlock()
{   9}                                     ap_push_pool() <void ap_push_pool (fd_queue_info_t *queue_info, apr_pool_t *pool_to_recycle) at ./server/mpm/experimental/event/fdqueue.c:185>:
{  10}                                         apr_palloc()
{  10}                                         apr_atomic_casptr()
{   9}                                     apr_atomic_inc32()
{   9}                                     AP_DEBUG_ASSERT()
{   8}                                 ap_log_error()
{   8}                                 signal_threads() <void signal_threads (int mode) at ./server/mpm/experimental/event/event.c:299>:
{   9}                                     wakeup_listener() <void wakeup_listener (void) at ./server/mpm/experimental/event/event.c:270>:
{  10}                                         pthread_kill()
{  10}                                         kill()
{   9}                                     ap_queue_interrupt_all() <apr_status_t ap_queue_interrupt_all (fd_queue_t *queue) at ./server/mpm/experimental/event/fdqueue.c:393>:
{  10}                                         apr_thread_mutex_lock()
{  10}                                         apr_thread_cond_broadcast()
{  10}                                         apr_thread_mutex_unlock()
{   9}                                     ap_queue_info_term() <apr_status_t ap_queue_info_term (fd_queue_info_t *queue_info) at ./server/mpm/experimental/event/fdqueue.c:237>:
{  10}                                         apr_thread_mutex_lock()
{  10}                                         apr_thread_cond_broadcast()
{  10}                                         apr_thread_mutex_unlock()
{   9}                                     close_worker_sockets() <void close_worker_sockets (void) at ./server/mpm/experimental/event/event.c:259>:
{  10}                                         apr_socket_close()
{   8}                                 ap_queue_pop() <apr_status_t ap_queue_pop (fd_queue_t *queue, apr_socket_t **sd, conn_state_t **cs, apr_pool_t **p) at ./server/mpm/experimental/event/fdqueue.c:350>:
{   9}                                     apr_thread_mutex_lock()
{   9}                                     ap_queue_empty()
{   9}                                     apr_thread_cond_wait()
{   9}                                     apr_thread_mutex_unlock()
{   8}                                 APR_STATUS_IS_EOF()
{   8}                                 APR_STATUS_IS_EINTR()
{   8}                                 process_socket() <int process_socket (apr_pool_t *p, apr_socket_t *sock, conn_state_t *cs, int my_child_num, int my_thread_num) at ./server/mpm/experimental/event/event.c:559>:
{   9}                                     ID_FROM_CHILD_THREAD()
{   9}                                     ap_create_sb_handle()
{   9}                                     apr_os_sock_get()
{   9}                                     apr_time_now()
{   9}                                     apr_pcalloc()
{   9}                                     apr_bucket_alloc_create()
{   9}                                     ap_run_create_connection()
{   9}                                     ap_update_vhost_given_ip()
{   9}                                     ap_run_pre_connection()
{   9}                                     ap_log_error()
{   9}                                     ap_run_process_connection()
{   9}                                     ap_lingering_close()
{   9}                                     apr_bucket_alloc_destroy()
{   9}                                     apr_pool_clear()
{   9}                                     ap_push_pool() <void ap_push_pool (fd_queue_info_t *queue_info, apr_pool_t *pool_to_recycle) at ./server/mpm/experimental/event/fdqueue.c:185>:
{  10}                                         apr_palloc()
{  10}                                         apr_atomic_casptr()
{   9}                                     apr_thread_mutex_lock()
{   9}                                     APR_RING_INSERT_TAIL()
{   9}                                     apr_pollset_add()
{   9}                                     apr_thread_mutex_unlock()
{   9}                                     AP_DEBUG_ASSERT()
{   8}                                 apr_thread_exit()
{   7}                             create_listener_thread() <void create_listener_thread (thread_starter *ts) at ./server/mpm/experimental/event/event.c:1163>:
{   8}                                 malloc()
{   8}                                 apr_thread_create()
{   8}                                 listener_thread() <void *listener_thread (apr_thread_t *thd, void *dummy) at ./server/mpm/experimental/event/event.c:797>:
{   9}                                     apr_thread_pool_get()
{   9}                                     free()
{   9}                                     apr_thread_mutex_create()
{   9}                                     ap_log_error()
{   9}                                     signal_threads() <void signal_threads (int mode) at ./server/mpm/experimental/event/event.c:299>:
{  10}                                         wakeup_listener() <void wakeup_listener (void) at ./server/mpm/experimental/event/event.c:270>:
{  11}                                             pthread_kill()
{  11}                                             kill()
{  10}                                         ap_queue_interrupt_all() <apr_status_t ap_queue_interrupt_all (fd_queue_t *queue) at ./server/mpm/experimental/event/fdqueue.c:393>:
{  11}                                             apr_thread_mutex_lock()
{  11}                                             apr_thread_cond_broadcast()
{  11}                                             apr_thread_mutex_unlock()
{  10}                                         ap_queue_info_term() <apr_status_t ap_queue_info_term (fd_queue_info_t *queue_info) at ./server/mpm/experimental/event/fdqueue.c:237>:
{  11}                                             apr_thread_mutex_lock()
{  11}                                             apr_thread_cond_broadcast()
{  11}                                             apr_thread_mutex_unlock()
{  10}                                         close_worker_sockets() <void close_worker_sockets (void) at ./server/mpm/experimental/event/event.c:259>:
{  11}                                             apr_socket_close()
{   9}                                     APR_RING_INIT()
{   9}                                     apr_pollset_create()
{   9}                                     apr_pcalloc()
{   9}                                     apr_socket_opt_set()
{   9}                                     apr_pollset_add()
{   9}                                     unblock_signal() <void unblock_signal (int sig) at ./server/mpm/experimental/event/event.c:702>:
{  10}                                         sigemptyset()
{  10}                                         sigaddset()
{  10}                                         sigprocmask()
{  10}                                         pthread_sigmask()
{   9}                                     apr_signal()
{   9}                                     dummy_signal_handler() <void dummy_signal_handler (int sig) at ./server/mpm/experimental/event/event.c:715>
{   9}                                     check_infinite_requests() <void check_infinite_requests (void) at ./server/mpm/experimental/event/event.c:681>:
{  10}                                         signal_threads() <void signal_threads (int mode) at ./server/mpm/experimental/event/event.c:299>:
{  11}                                             wakeup_listener() <void wakeup_listener (void) at ./server/mpm/experimental/event/event.c:270>:
{  12}                                                 pthread_kill()
{  12}                                                 kill()
{  11}                                             ap_queue_interrupt_all() <apr_status_t ap_queue_interrupt_all (fd_queue_t *queue) at ./server/mpm/experimental/event/fdqueue.c:393>:
{  12}                                                 apr_thread_mutex_lock()
{  12}                                                 apr_thread_cond_broadcast()
{  12}                                                 apr_thread_mutex_unlock()
{  11}                                             ap_queue_info_term() <apr_status_t ap_queue_info_term (fd_queue_info_t *queue_info) at ./server/mpm/experimental/event/fdqueue.c:237>:
{  12}                                                 apr_thread_mutex_lock()
{  12}                                                 apr_thread_cond_broadcast()
{  12}                                                 apr_thread_mutex_unlock()
{  11}                                             close_worker_sockets() <void close_worker_sockets (void) at ./server/mpm/experimental/event/event.c:259>:
{  12}                                                 apr_socket_close()
{   9}                                     apr_pollset_poll()
{   9}                                     APR_STATUS_IS_EINTR()
{   9}                                     APR_STATUS_IS_TIMEUP()
{   9}                                     get_worker() <int get_worker (int *have_idle_worker_p) at ./server/mpm/experimental/event/event.c:768>:
{  10}                                         ap_queue_info_wait_for_idler() <apr_status_t ap_queue_info_wait_for_idler (fd_queue_info_t *queue_info) at ./server/mpm/experimental/event/fdqueue.c:122>:
{  11}                                             apr_thread_mutex_lock()
{  11}                                             apr_thread_cond_wait()
{  11}                                             apr_thread_mutex_unlock()
{  11}                                             apr_atomic_dec32()
{  11}                                             apr_atomic_casptr()
{  11}                                             apr_atomic_add32()
{  11}                                             AP_DEBUG_ASSERT()
{  11}                                             apr_atomic_inc32()
{  10}                                         APR_STATUS_IS_EOF()
{  10}                                         ap_log_error()
{  10}                                         signal_threads() <void signal_threads (int mode) at ./server/mpm/experimental/event/event.c:299>:
{  11}                                             wakeup_listener() <void wakeup_listener (void) at ./server/mpm/experimental/event/event.c:270>:
{  12}                                                 pthread_kill()
{  12}                                                 kill()
{  11}                                             ap_queue_interrupt_all() <apr_status_t ap_queue_interrupt_all (fd_queue_t *queue) at ./server/mpm/experimental/event/fdqueue.c:393>:
{  12}                                                 apr_thread_mutex_lock()
{  12}                                                 apr_thread_cond_broadcast()
{  12}                                                 apr_thread_mutex_unlock()
{  11}                                             ap_queue_info_term() <apr_status_t ap_queue_info_term (fd_queue_info_t *queue_info) at ./server/mpm/experimental/event/fdqueue.c:237>:
{  12}                                                 apr_thread_mutex_lock()
{  12}                                                 apr_thread_cond_broadcast()
{  12}                                                 apr_thread_mutex_unlock()
{  11}                                             close_worker_sockets() <void close_worker_sockets (void) at ./server/mpm/experimental/event/event.c:259>:
{  12}                                                 apr_socket_close()
{   9}                                     AP_DEBUG_ASSERT()
{   9}                                     apr_thread_mutex_lock()
{   9}                                     APR_RING_REMOVE()
{   9}                                     apr_thread_mutex_unlock()
{   9}                                     push2worker() <apr_status_t push2worker (const apr_pollfd_t *pfd, apr_pollset_t *pollset) at ./server/mpm/experimental/event/event.c:722>:
{  10}                                         apr_pollset_remove()
{  10}                                         ap_queue_push() <apr_status_t ap_queue_push (fd_queue_t *queue, apr_socket_t *sd, conn_state_t *cs, apr_pool_t *p) at ./server/mpm/experimental/event/fdqueue.c:316>:
{  11}                                             apr_thread_mutex_lock()
{  11}                                             AP_DEBUG_ASSERT()
{  11}                                             ap_queue_full()
{  11}                                             apr_thread_cond_signal()
{  11}                                             apr_thread_mutex_unlock()
{  10}                                         apr_bucket_alloc_destroy()
{  10}                                         apr_socket_close()
{  10}                                         ap_log_error()
{  10}                                         apr_pool_clear()
{  10}                                         ap_push_pool() <void ap_push_pool (fd_queue_info_t *queue_info, apr_pool_t *pool_to_recycle) at ./server/mpm/experimental/event/fdqueue.c:185>:
{  11}                                             apr_palloc()
{  11}                                             apr_atomic_casptr()
{   9}                                     ap_pop_pool() <void ap_pop_pool (apr_pool_t **recycled_pool, fd_queue_info_t *queue_info) at ./server/mpm/experimental/event/fdqueue.c:208>:
{  10}                                         apr_atomic_casptr()
{   9}                                     apr_allocator_create()
{   9}                                     apr_allocator_max_free_set()
{   9}                                     apr_pool_create_ex()
{   9}                                     apr_allocator_owner_set()
{   9}                                     apr_pool_tag()
{   9}                                     ap_queue_push() <apr_status_t ap_queue_push (fd_queue_t *queue, apr_socket_t *sd, conn_state_t *cs, apr_pool_t *p) at ./server/mpm/experimental/event/fdqueue.c:316>:
{  10}                                         apr_thread_mutex_lock()
{  10}                                         AP_DEBUG_ASSERT()
{  10}                                         ap_queue_full()
{  10}                                         apr_thread_cond_signal()
{  10}                                         apr_thread_mutex_unlock()
{   9}                                     apr_socket_close()
{   9}                                     apr_pool_clear()
{   9}                                     ap_push_pool() <void ap_push_pool (fd_queue_info_t *queue_info, apr_pool_t *pool_to_recycle) at ./server/mpm/experimental/event/fdqueue.c:185>:
{  10}                                         apr_palloc()
{  10}                                         apr_atomic_casptr()
{   9}                                     apr_time_now()
{   9}                                     APR_RING_FIRST()
{   9}                                     APR_RING_EMPTY()
{   9}                                     ap_close_listeners()
{   9}                                     ap_queue_term() <apr_status_t ap_queue_term (fd_queue_t *queue) at ./server/mpm/experimental/event/fdqueue.c:404>:
{  10}                                         apr_thread_mutex_lock()
{  10}                                         apr_thread_mutex_unlock()
{  10}                                         ap_queue_interrupt_all() <apr_status_t ap_queue_interrupt_all (fd_queue_t *queue) at ./server/mpm/experimental/event/fdqueue.c:393>:
{  11}                                             apr_thread_mutex_lock()
{  11}                                             apr_thread_cond_broadcast()
{  11}                                             apr_thread_mutex_unlock()
{   9}                                     kill()
{   9}                                     apr_thread_exit()
{   8}                                 ap_log_error()
{   8}                                 clean_child_exit():
{   9}                                     apr_pool_destroy()
{   9}                                     exit()
{   8}                                 apr_os_thread_get()
{   7}                             apr_sleep()
{   7}                             apr_time_from_sec()
{   7}                             apr_thread_exit()
{   6}                         apr_signal_thread()
{   6}                         check_signal() <int check_signal (int signum) at ./server/mpm/experimental/event/event.c:1151>:
{   6}                         join_start_thread() <void join_start_thread (apr_thread_t *start_thread_id) at ./server/mpm/experimental/event/event.c:1357>:
{   7}                             apr_thread_join()
{   7}                             ap_log_error()
{   6}                         signal_threads() <void signal_threads (int mode) at ./server/mpm/experimental/event/event.c:299>:
{   7}                             wakeup_listener() <void wakeup_listener (void) at ./server/mpm/experimental/event/event.c:270>:
{   8}                                 pthread_kill()
{   8}                                 kill()
{   7}                             ap_queue_interrupt_all() <apr_status_t ap_queue_interrupt_all (fd_queue_t *queue) at ./server/mpm/experimental/event/fdqueue.c:393>:
{   8}                                 apr_thread_mutex_lock()
{   8}                                 apr_thread_cond_broadcast()
{   8}                                 apr_thread_mutex_unlock()
{   7}                             ap_queue_info_term() <apr_status_t ap_queue_info_term (fd_queue_info_t *queue_info) at ./server/mpm/experimental/event/fdqueue.c:237>:
{   8}                                 apr_thread_mutex_lock()
{   8}                                 apr_thread_cond_broadcast()
{   8}                                 apr_thread_mutex_unlock()
{   7}                             close_worker_sockets() <void close_worker_sockets (void) at ./server/mpm/experimental/event/event.c:259>:
{   8}                                 apr_socket_close()
{   6}                         join_workers() <void join_workers (apr_thread_t *listener, apr_thread_t **threads) at ./server/mpm/experimental/event/event.c:1303>:
{   7}                             pthread_kill()
{   7}                             kill()
{   7}                             apr_sleep()
{   7}                             apr_time_make()
{   7}                             wakeup_listener() <void wakeup_listener (void) at ./server/mpm/experimental/event/event.c:270>:
{   8}                                 pthread_kill()
{   8}                                 kill()
{   7}                             ap_log_error()
{   7}                             apr_thread_join()
{   6}                         unblock_signal() <void unblock_signal (int sig) at ./server/mpm/experimental/event/event.c:702>:
{   7}                             sigemptyset()
{   7}                             sigaddset()
{   7}                             sigprocmask()
{   7}                             pthread_sigmask()
{   6}                         apr_signal()
{   6}                         dummy_signal_handler() <void dummy_signal_handler (int sig) at ./server/mpm/experimental/event/event.c:715>
{   6}                         ap_mpm_pod_check()
{   6}                         free()
{   5}                     fork()
{   5}                     ap_log_error()
{   5}                     ap_update_child_status_from_indexes()
{   5}                     apr_sleep()
{   5}                     apr_time_from_sec()
{   5}                     bindprocessor()
{   5}                     RAISE_SIGSTOP()
{   5}                     apr_signal()
{   5}                     just_die() <void just_die (int sig) at ./server/mpm/experimental/event/event.c:384>:
{   6}                         clean_child_exit():
{   7}                             apr_pool_destroy()
{   7}                             exit()
{   5}                     clean_child_exit():
{   6}                         apr_pool_destroy()
{   6}                         exit()
{   1}     SSLv23_client_method()
{   1}     atexit()
{   1}     apr_terminate()
{   1}     apr_xlate_open()
{   1}     apr_base64init_ebcdic()
{   1}     err() <void err (char *s) at ./support/ab.c:350>:
{   2}         fprintf()
{   2}         printf()
{   2}         exit()
{   1}     strdup()
{   1}     open_postfile() <int open_postfile (const char *pfile) at ./support/ab.c:1865>:
{   2}         apr_file_open()
{   2}         fprintf()
{   2}         apr_strerror()
{   2}         apr_file_info_get()
{   2}         malloc()
{   2}         apr_file_read_full()
{   2}         apr_file_close()
{   1}     apr_pstrcat()
{   1}     apr_isspace()
{   1}     apr_base64_encode_len()
{   1}     apr_base64_encode()
{   1}     usage() <void usage (const char *progname) at ./support/ab.c:1748>:
{   2}         fprintf()
{   2}         exit()
{   1}     copyright() <void copyright (void) at ./support/ab.c:1730>:
{   2}         printf()
{   1}     SSLv2_client_method()
{   1}     SSLv3_client_method()
{   1}     TLSv1_client_method()
{   1}     parse_url() <int parse_url (char *url) at ./support/ab.c:1793>:
{   2}         apr_pstrdup()
{   2}         strlen()
{   2}         strncmp()
{   2}         fprintf()
{   2}         exit()
{   2}         strchr()
{   2}         apr_palloc()
{   2}         memcpy()
{   2}         apr_parse_addr_port()
{   2}         apr_psprintf()
{   1}     R_malloc_init()
{   1}     CRYPTO_malloc_init()
{   1}     SSL_load_error_strings()
{   1}     SSL_library_init()
{   1}     BIO_new_fp()
{   1}     SSL_CTX_new()
{   1}     BIO_printf()
{   1}     ERR_print_errors()
{   1}     SSL_CTX_set_options()
{   1}     SSL_CTX_set_cipher_list()
{   1}     ERR_print_errors_fp()
{   1}     SSL_CTX_set_info_callback()
{   1}     ssl_state_cb() <void ssl_state_cb (const SSL *s, int w, int r) at ./support/ab.c:399>:
{   2}         BIO_printf()
{   2}         SSL_alert_type_string_long()
{   2}         SSL_alert_desc_string_long()
{   2}         SSL_in_connect_init()
{   2}         SSL_state_string_long()
{   1}     apr_signal()
{   1}     test() <void test (void) at ./support/ab.c:1476>:
{   2}         apr_pstrdup()
{   2}         printf()
{   2}         fflush()
{   2}         apr_time_now()
{   2}         calloc()
{   2}         apr_pollset_create()
{   2}         apr_err() <void apr_err (char *s, apr_status_t rv) at ./support/ab.c:360>:
{   3}             fprintf()
{   3}             apr_strerror()
{   3}             printf()
{   3}             exit()
{   2}         apr_snprintf()
{   2}         err() <void err (char *s) at ./support/ab.c:350>:
{   3}             fprintf()
{   3}             printf()
{   3}             exit()
{   2}         strlen()
{   2}         malloc()
{   2}         fprintf()
{   2}         strcpy()
{   2}         memcpy()
{   2}         apr_xlate_conv_buffer()
{   2}         exit()
{   2}         apr_sockaddr_info_get()
{   2}         start_connect() <void start_connect (struct connection *c) at ./support/ab.c:1102> (R):
{   3}             apr_pool_destroy()
{   3}             apr_pool_create()
{   3}             apr_socket_create()
{   3}             apr_err() <void apr_err (char *s, apr_status_t rv) at ./support/ab.c:360>:
{   4}                 fprintf()
{   4}                 apr_strerror()
{   4}                 printf()
{   4}                 exit()
{   3}             apr_socket_opt_set()
{   3}             apr_time_now()
{   3}             SSL_new()
{   3}             BIO_printf()
{   3}             ERR_print_errors()
{   3}             exit()
{   3}             ssl_rand_seed() <void ssl_rand_seed (void) at ./support/ab.c:436>:
{   4}                 time()
{   4}                 RAND_seed()
{   4}                 getpid()
{   4}                 ssl_rand_choosenum() <int ssl_rand_choosenum (int l, int h) at ./support/ab.c:422>:
{   5}                     srand()
{   5}                     time()
{   5}                     apr_snprintf()
{   5}                     rand()
{   5}                     atoi()
{   3}             apr_os_sock_get()
{   3}             BIO_new_socket()
{   3}             SSL_set_bio()
{   3}             SSL_set_connect_state()
{   3}             BIO_set_callback()
{   3}             ssl_print_cb() <long ssl_print_cb (BIO *bio, int cmd, const char *argp, int argi, long argl, long ret) at ./support/ab.c:378>:
{   4}                 BIO_get_callback_arg()
{   4}                 BIO_printf()
{   4}                 BIO_dump()
{   3}             BIO_set_callback_arg()
{   3}             apr_socket_connect()
{   3}             APR_STATUS_IS_EINPROGRESS()
{   3}             apr_pollset_add()
{   3}             apr_pollset_remove()
{   3}             apr_socket_close()
{   3}             fprintf()
{   3}             start_connect() <void start_connect (struct connection *c) at ./support/ab.c:1102> (recursive: see 3710)
{   3}             ssl_proceed_handshake() <void ssl_proceed_handshake (struct connection *c) at ./support/ab.c:540>:
{   4}                 SSL_do_handshake()
{   4}                 SSL_get_error()
{   4}                 ssl_print_info() <void ssl_print_info (struct connection *c) at ./support/ab.c:512>:
{   5}                     BIO_printf()
{   5}                     SSL_get_peer_cert_chain()
{   5}                     SK_NUM()
{   5}                     SK_VALUE()
{   5}                     ssl_print_cert_info() <void ssl_print_cert_info (BIO *bio, X509 *cert) at ./support/ab.c:483>:
{   6}                         BIO_printf()
{   6}                         X509_get_version()
{   6}                         ASN1_UTCTIME_print()
{   6}                         X509_get_notBefore()
{   6}                         X509_get_notAfter()
{   6}                         EVP_PKEY_bits()
{   6}                         X509_get_pubkey()
{   6}                         X509_get_issuer_name()
{   6}                         X509_NAME_oneline()
{   6}                         X509_get_subject_name()
{   6}                         X509_get_ext_count()
{   5}                     X509_free()
{   5}                     SSL_get_peer_certificate()
{   5}                     ssl_print_connection_info() <int ssl_print_connection_info (BIO *bio, SSL *ssl) at ./support/ab.c:468>:
{   6}                         SSL_get_current_cipher()
{   6}                         BIO_printf()
{   6}                         SSL_CIPHER_get_version()
{   6}                         SSL_CIPHER_get_name()
{   6}                         SSL_CIPHER_get_bits()
{   5}                     SSL_SESSION_print()
{   5}                     SSL_get_session()
{   4}                 SSL_get_current_cipher()
{   4}                 SSL_CIPHER_get_bits()
{   4}                 SSL_get_peer_certificate()
{   4}                 EVP_PKEY_bits()
{   4}                 X509_get_pubkey()
{   4}                 malloc()
{   4}                 apr_snprintf()
{   4}                 SSL_CIPHER_get_version()
{   4}                 SSL_CIPHER_get_name()
{   4}                 write_request() <void write_request (struct connection *c) at ./test/zb.c:149>:
{   5}                     gettimeofday()
{   5}                     write()
{   5}                     FD_SET()
{   5}                     FD_CLR()
{   4}                 apr_pollset_add()
{   4}                 BIO_printf()
{   4}                 ERR_print_errors()
{   4}                 close_connection() <void close_connection (struct connection *c) at ./test/zb.c:284>:
{   5}                     gettimeofday()
{   5}                     timedif() <int timedif (struct timeval a, struct timeval b) at ./test/zb.c:172>:
{   5}                     close()
{   5}                     FD_CLR()
{   5}                     start_connect() <void start_connect (struct connection *c) at ./test/zb.c:245> (R):
{   6}                         socket()
{   6}                         err() <void err (char *s) at ./test/zb.c:138>:
{   7}                             perror()
{   7}                             exit()
{   6}                         nonblock() <void nonblock (int fd) at ./test/zb.c:162>:
{   7}                             ioctl()
{   6}                         gettimeofday()
{   6}                         connect()
{   6}                         FD_SET()
{   6}                         close()
{   6}                         printf()
{   6}                         exit()
{   6}                         start_connect() <void start_connect (struct connection *c) at ./test/zb.c:245> (recursive: see 3804)
{   6}                         write_request() <void write_request (struct connection *c) at ./test/zb.c:149>:
{   7}                             gettimeofday()
{   7}                             write()
{   7}                             FD_SET()
{   7}                             FD_CLR()
{   3}             write_request() <void write_request (struct connection *c) at ./support/ab.c:604>:
{   4}                 apr_time_now()
{   4}                 apr_socket_timeout_set()
{   4}                 printf()
{   4}                 close_connection() <void close_connection (struct connection *c) at ./test/zb.c:284>:
{   5}                     gettimeofday()
{   5}                     timedif() <int timedif (struct timeval a, struct timeval b) at ./test/zb.c:172>:
{   5}                     close()
{   5}                     FD_CLR()
{   5}                     start_connect() <void start_connect (struct connection *c) at ./test/zb.c:245> (R):
{   6}                         socket()
{   6}                         err() <void err (char *s) at ./test/zb.c:138>:
{   7}                             perror()
{   7}                             exit()
{   6}                         nonblock() <void nonblock (int fd) at ./test/zb.c:162>:
{   7}                             ioctl()
{   6}                         gettimeofday()
{   6}                         connect()
{   6}                         FD_SET()
{   6}                         close()
{   6}                         printf()
{   6}                         exit()
{   6}                         start_connect() <void start_connect (struct connection *c) at ./test/zb.c:245> (recursive: see 3832)
{   6}                         write_request() <void write_request (struct connection *c) at ./test/zb.c:149>:
{   7}                             gettimeofday()
{   7}                             write()
{   7}                             FD_SET()
{   7}                             FD_CLR()
{   4}                 SSL_write()
{   4}                 BIO_printf()
{   4}                 ERR_print_errors()
{   4}                 apr_socket_send()
{   4}                 APR_STATUS_IS_EAGAIN()
{   4}                 apr_pollset_add()
{   2}         apr_time_sec()
{   2}         apr_pollset_poll()
{   2}         SSL_in_init()
{   2}         ssl_proceed_handshake() <void ssl_proceed_handshake (struct connection *c) at ./support/ab.c:540>:
{   3}             SSL_do_handshake()
{   3}             SSL_get_error()
{   3}             ssl_print_info() <void ssl_print_info (struct connection *c) at ./support/ab.c:512>:
{   4}                 BIO_printf()
{   4}                 SSL_get_peer_cert_chain()
{   4}                 SK_NUM()
{   4}                 SK_VALUE()
{   4}                 ssl_print_cert_info() <void ssl_print_cert_info (BIO *bio, X509 *cert) at ./support/ab.c:483>:
{   5}                     BIO_printf()
{   5}                     X509_get_version()
{   5}                     ASN1_UTCTIME_print()
{   5}                     X509_get_notBefore()
{   5}                     X509_get_notAfter()
{   5}                     EVP_PKEY_bits()
{   5}                     X509_get_pubkey()
{   5}                     X509_get_issuer_name()
{   5}                     X509_NAME_oneline()
{   5}                     X509_get_subject_name()
{   5}                     X509_get_ext_count()
{   4}                 X509_free()
{   4}                 SSL_get_peer_certificate()
{   4}                 ssl_print_connection_info() <int ssl_print_connection_info (BIO *bio, SSL *ssl) at ./support/ab.c:468>:
{   5}                     SSL_get_current_cipher()
{   5}                     BIO_printf()
{   5}                     SSL_CIPHER_get_version()
{   5}                     SSL_CIPHER_get_name()
{   5}                     SSL_CIPHER_get_bits()
{   4}                 SSL_SESSION_print()
{   4}                 SSL_get_session()
{   3}             SSL_get_current_cipher()
{   3}             SSL_CIPHER_get_bits()
{   3}             SSL_get_peer_certificate()
{   3}             EVP_PKEY_bits()
{   3}             X509_get_pubkey()
{   3}             malloc()
{   3}             apr_snprintf()
{   3}             SSL_CIPHER_get_version()
{   3}             SSL_CIPHER_get_name()
{   3}             write_request() <void write_request (struct connection *c) at ./test/zb.c:149>:
{   4}                 gettimeofday()
{   4}                 write()
{   4}                 FD_SET()
{   4}                 FD_CLR()
{   3}             apr_pollset_add()
{   3}             BIO_printf()
{   3}             ERR_print_errors()
{   3}             close_connection() <void close_connection (struct connection *c) at ./test/zb.c:284>:
{   4}                 gettimeofday()
{   4}                 timedif() <int timedif (struct timeval a, struct timeval b) at ./test/zb.c:172>:
{   4}                 close()
{   4}                 FD_CLR()
{   4}                 start_connect() <void start_connect (struct connection *c) at ./test/zb.c:245> (R):
{   5}                     socket()
{   5}                     err() <void err (char *s) at ./test/zb.c:138>:
{   6}                         perror()
{   6}                         exit()
{   5}                     nonblock() <void nonblock (int fd) at ./test/zb.c:162>:
{   6}                         ioctl()
{   5}                     gettimeofday()
{   5}                     connect()
{   5}                     FD_SET()
{   5}                     close()
{   5}                     printf()
{   5}                     exit()
{   5}                     start_connect() <void start_connect (struct connection *c) at ./test/zb.c:245> (recursive: see 3912)
{   5}                     write_request() <void write_request (struct connection *c) at ./test/zb.c:149>:
{   6}                         gettimeofday()
{   6}                         write()
{   6}                         FD_SET()
{   6}                         FD_CLR()
{   2}         read_connection() <void read_connection (struct connection *c) at ./support/ab.c:1258>:
{   3}             SSL_read()
{   3}             SSL_get_error()
{   3}             close_connection() <void close_connection (struct connection *c) at ./support/ab.c:1198>:
{   4}                 fprintf()
{   4}                 fflush()
{   4}                 apr_time_now()
{   4}                 ap_max()
{   4}                 apr_pollset_remove()
{   4}                 SSL_shutdown()
{   4}                 SSL_free()
{   4}                 apr_socket_close()
{   4}                 start_connect() <void start_connect (struct connection *c) at ./support/ab.c:1102> (R):
{   5}                     apr_pool_destroy()
{   5}                     apr_pool_create()
{   5}                     apr_socket_create()
{   5}                     apr_err() <void apr_err (char *s, apr_status_t rv) at ./support/ab.c:360>:
{   6}                         fprintf()
{   6}                         apr_strerror()
{   6}                         printf()
{   6}                         exit()
{   5}                     apr_socket_opt_set()
{   5}                     apr_time_now()
{   5}                     SSL_new()
{   5}                     BIO_printf()
{   5}                     ERR_print_errors()
{   5}                     exit()
{   5}                     ssl_rand_seed() <void ssl_rand_seed (void) at ./support/ab.c:436>:
{   6}                         time()
{   6}                         RAND_seed()
{   6}                         getpid()
{   6}                         ssl_rand_choosenum() <int ssl_rand_choosenum (int l, int h) at ./support/ab.c:422>:
{   7}                             srand()
{   7}                             time()
{   7}                             apr_snprintf()
{   7}                             rand()
{   7}                             atoi()
{   5}                     apr_os_sock_get()
{   5}                     BIO_new_socket()
{   5}                     SSL_set_bio()
{   5}                     SSL_set_connect_state()
{   5}                     BIO_set_callback()
{   5}                     ssl_print_cb() <long ssl_print_cb (BIO *bio, int cmd, const char *argp, int argi, long argl, long ret) at ./support/ab.c:378>:
{   6}                         BIO_get_callback_arg()
{   6}                         BIO_printf()
{   6}                         BIO_dump()
{   5}                     BIO_set_callback_arg()
{   5}                     apr_socket_connect()
{   5}                     APR_STATUS_IS_EINPROGRESS()
{   5}                     apr_pollset_add()
{   5}                     apr_pollset_remove()
{   5}                     apr_socket_close()
{   5}                     fprintf()
{   5}                     start_connect() <void start_connect (struct connection *c) at ./support/ab.c:1102> (recursive: see 3943)
{   5}                     ssl_proceed_handshake() <void ssl_proceed_handshake (struct connection *c) at ./support/ab.c:540>:
{   6}                         SSL_do_handshake()
{   6}                         SSL_get_error()
{   6}                         ssl_print_info() <void ssl_print_info (struct connection *c) at ./support/ab.c:512>:
{   7}                             BIO_printf()
{   7}                             SSL_get_peer_cert_chain()
{   7}                             SK_NUM()
{   7}                             SK_VALUE()
{   7}                             ssl_print_cert_info() <void ssl_print_cert_info (BIO *bio, X509 *cert) at ./support/ab.c:483>:
{   8}                                 BIO_printf()
{   8}                                 X509_get_version()
{   8}                                 ASN1_UTCTIME_print()
{   8}                                 X509_get_notBefore()
{   8}                                 X509_get_notAfter()
{   8}                                 EVP_PKEY_bits()
{   8}                                 X509_get_pubkey()
{   8}                                 X509_get_issuer_name()
{   8}                                 X509_NAME_oneline()
{   8}                                 X509_get_subject_name()
{   8}                                 X509_get_ext_count()
{   7}                             X509_free()
{   7}                             SSL_get_peer_certificate()
{   7}                             ssl_print_connection_info() <int ssl_print_connection_info (BIO *bio, SSL *ssl) at ./support/ab.c:468>:
{   8}                                 SSL_get_current_cipher()
{   8}                                 BIO_printf()
{   8}                                 SSL_CIPHER_get_version()
{   8}                                 SSL_CIPHER_get_name()
{   8}                                 SSL_CIPHER_get_bits()
{   7}                             SSL_SESSION_print()
{   7}                             SSL_get_session()
{   6}                         SSL_get_current_cipher()
{   6}                         SSL_CIPHER_get_bits()
{   6}                         SSL_get_peer_certificate()
{   6}                         EVP_PKEY_bits()
{   6}                         X509_get_pubkey()
{   6}                         malloc()
{   6}                         apr_snprintf()
{   6}                         SSL_CIPHER_get_version()
{   6}                         SSL_CIPHER_get_name()
{   6}                         write_request() <void write_request (struct connection *c) at ./test/zb.c:149>:
{   7}                             gettimeofday()
{   7}                             write()
{   7}                             FD_SET()
{   7}                             FD_CLR()
{   6}                         apr_pollset_add()
{   6}                         BIO_printf()
{   6}                         ERR_print_errors()
{   6}                         close_connection() <void close_connection (struct connection *c) at ./test/zb.c:284>:
{   7}                             gettimeofday()
{   7}                             timedif() <int timedif (struct timeval a, struct timeval b) at ./test/zb.c:172>:
{   7}                             close()
{   7}                             FD_CLR()
{   7}                             start_connect() <void start_connect (struct connection *c) at ./test/zb.c:245> (R):
{   8}                                 socket()
{   8}                                 err() <void err (char *s) at ./test/zb.c:138>:
{   9}                                     perror()
{   9}                                     exit()
{   8}                                 nonblock() <void nonblock (int fd) at ./test/zb.c:162>:
{   9}                                     ioctl()
{   8}                                 gettimeofday()
{   8}                                 connect()
{   8}                                 FD_SET()
{   8}                                 close()
{   8}                                 printf()
{   8}                                 exit()
{   8}                                 start_connect() <void start_connect (struct connection *c) at ./test/zb.c:245> (recursive: see 4037)
{   8}                                 write_request() <void write_request (struct connection *c) at ./test/zb.c:149>:
{   9}                                     gettimeofday()
{   9}                                     write()
{   9}                                     FD_SET()
{   9}                                     FD_CLR()
{   5}                     write_request() <void write_request (struct connection *c) at ./support/ab.c:604>:
{   6}                         apr_time_now()
{   6}                         apr_socket_timeout_set()
{   6}                         printf()
{   6}                         close_connection() <void close_connection (struct connection *c) at ./test/zb.c:284>:
{   7}                             gettimeofday()
{   7}                             timedif() <int timedif (struct timeval a, struct timeval b) at ./test/zb.c:172>:
{   7}                             close()
{   7}                             FD_CLR()
{   7}                             start_connect() <void start_connect (struct connection *c) at ./test/zb.c:245> (R):
{   8}                                 socket()
{   8}                                 err() <void err (char *s) at ./test/zb.c:138>:
{   9}                                     perror()
{   9}                                     exit()
{   8}                                 nonblock() <void nonblock (int fd) at ./test/zb.c:162>:
{   9}                                     ioctl()
{   8}                                 gettimeofday()
{   8}                                 connect()
{   8}                                 FD_SET()
{   8}                                 close()
{   8}                                 printf()
{   8}                                 exit()
{   8}                                 start_connect() <void start_connect (struct connection *c) at ./test/zb.c:245> (recursive: see 4065)
{   8}                                 write_request() <void write_request (struct connection *c) at ./test/zb.c:149>:
{   9}                                     gettimeofday()
{   9}                                     write()
{   9}                                     FD_SET()
{   9}                                     FD_CLR()
{   6}                         SSL_write()
{   6}                         BIO_printf()
{   6}                         ERR_print_errors()
{   6}                         apr_socket_send()
{   6}                         APR_STATUS_IS_EAGAIN()
{   6}                         apr_pollset_add()
{   3}             BIO_printf()
{   3}             ERR_print_errors()
{   3}             apr_socket_recv()
{   3}             APR_STATUS_IS_EAGAIN()
{   3}             APR_STATUS_IS_EOF()
{   3}             apr_err() <void apr_err (char *s, apr_status_t rv) at ./support/ab.c:360>:
{   4}                 fprintf()
{   4}                 apr_strerror()
{   4}                 printf()
{   4}                 exit()
{   3}             apr_time_now()
{   3}             apr_xlate_conv_buffer()
{   3}             fprintf()
{   3}             exit()
{   3}             memcpy()
{   3}             printf()
{   3}             strstr()
{   3}             apr_pollset_remove()
{   3}             apr_socket_close()
{   3}             err() <void err (char *s) at ./support/ab.c:350>:
{   4}                 fprintf()
{   4}                 printf()
{   4}                 exit()
{   3}             start_connect() <void start_connect (struct connection *c) at ./support/ab.c:1102> (R):
{   4}                 apr_pool_destroy()
{   4}                 apr_pool_create()
{   4}                 apr_socket_create()
{   4}                 apr_err() <void apr_err (char *s, apr_status_t rv) at ./support/ab.c:360>:
{   5}                     fprintf()
{   5}                     apr_strerror()
{   5}                     printf()
{   5}                     exit()
{   4}                 apr_socket_opt_set()
{   4}                 apr_time_now()
{   4}                 SSL_new()
{   4}                 BIO_printf()
{   4}                 ERR_print_errors()
{   4}                 exit()
{   4}                 ssl_rand_seed() <void ssl_rand_seed (void) at ./support/ab.c:436>:
{   5}                     time()
{   5}                     RAND_seed()
{   5}                     getpid()
{   5}                     ssl_rand_choosenum() <int ssl_rand_choosenum (int l, int h) at ./support/ab.c:422>:
{   6}                         srand()
{   6}                         time()
{   6}                         apr_snprintf()
{   6}                         rand()
{   6}                         atoi()
{   4}                 apr_os_sock_get()
{   4}                 BIO_new_socket()
{   4}                 SSL_set_bio()
{   4}                 SSL_set_connect_state()
{   4}                 BIO_set_callback()
{   4}                 ssl_print_cb() <long ssl_print_cb (BIO *bio, int cmd, const char *argp, int argi, long argl, long ret) at ./support/ab.c:378>:
{   5}                     BIO_get_callback_arg()
{   5}                     BIO_printf()
{   5}                     BIO_dump()
{   4}                 BIO_set_callback_arg()
{   4}                 apr_socket_connect()
{   4}                 APR_STATUS_IS_EINPROGRESS()
{   4}                 apr_pollset_add()
{   4}                 apr_pollset_remove()
{   4}                 apr_socket_close()
{   4}                 fprintf()
{   4}                 start_connect() <void start_connect (struct connection *c) at ./support/ab.c:1102> (recursive: see 4113)
{   4}                 ssl_proceed_handshake() <void ssl_proceed_handshake (struct connection *c) at ./support/ab.c:540>:
{   5}                     SSL_do_handshake()
{   5}                     SSL_get_error()
{   5}                     ssl_print_info() <void ssl_print_info (struct connection *c) at ./support/ab.c:512>:
{   6}                         BIO_printf()
{   6}                         SSL_get_peer_cert_chain()
{   6}                         SK_NUM()
{   6}                         SK_VALUE()
{   6}                         ssl_print_cert_info() <void ssl_print_cert_info (BIO *bio, X509 *cert) at ./support/ab.c:483>:
{   7}                             BIO_printf()
{   7}                             X509_get_version()
{   7}                             ASN1_UTCTIME_print()
{   7}                             X509_get_notBefore()
{   7}                             X509_get_notAfter()
{   7}                             EVP_PKEY_bits()
{   7}                             X509_get_pubkey()
{   7}                             X509_get_issuer_name()
{   7}                             X509_NAME_oneline()
{   7}                             X509_get_subject_name()
{   7}                             X509_get_ext_count()
{   6}                         X509_free()
{   6}                         SSL_get_peer_certificate()
{   6}                         ssl_print_connection_info() <int ssl_print_connection_info (BIO *bio, SSL *ssl) at ./support/ab.c:468>:
{   7}                             SSL_get_current_cipher()
{   7}                             BIO_printf()
{   7}                             SSL_CIPHER_get_version()
{   7}                             SSL_CIPHER_get_name()
{   7}                             SSL_CIPHER_get_bits()
{   6}                         SSL_SESSION_print()
{   6}                         SSL_get_session()
{   5}                     SSL_get_current_cipher()
{   5}                     SSL_CIPHER_get_bits()
{   5}                     SSL_get_peer_certificate()
{   5}                     EVP_PKEY_bits()
{   5}                     X509_get_pubkey()
{   5}                     malloc()
{   5}                     apr_snprintf()
{   5}                     SSL_CIPHER_get_version()
{   5}                     SSL_CIPHER_get_name()
{   5}                     write_request() <void write_request (struct connection *c) at ./test/zb.c:149>:
{   6}                         gettimeofday()
{   6}                         write()
{   6}                         FD_SET()
{   6}                         FD_CLR()
{   5}                     apr_pollset_add()
{   5}                     BIO_printf()
{   5}                     ERR_print_errors()
{   5}                     close_connection() <void close_connection (struct connection *c) at ./test/zb.c:284>:
{   6}                         gettimeofday()
{   6}                         timedif() <int timedif (struct timeval a, struct timeval b) at ./test/zb.c:172>:
{   6}                         close()
{   6}                         FD_CLR()
{   6}                         start_connect() <void start_connect (struct connection *c) at ./test/zb.c:245> (R):
{   7}                             socket()
{   7}                             err() <void err (char *s) at ./test/zb.c:138>:
{   8}                                 perror()
{   8}                                 exit()
{   7}                             nonblock() <void nonblock (int fd) at ./test/zb.c:162>:
{   8}                                 ioctl()
{   7}                             gettimeofday()
{   7}                             connect()
{   7}                             FD_SET()
{   7}                             close()
{   7}                             printf()
{   7}                             exit()
{   7}                             start_connect() <void start_connect (struct connection *c) at ./test/zb.c:245> (recursive: see 4207)
{   7}                             write_request() <void write_request (struct connection *c) at ./test/zb.c:149>:
{   8}                                 gettimeofday()
{   8}                                 write()
{   8}                                 FD_SET()
{   8}                                 FD_CLR()
{   4}                 write_request() <void write_request (struct connection *c) at ./support/ab.c:604>:
{   5}                     apr_time_now()
{   5}                     apr_socket_timeout_set()
{   5}                     printf()
{   5}                     close_connection() <void close_connection (struct connection *c) at ./test/zb.c:284>:
{   6}                         gettimeofday()
{   6}                         timedif() <int timedif (struct timeval a, struct timeval b) at ./test/zb.c:172>:
{   6}                         close()
{   6}                         FD_CLR()
{   6}                         start_connect() <void start_connect (struct connection *c) at ./test/zb.c:245> (R):
{   7}                             socket()
{   7}                             err() <void err (char *s) at ./test/zb.c:138>:
{   8}                                 perror()
{   8}                                 exit()
{   7}                             nonblock() <void nonblock (int fd) at ./test/zb.c:162>:
{   8}                                 ioctl()
{   7}                             gettimeofday()
{   7}                             connect()
{   7}                             FD_SET()
{   7}                             close()
{   7}                             printf()
{   7}                             exit()
{   7}                             start_connect() <void start_connect (struct connection *c) at ./test/zb.c:245> (recursive: see 4235)
{   7}                             write_request() <void write_request (struct connection *c) at ./test/zb.c:149>:
{   8}                                 gettimeofday()
{   8}                                 write()
{   8}                                 FD_SET()
{   8}                                 FD_CLR()
{   5}                     SSL_write()
{   5}                     BIO_printf()
{   5}                     ERR_print_errors()
{   5}                     apr_socket_send()
{   5}                     APR_STATUS_IS_EAGAIN()
{   5}                     apr_pollset_add()
{   3}             strlen()
{   3}             strncpy()
{   3}             strcpy()
{   3}             atoi()
{   3}             fflush()
{   3}             ap_max()
{   3}             write_request() <void write_request (struct connection *c) at ./support/ab.c:604>:
{   4}                 apr_time_now()
{   4}                 apr_socket_timeout_set()
{   4}                 printf()
{   4}                 close_connection() <void close_connection (struct connection *c) at ./test/zb.c:284>:
{   5}                     gettimeofday()
{   5}                     timedif() <int timedif (struct timeval a, struct timeval b) at ./test/zb.c:172>:
{   5}                     close()
{   5}                     FD_CLR()
{   5}                     start_connect() <void start_connect (struct connection *c) at ./test/zb.c:245> (R):
{   6}                         socket()
{   6}                         err() <void err (char *s) at ./test/zb.c:138>:
{   7}                             perror()
{   7}                             exit()
{   6}                         nonblock() <void nonblock (int fd) at ./test/zb.c:162>:
{   7}                             ioctl()
{   6}                         gettimeofday()
{   6}                         connect()
{   6}                         FD_SET()
{   6}                         close()
{   6}                         printf()
{   6}                         exit()
{   6}                         start_connect() <void start_connect (struct connection *c) at ./test/zb.c:245> (recursive: see 4275)
{   6}                         write_request() <void write_request (struct connection *c) at ./test/zb.c:149>:
{   7}                             gettimeofday()
{   7}                             write()
{   7}                             FD_SET()
{   7}                             FD_CLR()
{   4}                 SSL_write()
{   4}                 BIO_printf()
{   4}                 ERR_print_errors()
{   4}                 apr_socket_send()
{   4}                 APR_STATUS_IS_EAGAIN()
{   4}                 apr_pollset_add()
{   2}         apr_socket_connect()
{   2}         apr_pollset_remove()
{   2}         apr_socket_close()
{   2}         write_request() <void write_request (struct connection *c) at ./support/ab.c:604>:
{   3}             apr_time_now()
{   3}             apr_socket_timeout_set()
{   3}             printf()
{   3}             close_connection() <void close_connection (struct connection *c) at ./test/zb.c:284>:
{   4}                 gettimeofday()
{   4}                 timedif() <int timedif (struct timeval a, struct timeval b) at ./test/zb.c:172>:
{   4}                 close()
{   4}                 FD_CLR()
{   4}                 start_connect() <void start_connect (struct connection *c) at ./test/zb.c:245> (R):
{   5}                     socket()
{   5}                     err() <void err (char *s) at ./test/zb.c:138>:
{   6}                         perror()
{   6}                         exit()
{   5}                     nonblock() <void nonblock (int fd) at ./test/zb.c:162>:
{   6}                         ioctl()
{   5}                     gettimeofday()
{   5}                     connect()
{   5}                     FD_SET()
{   5}                     close()
{   5}                     printf()
{   5}                     exit()
{   5}                     start_connect() <void start_connect (struct connection *c) at ./test/zb.c:245> (recursive: see 4312)
{   5}                     write_request() <void write_request (struct connection *c) at ./test/zb.c:149>:
{   6}                         gettimeofday()
{   6}                         write()
{   6}                         FD_SET()
{   6}                         FD_CLR()
{   3}             SSL_write()
{   3}             BIO_printf()
{   3}             ERR_print_errors()
{   3}             apr_socket_send()
{   3}             APR_STATUS_IS_EAGAIN()
{   3}             apr_pollset_add()
{   2}         apr_pollset_add()
{   2}         output_html_results() <void output_html_results (void) at ./support/ab.c:978>:
{   3}             apr_time_now()
{   3}             printf()
{   3}             apr_time_sec()
{   3}             apr_time_usec()
{   3}             ap_min()
{   3}             ap_max()
{   2}         output_results() <void output_results (void) at ./support/ab.c:721>:
{   3}             apr_time_now()
{   3}             apr_time_sec()
{   3}             apr_time_usec()
{   3}             printf()
{   3}             ap_min()
{   3}             ap_max()
{   3}             sqrt()
{   3}             fopen()
{   3}             perror()
{   3}             exit()
{   3}             fprintf()
{   3}             time()
{   3}             apr_ctime()
{   3}             fclose()
{   3}             qsort()
{   3}             compradre() <int compradre (struct data *a, struct data *b) at ./support/ab.c:683>
{   3}             compri() <int compri (struct data *a, struct data *b) at ./support/ab.c:701>:
{   3}             compwait() <int compwait (struct data *a, struct data *b) at ./support/ab.c:712>
{   3}             comprando() <int comprando (struct data *a, struct data *b) at ./support/ab.c:692>
{   3}             SANE()
{   1}     getgrnam()
{   1}     setgid()
{   1}     max()
{   1}     apr_filepath_name_get()
{   1}     apr_pool_abort_set()
{   1}     oom() <int oom (int unused) at ./support/htcacheclean.c:141>:
{   2}         exit()
{   1}     apr_file_open_stderr()
{   1}     setterm() <void setterm (int unused) at ./support/htcacheclean.c:130>:
{   2}         apr_file_printf()
{   1}     usage() <void usage (void) at ./support/htcacheclean.c:702>:
{   2}         apr_file_printf()
{   2}         exit()
{   1}     apr_atoi64()
{   1}     apr_strtoff()
{   1}     apr_file_printf()
{   1}     apr_filepath_set()
{   1}     apr_filepath_get()
{   1}     apr_file_close()
{   1}     apr_proc_detach()
{   1}     apr_time_now()
{   1}     APR_RING_INIT()
{   1}     apr_sleep()
{   1}     apr_stat()
{   1}     process_dir() <int process_dir (char *path, apr_pool_t *pool) at ./support/htcacheclean.c:278> (R):
{   2}         APR_RING_ENTRY() <APR_RING_ENTRY (_direntry) at ./support/htcacheclean.c:71>
{   2}         APR_RING_INIT()
{   2}         apr_pool_create()
{   2}         apr_hash_make()
{   2}         apr_dir_open()
{   2}         apr_dir_read()
{   2}         strcmp()
{   2}         apr_pcalloc()
{   2}         apr_pstrcat()
{   2}         APR_RING_INSERT_TAIL()
{   2}         apr_dir_close()
{   2}         APR_RING_FIRST()
{   2}         APR_RING_SENTINEL()
{   2}         APR_RING_NEXT()
{   2}         strrchr()
{   2}         strchr()
{   2}         strncasecmp()
{   2}         strlen()
{   2}         apr_sleep()
{   2}         apr_stat()
{   2}         apr_pstrdup()
{   2}         process_dir() <int process_dir (char *path, apr_pool_t *pool) at ./support/htcacheclean.c:278> (recursive: see 4390)
{   2}         apr_dir_remove()
{   2}         apr_hash_set()
{   2}         strcasecmp()
{   2}         apr_hash_get()
{   2}         apr_hash_first()
{   2}         apr_hash_next()
{   2}         apr_hash_this()
{   2}         apr_file_open()
{   2}         apr_file_read_full()
{   2}         apr_file_seek()
{   2}         apr_file_close()
{   2}         apr_palloc()
{   2}         strcpy()
{   2}         apr_file_remove()
{   2}         apr_time_now()
{   2}         delete_entry() <void delete_entry (char *path, char *basename, apr_pool_t *pool) at ./support/htcacheclean.c:246>:
{   3}             apr_pool_create()
{   3}             apr_pstrcat()
{   3}             apr_file_remove()
{   3}             apr_pool_destroy()
{   3}             apr_sleep()
{   2}         delete_file() <void delete_file (char *path, char *basename, apr_pool_t *pool) at ./support/htcacheclean.c:220>:
{   3}             apr_pool_create()
{   3}             apr_pstrcat()
{   3}             apr_file_remove()
{   3}             apr_pool_destroy()
{   3}             apr_sleep()
{   2}         apr_pool_destroy()
{   1}     purge() <void purge (char *path, apr_pool_t *pool, apr_off_t max) at ./support/htcacheclean.c:595>:
{   2}         APR_RING_FIRST()
{   2}         APR_RING_SENTINEL()
{   2}         APR_RING_NEXT()
{   2}         printstats() <void printstats (apr_off_t total, apr_off_t sum, apr_off_t max, apr_off_t etotal, apr_off_t entries) at ./support/htcacheclean.c:156>:
{   3}             apr_file_printf()
{   2}         delete_entry() <void delete_entry (char *path, char *basename, apr_pool_t *pool) at ./support/htcacheclean.c:246>:
{   3}             apr_pool_create()
{   3}             apr_pstrcat()
{   3}             apr_file_remove()
{   3}             apr_pool_destroy()
{   3}             apr_sleep()
{   2}         APR_RING_REMOVE()
{   2}         APR_RING_EMPTY()
{   1}     terminate() <void terminate (void) at ./support/htdbm.c:109>:
{   2}         apr_terminate()
{   2}         pressanykey()
{   1}     htdbm_init() <apr_status_t htdbm_init (apr_pool_t **pool, htdbm_t **hdbm) at ./support/htdbm.c:133>:
{   2}         apr_pool_create()
{   2}         apr_signal()
{   2}         htdbm_interrupted() <void htdbm_interrupted (void) at ./support/htdbm.c:126>:
{   3}             htdbm_terminate() <void htdbm_terminate (htdbm_t *htdbm) at ./support/htdbm.c:117>:
{   4}                 apr_dbm_close()
{   3}             fprintf()
{   3}             exit()
{   2}         apr_pcalloc()
{   2}         apr_xlate_open()
{   2}         fprintf()
{   2}         apr_SHA1InitEBCDIC()
{   2}         apr_MD5InitEBCDIC()
{   1}     apr_strerror()
{   1}     htdbm_usage() <void htdbm_usage (void) at ./support/htdbm.c:340>:
{   2}         fprintf()
{   2}         exit()
{   1}     htdbm_open() <apr_status_t htdbm_open (htdbm_t *htdbm) at ./support/htdbm.c:170>:
{   2}         apr_dbm_open_ex()
{   1}     htdbm_valid_username() <apr_status_t htdbm_valid_username (htdbm_t *htdbm) at ./support/htdbm.c:327>:
{   2}         strlen()
{   2}         fprintf()
{   2}         strchr()
{   1}     apr_password_get()
{   1}     htdbm_verify() <apr_status_t htdbm_verify (htdbm_t *htdbm) at ./support/htdbm.c:216>:
{   2}         strlen()
{   2}         apr_dbm_exists()
{   2}         apr_dbm_fetch()
{   2}         apr_pstrndup()
{   2}         strchr()
{   2}         strncpy()
{   2}         strcpy()
{   2}         apr_password_validate()
{   1}     htdbm_del() <apr_status_t htdbm_del (htdbm_t *htdbm) at ./support/htdbm.c:204>:
{   2}         strlen()
{   2}         apr_dbm_exists()
{   2}         apr_dbm_delete()
{   1}     htdbm_list() <apr_status_t htdbm_list (htdbm_t *htdbm) at ./support/htdbm.c:237>:
{   2}         apr_dbm_firstkey()
{   2}         fprintf()
{   2}         apr_pcalloc()
{   2}         apr_dbm_fetch()
{   2}         strncpy()
{   2}         strchr()
{   2}         apr_dbm_nextkey()
{   1}     htdbm_make() <apr_status_t htdbm_make (htdbm_t *htdbm) at ./support/htdbm.c:290>:
{   2}         apr_sha1_base64()
{   2}         strlen()
{   2}         srand()
{   2}         time()
{   2}         to64() <void to64 (char *s, unsigned long v, int n) at ./support/htdbm.c:279>:
{   2}         rand()
{   2}         apr_md5_encode()
{   2}         apr_cpystrn()
{   2}         crypt()
{   2}         fprintf()
{   2}         apr_pstrdup()
{   1}     htdbm_save() <apr_status_t htdbm_save (htdbm_t *htdbm, int *changed) at ./support/htdbm.c:181>:
{   2}         strlen()
{   2}         apr_dbm_exists()
{   2}         apr_pstrcat()
{   2}         apr_dbm_store()
{   1}     htdbm_terminate() <void htdbm_terminate (htdbm_t *htdbm) at ./support/htdbm.c:117>:
{   2}         apr_dbm_close()
{   1}     terminate() <void terminate (void) at ./support/htdigest.c:175>:
{   2}         apr_terminate()
{   2}         pressanykey()
{   1}     interrupted() <void interrupted (void) at ./support/htdigest.c:169>:
{   2}         apr_file_printf()
{   2}         cleanup_tempfile_and_exit() <void cleanup_tempfile_and_exit (int rc) at ./support/htdigest.c:70>:
{   3}             apr_file_close()
{   3}             exit()
{   1}     usage() <void usage (void) at ./support/htdigest.c:162>:
{   2}         apr_file_printf()
{   2}         exit()
{   1}     apr_file_open()
{   1}     add_password() <void add_password (const char *user, const char *realm, apr_file_t *f) at ./support/htdigest.c:122>:
{   2}         apr_password_get()
{   2}         apr_file_printf()
{   2}         cleanup_tempfile_and_exit() <void cleanup_tempfile_and_exit (int rc) at ./support/htdigest.c:70>:
{   3}             apr_file_close()
{   3}             exit()
{   2}         strcmp()
{   2}         sprintf()
{   2}         apr_md5_init()
{   2}         apr_md5_set_xlate()
{   2}         apr_md5_update()
{   2}         strlen()
{   2}         apr_md5_final()
{   1}     apr_temp_dir_get()
{   1}     apr_psprintf()
{   1}     apr_file_mktemp()
{   1}     cleanup_tempfile_and_exit() <void cleanup_tempfile_and_exit (int rc) at ./support/htdigest.c:70>:
{   2}         apr_file_close()
{   2}         exit()
{   1}     apr_cpystrn()
{   1}     get_line() <int get_line (char *s, int n, apr_file_t *f) at ./support/htdigest.c:93>:
{   2}         apr_file_getc()
{   1}     putline() <void putline (apr_file_t *f, char *l) at ./support/htdigest.c:113>:
{   2}         apr_file_putc()
{   1}     getword() <void getword (char *word, char *line, char stop) at ./support/htdigest.c:78>
{   1}     apr_file_copy()
{   1}     terminate() <void terminate (void) at ./support/htpasswd.c:267>:
{   2}         apr_terminate()
{   2}         pressanykey()
{   1}     apr_SHA1InitEBCDIC()
{   1}     apr_MD5InitEBCDIC()
{   1}     check_args() <void check_args (apr_pool_t *pool, int argc, const char *const argv[], int *alg, int *mask, char **user, char **pwfilename, char **password) at ./support/htpasswd.c:275>:
{   2}         usage() <void usage (void) at ./support/htpasswd.c:206>:
{   3}             apr_file_printf()
{   3}             exit()
{   2}         apr_file_printf()
{   2}         exit()
{   2}         strlen()
{   2}         apr_pstrdup()
{   2}         strchr()
{   1}     exists() <int exists (char *fname, apr_pool_t *pool) at ./support/htpasswd.c:258>:
{   2}         apr_stat()
{   1}     accessible() <int accessible (apr_pool_t *pool, char *fname, int mode) at ./support/htpasswd.c:244>:
{   2}         apr_file_open()
{   2}         apr_file_close()
{   1}     mkrecord() <int mkrecord (char *user, char *record, apr_size_t rlen, char *passwd, int alg) at ./support/htpasswd.c:128>:
{   2}         apr_password_get()
{   2}         apr_snprintf()
{   2}         strcmp()
{   2}         apr_cpystrn()
{   2}         memset()
{   2}         apr_sha1_base64()
{   2}         strlen()
{   2}         srand()
{   2}         time()
{   2}         to64() <void to64 (char *s, unsigned long v, int n) at ./support/htpasswd.c:107>:
{   2}         rand()
{   2}         apr_md5_encode()
{   2}         crypt()
{   2}         strcpy()
{   2}         strcat()
{   1}     apr_file_gets()
{   1}     putline() <void putline (apr_file_t *f, const char *l) at ./support/htpasswd.c:118>:
{   2}         apr_file_puts()
{   1}     apr_initialize()
{   1}     usage() <void usage (void) at ./support/httxt2dbm.c:55>:
{   2}         apr_file_printf()
{   1}     apr_file_open_stdin()
{   1}     apr_dbm_open_ex()
{   1}     APR_STATUS_IS_ENOTIMPL()
{   1}     to_dbm() <apr_status_t to_dbm (apr_dbm_t *dbm, apr_file_t *fp, apr_pool_t *pool) at ./support/httxt2dbm.c:110>:
{   2}         apr_pool_create()
{   2}         apr_file_gets()
{   2}         apr_isspace()
{   2}         apr_pstrmemdup()
{   2}         apr_pool_clear()
{   2}         apr_file_printf()
{   2}         apr_dbm_store()
{   1}     apr_dbm_close()
{   1}     WSAStartup()
{   1}     MAKEWORD()
{   1}     get_line() <int get_line (char *s, int n) at ./support/logresolve.c:290>:
{   2}         fgets()
{   2}         strchr()
{   1}     apr_isdigit()
{   1}     cgethost() <void cgethost (struct in_addr ipnum, char *string, int check) at ./support/logresolve.c:150>:
{   2}         malloc()
{   2}         perror()
{   2}         fprintf()
{   2}         exit()
{   2}         gethostbyaddr()
{   2}         strdup()
{   2}         inet_ntoa()
{   2}         gethostbyname()
{   2}         free()
{   2}         strncpy()
{   1}     WSACleanup()
{   1}     stats() <void stats (FILE *output) at ./support/logresolve.c:233>:
{   2}         fprintf()
{   2}         inet_ntoa()
{   1}     apr_file_read()
{   1}     apr_time_exp_lt()
{   1}     apr_file_info_get()
{   1}     apr_time_sec()
{   1}     apr_time_from_sec()
{   1}     apr_time_exp_gmt()
{   1}     apr_strftime()
{   1}     apr_file_trunc()
{   1}     apr_file_write()
{   1}     clean_env() <void clean_env (void) at ./support/suexec.c:204>:
{   2}         calloc()
{   2}         log_err() <void log_err (const char *fmt, ...) at ./support/suexec.c:180>:
{   3}             va_start()
{   3}             err_output() <void err_output (int is_error, const char *fmt, va_list ap) at ./support/suexec.c:147>:
{   4}                 fopen()
{   4}                 fprintf()
{   4}                 perror()
{   4}                 exit()
{   4}                 time()
{   4}                 localtime()
{   4}                 vfprintf()
{   4}                 fflush()
{   3}             va_end()
{   2}         exit()
{   2}         sprintf()
{   2}         strdup()
{   2}         strncmp()
{   2}         strlen()
{   1}     getuid()
{   1}     getpwuid()
{   1}     log_err() <void log_err (const char *fmt, ...) at ./support/suexec.c:180>:
{   2}         va_start()
{   2}         err_output() <void err_output (int is_error, const char *fmt, va_list ap) at ./support/suexec.c:147>:
{   3}             fopen()
{   3}             fprintf()
{   3}             perror()
{   3}             exit()
{   3}             time()
{   3}             localtime()
{   3}             vfprintf()
{   3}             fflush()
{   2}         va_end()
{   1}     strstr()
{   1}     strspn()
{   1}     getpwnam()
{   1}     ufork()
{   1}     strerror() <char *strerror (int n) at ./srclib/pcre/pgrep.c:48>:
{   1}     waitpid()
{   1}     WIFSIGNALED()
{   1}     kill()
{   1}     getpid()
{   1}     WTERMSIG()
{   1}     WEXITSTATUS()
{   1}     log_no_err() <void log_no_err (const char *fmt, ...) at ./support/suexec.c:192>:
{   2}         va_start()
{   2}         err_output() <void err_output (int is_error, const char *fmt, va_list ap) at ./support/suexec.c:147>:
{   3}             fopen()
{   3}             fprintf()
{   3}             perror()
{   3}             exit()
{   3}             time()
{   3}             localtime()
{   3}             vfprintf()
{   3}             fflush()
{   2}         va_end()
{   1}     initgroups() <int initgroups (const char *name, gid_t basegid) at ./support/suexec.c:69>:
{   2}         setgrent()
{   2}         getgrent()
{   2}         strcmp()
{   2}         endgrent()
{   2}         setgroups()
{   1}     setuid()
{   1}     getcwd()
{   1}     chdir()
{   1}     lstat()
{   1}     S_ISDIR()
{   1}     S_ISLNK()
{   1}     umask()
{   1}     ap_execve()
{   1}     execv()
{   1}     pcre_maketables() <const unsigned char *pcre_maketables (void) at ./srclib/pcre/maketables.c:68>:
{   2}         malloc()
{   2}         tolower()
{   2}         islower()
{   2}         toupper()
{   2}         memset()
{   2}         isdigit()
{   2}         isupper()
{   2}         isspace()
{   2}         isxdigit()
{   2}         isgraph()
{   2}         isprint()
{   2}         ispunct()
{   2}         iscntrl()
{   2}         isalpha()
{   2}         isalnum()
{   2}         strchr()
{   1}     isprint()
{   1}     pcre_compile() <EXPORT pcre *pcre_compile (const char *pattern, int options, const char **errorptr, int *erroroffset, const unsigned char *tables) at ./srclib/pcre/pcre.c:4472>:
{   2}         valid_utf8() <int valid_utf8 (const uschar *string, int length) at ./srclib/pcre/pcre.c:4387>:
{   2}         DPRINTF()
{   2}         is_counted_repeat() <BOOL is_counted_repeat (const uschar *p) at ./srclib/pcre/pcre.c:1208>:
{   2}         check_escape() <int check_escape (const uschar **ptrptr, const char **errorptr, int bracount, int options, BOOL isclass) at ./srclib/pcre/pcre.c:911>:
{   2}         get_ucp() <int get_ucp (const uschar **ptrptr, BOOL *negptr, const char **errorptr) at ./srclib/pcre/pcre.c:1118>:
{   3}             strcmp()
{   2}         read_repeat_counts() <const uschar *read_repeat_counts (const uschar *p, int *minp, int *maxp, const char **errorptr) at ./srclib/pcre/pcre.c:1245>:
{   2}         check_posix_syntax() <BOOL check_posix_syntax (const uschar *ptr, const uschar **endptr, compile_data *cd) at ./srclib/pcre/pcre.c:1884>:
{   2}         GETCHARLEN()
{   2}         get_othercase_range() <BOOL get_othercase_range (int *cptr, int d, int *ocptr, int *odptr) at ./srclib/pcre/pcre.c:2038>:
{   3}             ucp_findchar() <int ucp_findchar (const int c, int *type_ptr, int *case_ptr) at ./srclib/pcre/ucp.c:63>:
{   2}         ord2utf8() <int ord2utf8 (int cvalue, uschar *buffer) at ./srclib/pcre/pcre.c:517>:
{   2}         compile_regex() <BOOL compile_regex (int options, int oldims, int *brackets, uschar **codeptr, const uschar **ptrptr, const char **errorptr, BOOL lookbehind, int skipbytes, int *firstbyteptr, int *reqbyteptr, branch_chain *bcptr, compile_data *cd) at ./srclib/pcre/pcre.c:3968> (R):
{   3}             PUT()
{   3}             PUTINC()
{   3}             compile_branch() <BOOL compile_branch (int *optionsptr, int *brackets, uschar **codeptr, const uschar **ptrptr, const char **errorptr, int *firstbyteptr, int *reqbyteptr, branch_chain *bcptr, compile_data *cd) at ./srclib/pcre/pcre.c:2091> (R):
{   4}                 complete_callout() <void complete_callout (uschar *previous_callout, const uschar *ptr, compile_data *cd) at ./srclib/pcre/pcre.c:2010>:
{   5}                     GET()
{   5}                     PUT()
{   4}                 auto_callout() <uschar *auto_callout (uschar *code, const uschar *ptr, compile_data *cd) at ./srclib/pcre/pcre.c:1982>:
{   5}                     PUT()
{   4}                 is_counted_repeat() <BOOL is_counted_repeat (const uschar *p) at ./srclib/pcre/pcre.c:1208>:
{   4}                 check_posix_syntax() <BOOL check_posix_syntax (const uschar *ptr, const uschar **endptr, compile_data *cd) at ./srclib/pcre/pcre.c:1884>:
{   4}                 memset()
{   4}                 GETCHARLEN()
{   4}                 check_posix_name() <int check_posix_name (const uschar *ptr, int len) at ./srclib/pcre/pcre.c:1916>:
{   5}                     strncmp()
{   4}                 strncmp()
{   4}                 check_escape() <int check_escape (const uschar **ptrptr, const char **errorptr, int bracount, int options, BOOL isclass) at ./srclib/pcre/pcre.c:911>:
{   4}                 get_ucp() <int get_ucp (const uschar **ptrptr, BOOL *negptr, const char **errorptr) at ./srclib/pcre/pcre.c:1118>:
{   5}                     strcmp()
{   4}                 get_othercase_range() <BOOL get_othercase_range (int *cptr, int d, int *ocptr, int *odptr) at ./srclib/pcre/pcre.c:2038>:
{   5}                     ucp_findchar() <int ucp_findchar (const int c, int *type_ptr, int *case_ptr) at ./srclib/pcre/ucp.c:63>:
{   4}                 ord2utf8() <int ord2utf8 (int cvalue, uschar *buffer) at ./srclib/pcre/pcre.c:517>:
{   4}                 ucp_findchar() <int ucp_findchar (const int c, int *type_ptr, int *case_ptr) at ./srclib/pcre/ucp.c:63>:
{   4}                 memcpy()
{   4}                 memmove()
{   4}                 PUT()
{   4}                 read_repeat_counts() <const uschar *read_repeat_counts (const uschar *p, int *minp, int *maxp, const char **errorptr) at ./srclib/pcre/pcre.c:1245>:
{   4}                 PUT2INC()
{   4}                 GET()
{   4}                 adjust_recurse() <void adjust_recurse (uschar *group, int adjust, BOOL utf8, compile_data *cd) at ./srclib/pcre/pcre.c:1953>:
{   5}                     find_recurse() <const uschar *find_recurse (const uschar *code, BOOL utf8) at ./srclib/pcre/pcre.c:1633>:
{   6}                         GET()
{   5}                     GET()
{   5}                     PUT()
{   4}                 PUTINC()
{   4}                 PUT2()
{   4}                 memcmp()
{   4}                 GET2()
{   4}                 find_bracket() <const uschar *find_bracket (const uschar *code, BOOL utf8, int number) at ./srclib/pcre/pcre.c:1559>:
{   5}                     GET2()
{   5}                     GET()
{   4}                 could_be_empty() <BOOL could_be_empty (const uschar *code, const uschar *endcode, branch_chain *bcptr, BOOL utf8) at ./srclib/pcre/pcre.c:1853>:
{   5}                     could_be_empty_branch() <BOOL could_be_empty_branch (const uschar *code, const uschar *endcode, BOOL utf8) at ./srclib/pcre/pcre.c:1709> (R):
{   6}                         first_significant_code() <const uschar *first_significant_code (const uschar *code, int *options, int optbit, BOOL skipassert) at ./srclib/pcre/pcre.c:1313>:
{   7}                             GET()
{   6}                         GET()
{   6}                         could_be_empty_branch() <BOOL could_be_empty_branch (const uschar *code, const uschar *endcode, BOOL utf8) at ./srclib/pcre/pcre.c:1709> (recursive: see 4787)
{   6}                         GET2()
{   4}                 compile_regex() <BOOL compile_regex (int options, int oldims, int *brackets, uschar **codeptr, const uschar **ptrptr, const char **errorptr, BOOL lookbehind, int skipbytes, int *firstbyteptr, int *reqbyteptr, branch_chain *bcptr, compile_data *cd) at ./srclib/pcre/pcre.c:3968> (recursive: see 4745)
{   3}             find_fixedlength() <int find_fixedlength (uschar *code, int options) at ./srclib/pcre/pcre.c:1372> (R):
{   4}                 find_fixedlength() <int find_fixedlength (uschar *code, int options) at ./srclib/pcre/pcre.c:1372> (recursive: see 4794)
{   4}                 GET()
{   4}                 GET2()
{   3}             DPRINTF()
{   3}             GET()
{   2}         is_anchored() <BOOL is_anchored (register const uschar *code, int *options, unsigned int bracket_map, unsigned int backref_map) at ./srclib/pcre/pcre.c:4179> (R):
{   3}             first_significant_code() <const uschar *first_significant_code (const uschar *code, int *options, int optbit, BOOL skipassert) at ./srclib/pcre/pcre.c:1313>:
{   4}                 GET()
{   3}             GET2()
{   3}             is_anchored() <BOOL is_anchored (register const uschar *code, int *options, unsigned int bracket_map, unsigned int backref_map) at ./srclib/pcre/pcre.c:4179> (recursive: see 4800)
{   3}             GET()
{   2}         find_firstassertedchar() <int find_firstassertedchar (const uschar *code, int *options, BOOL inassert) at ./srclib/pcre/pcre.c:4316> (R):
{   3}             first_significant_code() <const uschar *first_significant_code (const uschar *code, int *options, int optbit, BOOL skipassert) at ./srclib/pcre/pcre.c:1313>:
{   4}                 GET()
{   3}             find_firstassertedchar() <int find_firstassertedchar (const uschar *code, int *options, BOOL inassert) at ./srclib/pcre/pcre.c:4316> (recursive: see 4806)
{   3}             GET()
{   2}         is_startline() <BOOL is_startline (const uschar *code, unsigned int bracket_map, unsigned int backref_map) at ./srclib/pcre/pcre.c:4249> (R):
{   3}             first_significant_code() <const uschar *first_significant_code (const uschar *code, int *options, int optbit, BOOL skipassert) at ./srclib/pcre/pcre.c:1313>:
{   4}                 GET()
{   3}             GET2()
{   3}             is_startline() <BOOL is_startline (const uschar *code, unsigned int bracket_map, unsigned int backref_map) at ./srclib/pcre/pcre.c:4249> (recursive: see 4811)
{   3}             GET()
{   2}         printf()
{   2}         isprint()
{   2}         print_internals() <void print_internals (pcre *external_re, FILE *f) at ./srclib/pcre/printint.c:135>:
{   3}             fprintf()
{   3}             GET()
{   3}             print_char() <int print_char (FILE *f, uschar *ptr, BOOL utf8) at ./srclib/pcre/printint.c:70>:
{   4}                 isprint()
{   4}                 fprintf()
{   3}             printf()
{   3}             GET2()
{   3}             get_ucpname() <const char *get_ucpname (int property) at ./srclib/pcre/printint.c:115>:
{   3}             isprint()
{   1}     pcre_exec() <EXPORT int pcre_exec (const pcre *argument_re, const pcre_extra *extra_data, const char *subject, int length, int start_offset, int options, int *offsets, int offsetcount) at ./srclib/pcre/pcre.c:8808>:
{   2}         try_flipped() <real_pcre *try_flipped (const real_pcre *re, real_pcre *internal_re, const pcre_study_data *study, pcre_study_data *internal_study) at ./srclib/pcre/pcre.c:617>:
{   3}             byteflip4() <pcre_uint32 byteflip4 (pcre_uint32 value) at ./srclib/pcre/pcre.c:588>
{   3}             byteflip2() <pcre_uint16 byteflip2 (pcre_uint16 value) at ./srclib/pcre/pcre.c:581>
{   2}         valid_utf8() <int valid_utf8 (const uschar *string, int length) at ./srclib/pcre/pcre.c:4387>:
{   2}         DPRINTF()
{   2}         printf()
{   2}         pchars() <void pchars (const uschar *p, int length, BOOL is_subject, match_data *md) at ./srclib/pcre/pcre.c:876>:
{   3}             isprint()
{   3}             printf()
{   2}         match() <int match (REGISTER const uschar *eptr, REGISTER const uschar *ecode, int offset_top, match_data *md, unsigned long int ims, eptrblock *eptrb, int flags) at ./srclib/pcre/pcre.c:5960>:
{   3}             RRETURN()
{   3}             GET2()
{   3}             printf()
{   3}             pchars() <void pchars (const uschar *p, int length, BOOL is_subject, match_data *md) at ./srclib/pcre/pcre.c:876>:
{   4}                 isprint()
{   4}                 printf()
{   3}             DPRINTF()
{   3}             RMATCH()
{   3}             GET()
{   3}             memmove()
{   3}             BACKCHAR()
{   3}             memcpy()
{   3}             GETCHAR()
{   3}             GETCHARINCTEST()
{   3}             ucp_findchar() <int ucp_findchar (const int c, int *type_ptr, int *case_ptr) at ./srclib/pcre/ucp.c:63>:
{   3}             GETCHARLEN()
{   3}             match_ref() <BOOL match_ref (int offset, register const uschar *eptr, int length, match_data *md, unsigned long int ims) at ./srclib/pcre/pcre.c:5663>:
{   4}                 printf()
{   4}                 pchars() <void pchars (const uschar *p, int length, BOOL is_subject, match_data *md) at ./srclib/pcre/pcre.c:876>:
{   5}                     isprint()
{   5}                     printf()
{   3}             GETCHARINC()
{   3}             match_xclass() <BOOL match_xclass (int c, const uschar *data) at ./srclib/pcre/pcre.c:5715>:
{   4}                 GETCHARINC()
{   4}                 ucp_findchar() <int ucp_findchar (const int c, int *type_ptr, int *case_ptr) at ./srclib/pcre/ucp.c:63>:
{   3}             ord2utf8() <int ord2utf8 (int cvalue, uschar *buffer) at ./srclib/pcre/pcre.c:517>:
{   3}             memcmp()
{   2}         memcpy()
{   1}     free()
{   1}     pcre_fullinfo() <EXPORT int pcre_fullinfo (const pcre *argument_re, const pcre_extra *extra_data, int what, void *where) at ./srclib/pcre/pcre.c:705>:
{   2}         try_flipped() <real_pcre *try_flipped (const real_pcre *re, real_pcre *internal_re, const pcre_study_data *study, pcre_study_data *internal_study) at ./srclib/pcre/pcre.c:617>:
{   3}             byteflip4() <pcre_uint32 byteflip4 (pcre_uint32 value) at ./srclib/pcre/pcre.c:588>
{   3}             byteflip2() <pcre_uint16 byteflip2 (pcre_uint16 value) at ./srclib/pcre/pcre.c:581>
{   1}     usage() <int usage (int rc) at ./srclib/pcre/pcregrep.c:415>:
{   2}         fprintf()
{   1}     handle_option() <int handle_option (int letter, int options) at ./srclib/pcre/pcregrep.c:469>:
{   2}         help() <void help (void) at ./srclib/pcre/pcregrep.c:430>:
{   3}             printf()
{   3}             sprintf()
{   3}             strcpy()
{   2}         exit()
{   2}         fprintf()
{   2}         pcre_version() <EXPORT const char *pcre_version (void) at ./srclib/pcre/pcre.c:556>:
{   3}             XSTRING()
{   2}         usage() <int usage (int rc) at ./srclib/pcre/pcregrep.c:415>:
{   3}             fprintf()
{   1}     malloc()
{   1}     isspace()
{   1}     pcre_study() <EXPORT pcre_extra *pcre_study (const pcre *external_re, int options, const char **errorptr) at ./srclib/pcre/study.c:408>:
{   2}         pcre_fullinfo() <EXPORT int pcre_fullinfo (const pcre *argument_re, const pcre_extra *extra_data, int what, void *where) at ./srclib/pcre/pcre.c:705>:
{   3}             try_flipped() <real_pcre *try_flipped (const real_pcre *re, real_pcre *internal_re, const pcre_study_data *study, pcre_study_data *internal_study) at ./srclib/pcre/pcre.c:617>:
{   4}                 byteflip4() <pcre_uint32 byteflip4 (pcre_uint32 value) at ./srclib/pcre/pcre.c:588>
{   4}                 byteflip2() <pcre_uint16 byteflip2 (pcre_uint16 value) at ./srclib/pcre/pcre.c:581>
{   2}         memset()
{   2}         set_start_bits() <BOOL set_start_bits (const uschar *code, uschar *start_bits, BOOL caseless, BOOL utf8, compile_data *cd) at ./srclib/pcre/study.c:96> (R):
{   3}             set_start_bits() <BOOL set_start_bits (const uschar *code, uschar *start_bits, BOOL caseless, BOOL utf8, compile_data *cd) at ./srclib/pcre/study.c:96> (recursive: see 4894)
{   3}             GET()
{   3}             set_bit() <void set_bit (uschar *start_bits, unsigned int c, BOOL caseless, compile_data *cd) at ./srclib/pcre/study.c:68>:
{   3}             memset()
{   2}         memcpy()
{   1}     pcregrep() <int pcregrep (FILE *in, char *name) at ./srclib/pcre/pcregrep.c:291>:
{   2}         fgets()
{   2}         strlen()
{   2}         pcre_exec() <EXPORT int pcre_exec (const pcre *argument_re, const pcre_extra *extra_data, const char *subject, int length, int start_offset, int options, int *offsets, int offsetcount) at ./srclib/pcre/pcre.c:8808>:
{   3}             try_flipped() <real_pcre *try_flipped (const real_pcre *re, real_pcre *internal_re, const pcre_study_data *study, pcre_study_data *internal_study) at ./srclib/pcre/pcre.c:617>:
{   4}                 byteflip4() <pcre_uint32 byteflip4 (pcre_uint32 value) at ./srclib/pcre/pcre.c:588>
{   4}                 byteflip2() <pcre_uint16 byteflip2 (pcre_uint16 value) at ./srclib/pcre/pcre.c:581>
{   3}             valid_utf8() <int valid_utf8 (const uschar *string, int length) at ./srclib/pcre/pcre.c:4387>:
{   3}             DPRINTF()
{   3}             printf()
{   3}             pchars() <void pchars (const uschar *p, int length, BOOL is_subject, match_data *md) at ./srclib/pcre/pcre.c:876>:
{   4}                 isprint()
{   4}                 printf()
{   3}             match() <int match (REGISTER const uschar *eptr, REGISTER const uschar *ecode, int offset_top, match_data *md, unsigned long int ims, eptrblock *eptrb, int flags) at ./srclib/pcre/pcre.c:5960>:
{   4}                 RRETURN()
{   4}                 GET2()
{   4}                 printf()
{   4}                 pchars() <void pchars (const uschar *p, int length, BOOL is_subject, match_data *md) at ./srclib/pcre/pcre.c:876>:
{   5}                     isprint()
{   5}                     printf()
{   4}                 DPRINTF()
{   4}                 RMATCH()
{   4}                 GET()
{   4}                 memmove()
{   4}                 BACKCHAR()
{   4}                 memcpy()
{   4}                 GETCHAR()
{   4}                 GETCHARINCTEST()
{   4}                 ucp_findchar() <int ucp_findchar (const int c, int *type_ptr, int *case_ptr) at ./srclib/pcre/ucp.c:63>:
{   4}                 GETCHARLEN()
{   4}                 match_ref() <BOOL match_ref (int offset, register const uschar *eptr, int length, match_data *md, unsigned long int ims) at ./srclib/pcre/pcre.c:5663>:
{   5}                     printf()
{   5}                     pchars() <void pchars (const uschar *p, int length, BOOL is_subject, match_data *md) at ./srclib/pcre/pcre.c:876>:
{   6}                         isprint()
{   6}                         printf()
{   4}                 GETCHARINC()
{   4}                 match_xclass() <BOOL match_xclass (int c, const uschar *data) at ./srclib/pcre/pcre.c:5715>:
{   5}                     GETCHARINC()
{   5}                     ucp_findchar() <int ucp_findchar (const int c, int *type_ptr, int *case_ptr) at ./srclib/pcre/ucp.c:63>:
{   4}                 ord2utf8() <int ord2utf8 (int cvalue, uschar *buffer) at ./srclib/pcre/pcre.c:517>:
{   4}                 memcmp()
{   3}             memcpy()
{   2}         fprintf()
{   1}     grep_or_recurse() <int grep_or_recurse (char *filename, BOOL dir_recurse, BOOL show_filenames, BOOL only_one_at_top) at ./srclib/pcre/pcregrep.c:354> (R):
{   2}         isdirectory() <int isdirectory (char *filename) at ./srclib/pcre/pcregrep.c:255>:
{   3}             stat()
{   3}             GetFileAttributes()
{   2}         opendirectory() <directory_type *opendirectory (char *filename) at ./srclib/pcre/pcregrep.c:256>:
{   3}             opendir()
{   3}             strlen()
{   3}             malloc()
{   3}             fprintf()
{   3}             exit()
{   3}             memcpy()
{   3}             FindFirstFile()
{   3}             free()
{   3}             GetLastError()
{   2}         fprintf()
{   2}         strerror() <char *strerror (int n) at ./srclib/pcre/pgrep.c:48>:
{   2}         readdirectory() <char *readdirectory (directory_type *dir) at ./srclib/pcre/pcregrep.c:257>:
{   3}             readdir()
{   3}             strcmp()
{   3}             FindNextFile()
{   2}         sprintf()
{   2}         grep_or_recurse() <int grep_or_recurse (char *filename, BOOL dir_recurse, BOOL show_filenames, BOOL only_one_at_top) at ./srclib/pcre/pcregrep.c:354> (recursive: see 4943)
{   2}         closedirectory() <void closedirectory (directory_type *dir) at ./srclib/pcre/pcregrep.c:258>:
{   3}             closedir()
{   3}             FindClose()
{   3}             free()
{   2}         fopen()
{   2}         pcregrep() <int pcregrep (FILE *in, char *name) at ./srclib/pcre/pcregrep.c:291>:
{   3}             fgets()
{   3}             strlen()
{   3}             pcre_exec() <EXPORT int pcre_exec (const pcre *argument_re, const pcre_extra *extra_data, const char *subject, int length, int start_offset, int options, int *offsets, int offsetcount) at ./srclib/pcre/pcre.c:8808>:
{   4}                 try_flipped() <real_pcre *try_flipped (const real_pcre *re, real_pcre *internal_re, const pcre_study_data *study, pcre_study_data *internal_study) at ./srclib/pcre/pcre.c:617>:
{   5}                     byteflip4() <pcre_uint32 byteflip4 (pcre_uint32 value) at ./srclib/pcre/pcre.c:588>
{   5}                     byteflip2() <pcre_uint16 byteflip2 (pcre_uint16 value) at ./srclib/pcre/pcre.c:581>
{   4}                 valid_utf8() <int valid_utf8 (const uschar *string, int length) at ./srclib/pcre/pcre.c:4387>:
{   4}                 DPRINTF()
{   4}                 printf()
{   4}                 pchars() <void pchars (const uschar *p, int length, BOOL is_subject, match_data *md) at ./srclib/pcre/pcre.c:876>:
{   5}                     isprint()
{   5}                     printf()
{   4}                 match() <int match (REGISTER const uschar *eptr, REGISTER const uschar *ecode, int offset_top, match_data *md, unsigned long int ims, eptrblock *eptrb, int flags) at ./srclib/pcre/pcre.c:5960>:
{   5}                     RRETURN()
{   5}                     GET2()
{   5}                     printf()
{   5}                     pchars() <void pchars (const uschar *p, int length, BOOL is_subject, match_data *md) at ./srclib/pcre/pcre.c:876>:
{   6}                         isprint()
{   6}                         printf()
{   5}                     DPRINTF()
{   5}                     RMATCH()
{   5}                     GET()
{   5}                     memmove()
{   5}                     BACKCHAR()
{   5}                     memcpy()
{   5}                     GETCHAR()
{   5}                     GETCHARINCTEST()
{   5}                     ucp_findchar() <int ucp_findchar (const int c, int *type_ptr, int *case_ptr) at ./srclib/pcre/ucp.c:63>:
{   5}                     GETCHARLEN()
{   5}                     match_ref() <BOOL match_ref (int offset, register const uschar *eptr, int length, match_data *md, unsigned long int ims) at ./srclib/pcre/pcre.c:5663>:
{   6}                         printf()
{   6}                         pchars() <void pchars (const uschar *p, int length, BOOL is_subject, match_data *md) at ./srclib/pcre/pcre.c:876>:
{   7}                             isprint()
{   7}                             printf()
{   5}                     GETCHARINC()
{   5}                     match_xclass() <BOOL match_xclass (int c, const uschar *data) at ./srclib/pcre/pcre.c:5715>:
{   6}                         GETCHARINC()
{   6}                         ucp_findchar() <int ucp_findchar (const int c, int *type_ptr, int *case_ptr) at ./srclib/pcre/ucp.c:63>:
{   5}                     ord2utf8() <int ord2utf8 (int cvalue, uschar *buffer) at ./srclib/pcre/pcre.c:517>:
{   5}                     memcmp()
{   4}                 memcpy()
{   3}             fprintf()
{   2}         fclose()
{   1}     get_value() <int get_value (unsigned char *str, unsigned char **endptr) at ./srclib/pcre/pcretest.c:135>:
{   2}         isspace()
{   2}         isdigit()
{   1}     pcre_version() <EXPORT const char *pcre_version (void) at ./srclib/pcre/pcre.c:556>:
{   2}         XSTRING()
{   1}     pcre_config() <EXPORT int pcre_config (int what, void *where) at ./srclib/pcre/pcre.c:806>:
{   1}     new_malloc() <void *new_malloc (size_t size) at ./srclib/pcre/pcretest.c:401>:
{   2}         malloc()
{   2}         fprintf()
{   1}     new_free() <void new_free (void *block) at ./srclib/pcre/pcretest.c:410>:
{   2}         fprintf()
{   2}         free()
{   1}     stack_malloc() <void *stack_malloc (size_t size) at ./srclib/pcre/pcretest.c:420>:
{   2}         malloc()
{   2}         fprintf()
{   1}     stack_free() <void stack_free (void *block) at ./srclib/pcre/pcretest.c:428>:
{   2}         fprintf()
{   2}         free()
{   1}     fread()
{   1}     byteflip() <long int byteflip (long int value, int n) at ./srclib/pcre/pcretest.c:456>
{   1}     new_info() <void new_info (pcre *re, pcre_extra *study, int option, void *ptr) at ./srclib/pcre/pcretest.c:442>:
{   2}         pcre_fullinfo() <EXPORT int pcre_fullinfo (const pcre *argument_re, const pcre_extra *extra_data, int what, void *where) at ./srclib/pcre/pcre.c:705>:
{   3}             try_flipped() <real_pcre *try_flipped (const real_pcre *re, real_pcre *internal_re, const pcre_study_data *study, pcre_study_data *internal_study) at ./srclib/pcre/pcre.c:617>:
{   4}                 byteflip4() <pcre_uint32 byteflip4 (pcre_uint32 value) at ./srclib/pcre/pcre.c:588>
{   4}                 byteflip2() <pcre_uint16 byteflip2 (pcre_uint16 value) at ./srclib/pcre/pcre.c:581>
{   2}         fprintf()
{   1}     isalnum()
{   1}     setlocale()
{   1}     regcomp() <EXPORT int regcomp (regex_t *preg, const char *pattern, int cflags) at ./srclib/pcre/pcreposix.c:218>:
{   2}         pcre_compile() <EXPORT pcre *pcre_compile (const char *pattern, int options, const char **errorptr, int *erroroffset, const unsigned char *tables) at ./srclib/pcre/pcre.c:4472>:
{   3}             valid_utf8() <int valid_utf8 (const uschar *string, int length) at ./srclib/pcre/pcre.c:4387>:
{   3}             DPRINTF()
{   3}             is_counted_repeat() <BOOL is_counted_repeat (const uschar *p) at ./srclib/pcre/pcre.c:1208>:
{   3}             check_escape() <int check_escape (const uschar **ptrptr, const char **errorptr, int bracount, int options, BOOL isclass) at ./srclib/pcre/pcre.c:911>:
{   3}             get_ucp() <int get_ucp (const uschar **ptrptr, BOOL *negptr, const char **errorptr) at ./srclib/pcre/pcre.c:1118>:
{   4}                 strcmp()
{   3}             read_repeat_counts() <const uschar *read_repeat_counts (const uschar *p, int *minp, int *maxp, const char **errorptr) at ./srclib/pcre/pcre.c:1245>:
{   3}             check_posix_syntax() <BOOL check_posix_syntax (const uschar *ptr, const uschar **endptr, compile_data *cd) at ./srclib/pcre/pcre.c:1884>:
{   3}             GETCHARLEN()
{   3}             get_othercase_range() <BOOL get_othercase_range (int *cptr, int d, int *ocptr, int *odptr) at ./srclib/pcre/pcre.c:2038>:
{   4}                 ucp_findchar() <int ucp_findchar (const int c, int *type_ptr, int *case_ptr) at ./srclib/pcre/ucp.c:63>:
{   3}             ord2utf8() <int ord2utf8 (int cvalue, uschar *buffer) at ./srclib/pcre/pcre.c:517>:
{   3}             compile_regex() <BOOL compile_regex (int options, int oldims, int *brackets, uschar **codeptr, const uschar **ptrptr, const char **errorptr, BOOL lookbehind, int skipbytes, int *firstbyteptr, int *reqbyteptr, branch_chain *bcptr, compile_data *cd) at ./srclib/pcre/pcre.c:3968> (R):
{   4}                 PUT()
{   4}                 PUTINC()
{   4}                 compile_branch() <BOOL compile_branch (int *optionsptr, int *brackets, uschar **codeptr, const uschar **ptrptr, const char **errorptr, int *firstbyteptr, int *reqbyteptr, branch_chain *bcptr, compile_data *cd) at ./srclib/pcre/pcre.c:2091> (R):
{   5}                     complete_callout() <void complete_callout (uschar *previous_callout, const uschar *ptr, compile_data *cd) at ./srclib/pcre/pcre.c:2010>:
{   6}                         GET()
{   6}                         PUT()
{   5}                     auto_callout() <uschar *auto_callout (uschar *code, const uschar *ptr, compile_data *cd) at ./srclib/pcre/pcre.c:1982>:
{   6}                         PUT()
{   5}                     is_counted_repeat() <BOOL is_counted_repeat (const uschar *p) at ./srclib/pcre/pcre.c:1208>:
{   5}                     check_posix_syntax() <BOOL check_posix_syntax (const uschar *ptr, const uschar **endptr, compile_data *cd) at ./srclib/pcre/pcre.c:1884>:
{   5}                     memset()
{   5}                     GETCHARLEN()
{   5}                     check_posix_name() <int check_posix_name (const uschar *ptr, int len) at ./srclib/pcre/pcre.c:1916>:
{   6}                         strncmp()
{   5}                     strncmp()
{   5}                     check_escape() <int check_escape (const uschar **ptrptr, const char **errorptr, int bracount, int options, BOOL isclass) at ./srclib/pcre/pcre.c:911>:
{   5}                     get_ucp() <int get_ucp (const uschar **ptrptr, BOOL *negptr, const char **errorptr) at ./srclib/pcre/pcre.c:1118>:
{   6}                         strcmp()
{   5}                     get_othercase_range() <BOOL get_othercase_range (int *cptr, int d, int *ocptr, int *odptr) at ./srclib/pcre/pcre.c:2038>:
{   6}                         ucp_findchar() <int ucp_findchar (const int c, int *type_ptr, int *case_ptr) at ./srclib/pcre/ucp.c:63>:
{   5}                     ord2utf8() <int ord2utf8 (int cvalue, uschar *buffer) at ./srclib/pcre/pcre.c:517>:
{   5}                     ucp_findchar() <int ucp_findchar (const int c, int *type_ptr, int *case_ptr) at ./srclib/pcre/ucp.c:63>:
{   5}                     memcpy()
{   5}                     memmove()
{   5}                     PUT()
{   5}                     read_repeat_counts() <const uschar *read_repeat_counts (const uschar *p, int *minp, int *maxp, const char **errorptr) at ./srclib/pcre/pcre.c:1245>:
{   5}                     PUT2INC()
{   5}                     GET()
{   5}                     adjust_recurse() <void adjust_recurse (uschar *group, int adjust, BOOL utf8, compile_data *cd) at ./srclib/pcre/pcre.c:1953>:
{   6}                         find_recurse() <const uschar *find_recurse (const uschar *code, BOOL utf8) at ./srclib/pcre/pcre.c:1633>:
{   7}                             GET()
{   6}                         GET()
{   6}                         PUT()
{   5}                     PUTINC()
{   5}                     PUT2()
{   5}                     memcmp()
{   5}                     GET2()
{   5}                     find_bracket() <const uschar *find_bracket (const uschar *code, BOOL utf8, int number) at ./srclib/pcre/pcre.c:1559>:
{   6}                         GET2()
{   6}                         GET()
{   5}                     could_be_empty() <BOOL could_be_empty (const uschar *code, const uschar *endcode, branch_chain *bcptr, BOOL utf8) at ./srclib/pcre/pcre.c:1853>:
{   6}                         could_be_empty_branch() <BOOL could_be_empty_branch (const uschar *code, const uschar *endcode, BOOL utf8) at ./srclib/pcre/pcre.c:1709> (R):
{   7}                             first_significant_code() <const uschar *first_significant_code (const uschar *code, int *options, int optbit, BOOL skipassert) at ./srclib/pcre/pcre.c:1313>:
{   8}                                 GET()
{   7}                             GET()
{   7}                             could_be_empty_branch() <BOOL could_be_empty_branch (const uschar *code, const uschar *endcode, BOOL utf8) at ./srclib/pcre/pcre.c:1709> (recursive: see 5098)
{   7}                             GET2()
{   5}                     compile_regex() <BOOL compile_regex (int options, int oldims, int *brackets, uschar **codeptr, const uschar **ptrptr, const char **errorptr, BOOL lookbehind, int skipbytes, int *firstbyteptr, int *reqbyteptr, branch_chain *bcptr, compile_data *cd) at ./srclib/pcre/pcre.c:3968> (recursive: see 5056)
{   4}                 find_fixedlength() <int find_fixedlength (uschar *code, int options) at ./srclib/pcre/pcre.c:1372> (R):
{   5}                     find_fixedlength() <int find_fixedlength (uschar *code, int options) at ./srclib/pcre/pcre.c:1372> (recursive: see 5105)
{   5}                     GET()
{   5}                     GET2()
{   4}                 DPRINTF()
{   4}                 GET()
{   3}             is_anchored() <BOOL is_anchored (register const uschar *code, int *options, unsigned int bracket_map, unsigned int backref_map) at ./srclib/pcre/pcre.c:4179> (R):
{   4}                 first_significant_code() <const uschar *first_significant_code (const uschar *code, int *options, int optbit, BOOL skipassert) at ./srclib/pcre/pcre.c:1313>:
{   5}                     GET()
{   4}                 GET2()
{   4}                 is_anchored() <BOOL is_anchored (register const uschar *code, int *options, unsigned int bracket_map, unsigned int backref_map) at ./srclib/pcre/pcre.c:4179> (recursive: see 5111)
{   4}                 GET()
{   3}             find_firstassertedchar() <int find_firstassertedchar (const uschar *code, int *options, BOOL inassert) at ./srclib/pcre/pcre.c:4316> (R):
{   4}                 first_significant_code() <const uschar *first_significant_code (const uschar *code, int *options, int optbit, BOOL skipassert) at ./srclib/pcre/pcre.c:1313>:
{   5}                     GET()
{   4}                 find_firstassertedchar() <int find_firstassertedchar (const uschar *code, int *options, BOOL inassert) at ./srclib/pcre/pcre.c:4316> (recursive: see 5117)
{   4}                 GET()
{   3}             is_startline() <BOOL is_startline (const uschar *code, unsigned int bracket_map, unsigned int backref_map) at ./srclib/pcre/pcre.c:4249> (R):
{   4}                 first_significant_code() <const uschar *first_significant_code (const uschar *code, int *options, int optbit, BOOL skipassert) at ./srclib/pcre/pcre.c:1313>:
{   5}                     GET()
{   4}                 GET2()
{   4}                 is_startline() <BOOL is_startline (const uschar *code, unsigned int bracket_map, unsigned int backref_map) at ./srclib/pcre/pcre.c:4249> (recursive: see 5122)
{   4}                 GET()
{   3}             printf()
{   3}             isprint()
{   3}             print_internals() <void print_internals (pcre *external_re, FILE *f) at ./srclib/pcre/printint.c:135>:
{   4}                 fprintf()
{   4}                 GET()
{   4}                 print_char() <int print_char (FILE *f, uschar *ptr, BOOL utf8) at ./srclib/pcre/printint.c:70>:
{   5}                     isprint()
{   5}                     fprintf()
{   4}                 printf()
{   4}                 GET2()
{   4}                 get_ucpname() <const char *get_ucpname (int property) at ./srclib/pcre/printint.c:115>:
{   4}                 isprint()
{   2}         pcre_posix_error_code() <int pcre_posix_error_code (const char *s) at ./srclib/pcre/pcreposix.c:145>:
{   3}             strcmp()
{   2}         pcre_info() <EXPORT int pcre_info (const pcre *argument_re, int *optptr, int *first_byte) at ./srclib/pcre/pcre.c:669>:
{   3}             try_flipped() <real_pcre *try_flipped (const real_pcre *re, real_pcre *internal_re, const pcre_study_data *study, pcre_study_data *internal_study) at ./srclib/pcre/pcre.c:617>:
{   4}                 byteflip4() <pcre_uint32 byteflip4 (pcre_uint32 value) at ./srclib/pcre/pcre.c:588>
{   4}                 byteflip2() <pcre_uint16 byteflip2 (pcre_uint16 value) at ./srclib/pcre/pcre.c:581>
{   1}     regerror() <EXPORT size_t regerror (int errcode, const regex_t *preg, char *errbuf, size_t errbuf_size) at ./srclib/pcre/pcreposix.c:160>:
{   2}         strlen()
{   2}         sprintf()
{   2}         strncpy()
{   1}     clock()
{   1}     print_internals() <void print_internals (pcre *external_re, FILE *f) at ./srclib/pcre/printint.c:135>:
{   2}         fprintf()
{   2}         GET()
{   2}         print_char() <int print_char (FILE *f, uschar *ptr, BOOL utf8) at ./srclib/pcre/printint.c:70>:
{   3}             isprint()
{   3}             fprintf()
{   2}         printf()
{   2}         GET2()
{   2}         get_ucpname() <const char *get_ucpname (int property) at ./srclib/pcre/printint.c:115>:
{   2}         isprint()
{   1}     pcre_info() <EXPORT int pcre_info (const pcre *argument_re, int *optptr, int *first_byte) at ./srclib/pcre/pcre.c:669>:
{   2}         try_flipped() <real_pcre *try_flipped (const real_pcre *re, real_pcre *internal_re, const pcre_study_data *study, pcre_study_data *internal_study) at ./srclib/pcre/pcre.c:617>:
{   3}             byteflip4() <pcre_uint32 byteflip4 (pcre_uint32 value) at ./srclib/pcre/pcre.c:588>
{   3}             byteflip2() <pcre_uint16 byteflip2 (pcre_uint16 value) at ./srclib/pcre/pcre.c:581>
{   1}     GET2()
{   1}     fwrite()
{   1}     callout() <int callout (pcre_callout_block *cb) at ./srclib/pcre/pcretest.c:306>:
{   2}         fprintf()
{   2}         pchars() <int pchars (unsigned char *p, int length, FILE *f) at ./srclib/pcre/pcretest.c:249>:
{   3}             utf82ord() <int utf82ord (unsigned char *buffer, int *vptr) at ./srclib/pcre/pcretest.c:199>:
{   3}             isprint()
{   3}             fprintf()
{   1}     isdigit()
{   1}     isxdigit()
{   1}     tolower()
{   1}     ord2utf8() <int ord2utf8 (int cvalue, unsigned char *buffer) at ./srclib/pcre/pcretest.c:164>:
{   1}     pcre_get_stringnumber() <int pcre_get_stringnumber (const pcre *code, const char *stringname) at ./srclib/pcre/get.c:70>:
{   2}         pcre_fullinfo() <EXPORT int pcre_fullinfo (const pcre *argument_re, const pcre_extra *extra_data, int what, void *where) at ./srclib/pcre/pcre.c:705>:
{   3}             try_flipped() <real_pcre *try_flipped (const real_pcre *re, real_pcre *internal_re, const pcre_study_data *study, pcre_study_data *internal_study) at ./srclib/pcre/pcre.c:617>:
{   4}                 byteflip4() <pcre_uint32 byteflip4 (pcre_uint32 value) at ./srclib/pcre/pcre.c:588>
{   4}                 byteflip2() <pcre_uint16 byteflip2 (pcre_uint16 value) at ./srclib/pcre/pcre.c:581>
{   2}         strcmp()
{   1}     regexec() <EXPORT int regexec (const regex_t *preg, const char *string, size_t nmatch, regmatch_t pmatch[], int eflags) at ./srclib/pcre/pcreposix.c:251>:
{   2}         malloc()
{   2}         pcre_exec() <EXPORT int pcre_exec (const pcre *argument_re, const pcre_extra *extra_data, const char *subject, int length, int start_offset, int options, int *offsets, int offsetcount) at ./srclib/pcre/pcre.c:8808>:
{   3}             try_flipped() <real_pcre *try_flipped (const real_pcre *re, real_pcre *internal_re, const pcre_study_data *study, pcre_study_data *internal_study) at ./srclib/pcre/pcre.c:617>:
{   4}                 byteflip4() <pcre_uint32 byteflip4 (pcre_uint32 value) at ./srclib/pcre/pcre.c:588>
{   4}                 byteflip2() <pcre_uint16 byteflip2 (pcre_uint16 value) at ./srclib/pcre/pcre.c:581>
{   3}             valid_utf8() <int valid_utf8 (const uschar *string, int length) at ./srclib/pcre/pcre.c:4387>:
{   3}             DPRINTF()
{   3}             printf()
{   3}             pchars() <void pchars (const uschar *p, int length, BOOL is_subject, match_data *md) at ./srclib/pcre/pcre.c:876>:
{   4}                 isprint()
{   4}                 printf()
{   3}             match() <int match (REGISTER const uschar *eptr, REGISTER const uschar *ecode, int offset_top, match_data *md, unsigned long int ims, eptrblock *eptrb, int flags) at ./srclib/pcre/pcre.c:5960>:
{   4}                 RRETURN()
{   4}                 GET2()
{   4}                 printf()
{   4}                 pchars() <void pchars (const uschar *p, int length, BOOL is_subject, match_data *md) at ./srclib/pcre/pcre.c:876>:
{   5}                     isprint()
{   5}                     printf()
{   4}                 DPRINTF()
{   4}                 RMATCH()
{   4}                 GET()
{   4}                 memmove()
{   4}                 BACKCHAR()
{   4}                 memcpy()
{   4}                 GETCHAR()
{   4}                 GETCHARINCTEST()
{   4}                 ucp_findchar() <int ucp_findchar (const int c, int *type_ptr, int *case_ptr) at ./srclib/pcre/ucp.c:63>:
{   4}                 GETCHARLEN()
{   4}                 match_ref() <BOOL match_ref (int offset, register const uschar *eptr, int length, match_data *md, unsigned long int ims) at ./srclib/pcre/pcre.c:5663>:
{   5}                     printf()
{   5}                     pchars() <void pchars (const uschar *p, int length, BOOL is_subject, match_data *md) at ./srclib/pcre/pcre.c:876>:
{   6}                         isprint()
{   6}                         printf()
{   4}                 GETCHARINC()
{   4}                 match_xclass() <BOOL match_xclass (int c, const uschar *data) at ./srclib/pcre/pcre.c:5715>:
{   5}                     GETCHARINC()
{   5}                     ucp_findchar() <int ucp_findchar (const int c, int *type_ptr, int *case_ptr) at ./srclib/pcre/ucp.c:63>:
{   4}                 ord2utf8() <int ord2utf8 (int cvalue, uschar *buffer) at ./srclib/pcre/pcre.c:517>:
{   4}                 memcmp()
{   3}             memcpy()
{   2}         strlen()
{   2}         free()
{   1}     pchars() <int pchars (unsigned char *p, int length, FILE *f) at ./srclib/pcre/pcretest.c:249>:
{   2}         utf82ord() <int utf82ord (unsigned char *buffer, int *vptr) at ./srclib/pcre/pcretest.c:199>:
{   2}         isprint()
{   2}         fprintf()
{   1}     pcre_copy_substring() <int pcre_copy_substring (const char *subject, int *ovector, int stringcount, int stringnumber, char *buffer, int size) at ./srclib/pcre/get.c:129>:
{   2}         memcpy()
{   1}     pcre_get_substring() <int pcre_get_substring (const char *subject, int *ovector, int stringcount, int stringnumber, const char **stringptr) at ./srclib/pcre/get.c:283>:
{   2}         memcpy()
{   1}     pcre_free_substring() <void pcre_free_substring (const char *pointer) at ./srclib/pcre/get.c:352>:
{   1}     pcre_get_substring_list() <int pcre_get_substring_list (const char *subject, int *ovector, int stringcount, const char ***listptr) at ./srclib/pcre/get.c:205>:
{   2}         memcpy()
{   1}     pcre_free_substring_list() <void pcre_free_substring_list (const char **pointer) at ./srclib/pcre/get.c:250>:
{   1}     regfree() <EXPORT void regfree (regex_t *preg) at ./srclib/pcre/pcreposix.c:195>:
{   1}     usage() <int usage (int rc) at ./srclib/pcre/pgrep.c:120>:
{   2}         fprintf()
{   1}     pgrep() <int pgrep (FILE *in, char *name) at ./srclib/pcre/pgrep.c:62>:
{   2}         fgets()
{   2}         strlen()
{   2}         pcre_exec() <EXPORT int pcre_exec (const pcre *argument_re, const pcre_extra *extra_data, const char *subject, int length, int start_offset, int options, int *offsets, int offsetcount) at ./srclib/pcre/pcre.c:8808>:
{   3}             try_flipped() <real_pcre *try_flipped (const real_pcre *re, real_pcre *internal_re, const pcre_study_data *study, pcre_study_data *internal_study) at ./srclib/pcre/pcre.c:617>:
{   4}                 byteflip4() <pcre_uint32 byteflip4 (pcre_uint32 value) at ./srclib/pcre/pcre.c:588>
{   4}                 byteflip2() <pcre_uint16 byteflip2 (pcre_uint16 value) at ./srclib/pcre/pcre.c:581>
{   3}             valid_utf8() <int valid_utf8 (const uschar *string, int length) at ./srclib/pcre/pcre.c:4387>:
{   3}             DPRINTF()
{   3}             printf()
{   3}             pchars() <void pchars (const uschar *p, int length, BOOL is_subject, match_data *md) at ./srclib/pcre/pcre.c:876>:
{   4}                 isprint()
{   4}                 printf()
{   3}             match() <int match (REGISTER const uschar *eptr, REGISTER const uschar *ecode, int offset_top, match_data *md, unsigned long int ims, eptrblock *eptrb, int flags) at ./srclib/pcre/pcre.c:5960>:
{   4}                 RRETURN()
{   4}                 GET2()
{   4}                 printf()
{   4}                 pchars() <void pchars (const uschar *p, int length, BOOL is_subject, match_data *md) at ./srclib/pcre/pcre.c:876>:
{   5}                     isprint()
{   5}                     printf()
{   4}                 DPRINTF()
{   4}                 RMATCH()
{   4}                 GET()
{   4}                 memmove()
{   4}                 BACKCHAR()
{   4}                 memcpy()
{   4}                 GETCHAR()
{   4}                 GETCHARINCTEST()
{   4}                 ucp_findchar() <int ucp_findchar (const int c, int *type_ptr, int *case_ptr) at ./srclib/pcre/ucp.c:63>:
{   4}                 GETCHARLEN()
{   4}                 match_ref() <BOOL match_ref (int offset, register const uschar *eptr, int length, match_data *md, unsigned long int ims) at ./srclib/pcre/pcre.c:5663>:
{   5}                     printf()
{   5}                     pchars() <void pchars (const uschar *p, int length, BOOL is_subject, match_data *md) at ./srclib/pcre/pcre.c:876>:
{   6}                         isprint()
{   6}                         printf()
{   4}                 GETCHARINC()
{   4}                 match_xclass() <BOOL match_xclass (int c, const uschar *data) at ./srclib/pcre/pcre.c:5715>:
{   5}                     GETCHARINC()
{   5}                     ucp_findchar() <int ucp_findchar (const int c, int *type_ptr, int *case_ptr) at ./srclib/pcre/ucp.c:63>:
{   4}                 ord2utf8() <int ord2utf8 (int cvalue, uschar *buffer) at ./srclib/pcre/pcre.c:517>:
{   4}                 memcmp()
{   3}             memcpy()
{   2}         fprintf()
